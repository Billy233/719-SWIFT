
MAV_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ce0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08013ec0  08013ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144bc  080144bc  000161e4  2**0
                  CONTENTS
  4 .ARM          00000008  080144bc  080144bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144c4  080144c4  000161e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080144c4  080144c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080144cc  080144cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080144d0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000365c  200001e4  080146b4  000161e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003840  080146b4  00016840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e162  00000000  00000000  00016214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000095be  00000000  00000000  00054376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a40  00000000  00000000  0005d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000206e  00000000  00000000  00060378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e39a  00000000  00000000  000623e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000435ae  00000000  00000000  00090780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8be2  00000000  00000000  000d3d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3e8  00000000  00000000  001bc954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001c7d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013ea8 	.word	0x08013ea8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08013ea8 	.word	0x08013ea8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZN6Teleop10isUnlockedERKNS_6RCDataE>:
	 */
	static void dataSet(const RCData& RC_control);

	static void attitudeControlOuter(const float dt_s);
	static void attitudeControlInter(const float dt_s);
	static bool isUnlocked(const RCData& RC_control) {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    	return RC_control.button1 < 1200 && RC_control.button2 < 1200 && RC_control.throttle < 1100;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800051e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000522:	da0e      	bge.n	8000542 <_ZN6Teleop10isUnlockedERKNS_6RCDataE+0x32>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800052a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800052e:	da08      	bge.n	8000542 <_ZN6Teleop10isUnlockedERKNS_6RCDataE+0x32>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000536:	f240 424b 	movw	r2, #1099	@ 0x44b
 800053a:	4293      	cmp	r3, r2
 800053c:	dc01      	bgt.n	8000542 <_ZN6Teleop10isUnlockedERKNS_6RCDataE+0x32>
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <_ZN6Teleop10isUnlockedERKNS_6RCDataE+0x34>
 8000542:	2300      	movs	r3, #0
	}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <_Z15rcControlUpdateRN6Teleop6RCDataE>:
    uint16_t PPM_Okay = 0;  // 下一次解析状态
    int16_t PPM_Databuf[8] = {0};  // 所有通道的数组
    bool unlock_flag = false;
}

void rcControlUpdate(Teleop::RCData& rc_control) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	rc_control.roll= PPM_Databuf[0];
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 800055a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	801a      	strh	r2, [r3, #0]
	rc_control.pitch= PPM_Databuf[1];
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 8000564:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	805a      	strh	r2, [r3, #2]
	rc_control.throttle= PPM_Databuf[2];
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 800056e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	809a      	strh	r2, [r3, #4]
	rc_control.yaw= PPM_Databuf[3];
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 8000578:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	80da      	strh	r2, [r3, #6]
	rc_control.button1= PPM_Databuf[4];
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 8000582:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	811a      	strh	r2, [r3, #8]
	rc_control.button2= PPM_Databuf[5];
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <_Z15rcControlUpdateRN6Teleop6RCDataE+0x50>)
 800058c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	815a      	strh	r2, [r3, #10]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000200 	.word	0x20000200

080005a4 <_Z9getRCDatav>:

void getRCData(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
    Teleop::RCData rc_control;
    rcControlUpdate(rc_control);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffcf 	bl	8000550 <_Z15rcControlUpdateRN6Teleop6RCDataE>
     * @brief 解注释以下代码，解锁飞控
     */
    /* rc_control.button1 = 2000; */
    /* rc_control.button2 = 2000; */
    /* rc_control.throttle = 1000; */
    if (!Teleop::isUnlocked(rc_control) && !unlock_flag) {
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffab 	bl	8000510 <_ZN6Teleop10isUnlockedERKNS_6RCDataE>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d008      	beq.n	80005d8 <_Z9getRCDatav+0x34>
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <_Z9getRCDatav+0x98>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	f083 0301 	eor.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <_Z9getRCDatav+0x34>
 80005d4:	2301      	movs	r3, #1
 80005d6:	e000      	b.n	80005da <_Z9getRCDatav+0x36>
 80005d8:	2300      	movs	r3, #0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d025      	beq.n	800062a <_Z9getRCDatav+0x86>
        osMutexAcquire(unlock_mutex_handle, 1);
 80005de:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <_Z9getRCDatav+0x9c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f00f f8e6 	bl	800f7b6 <osMutexAcquire>
        printf("Locked\n");
 80005ea:	4816      	ldr	r0, [pc, #88]	@ (8000644 <_Z9getRCDatav+0xa0>)
 80005ec:	f013 f916 	bl	801381c <puts>
        while(!Teleop::isUnlocked(rc_control)) {
 80005f0:	e009      	b.n	8000606 <_Z9getRCDatav+0x62>
            osDelay(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f00e ff40 	bl	800f478 <osDelay>

            rcControlUpdate(rc_control);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffa8 	bl	8000550 <_Z15rcControlUpdateRN6Teleop6RCDataE>
            printf("Locked\n");
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <_Z9getRCDatav+0xa0>)
 8000602:	f013 f90b 	bl	801381c <puts>
        while(!Teleop::isUnlocked(rc_control)) {
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff81 	bl	8000510 <_ZN6Teleop10isUnlockedERKNS_6RCDataE>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1eb      	bne.n	80005f2 <_Z9getRCDatav+0x4e>
        }
        osMutexRelease(unlock_mutex_handle);
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <_Z9getRCDatav+0x9c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f00f f914 	bl	800f84c <osMutexRelease>
        unlock_flag = true;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <_Z9getRCDatav+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
    }

    /* printf("roll: %d, pitch: %d, throttle: %d, yaw: %d, button1: %d, button2: %d\n", rc_control.roll, rc_control.pitch, rc_control.throttle, rc_control.yaw, rc_control.button1, rc_control.button2); */
    Teleop::dataSet(rc_control);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fb25 	bl	8000c7c <_ZN6Teleop7dataSetERKNS_6RCDataE>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000210 	.word	0x20000210
 8000640:	200007d4 	.word	0x200007d4
 8000644:	08013ec0 	.word	0x08013ec0

08000648 <ws2812_set_RGB>:
#include "Drv_ws2812.h"
#include "cmsis_os.h"

uint16_t RGB_buffur[RESET_PULSE + WS2812_DATA_LEN] = { 0 };  //48+4*24

void ws2812_set_RGB(uint8_t R, uint8_t G, uint8_t B, uint16_t num) {
 8000648:	b490      	push	{r4, r7}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	4603      	mov	r3, r0
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	460b      	mov	r3, r1
 8000660:	717b      	strb	r3, [r7, #5]
 8000662:	4613      	mov	r3, r2
 8000664:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
    uint16_t* p = (RGB_buffur + RESET_PULSE) + (num * LED_DATA_LEN);
 8000666:	887a      	ldrh	r2, [r7, #2]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	3360      	adds	r3, #96	@ 0x60
 8000672:	4a23      	ldr	r2, [pc, #140]	@ (8000700 <ws2812_set_RGB+0xb8>)
 8000674:	4413      	add	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0; i < 8; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	e037      	b.n	80006ee <ws2812_set_RGB+0xa6>
    {
        //填充数组
        p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800067e:	79ba      	ldrb	r2, [r7, #6]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <ws2812_set_RGB+0x4a>
 800068e:	213b      	movs	r1, #59	@ 0x3b
 8000690:	e000      	b.n	8000694 <ws2812_set_RGB+0x4c>
 8000692:	211d      	movs	r1, #29
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	801a      	strh	r2, [r3, #0]
        p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <ws2812_set_RGB+0x6c>
 80006b0:	213b      	movs	r1, #59	@ 0x3b
 80006b2:	e000      	b.n	80006b6 <ws2812_set_RGB+0x6e>
 80006b4:	211d      	movs	r1, #29
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	3308      	adds	r3, #8
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	801a      	strh	r2, [r3, #0]
        p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80006c4:	797a      	ldrb	r2, [r7, #5]
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <ws2812_set_RGB+0x90>
 80006d4:	213b      	movs	r1, #59	@ 0x3b
 80006d6:	e000      	b.n	80006da <ws2812_set_RGB+0x92>
 80006d8:	211d      	movs	r1, #29
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	3310      	adds	r3, #16
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	4413      	add	r3, r2
 80006e4:	460a      	mov	r2, r1
 80006e6:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < 8; i++)
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	3301      	adds	r3, #1
 80006ec:	81fb      	strh	r3, [r7, #14]
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d9c4      	bls.n	800067e <ws2812_set_RGB+0x36>
    }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc90      	pop	{r4, r7}
 80006fe:	4770      	bx	lr
 8000700:	20000214 	.word	0x20000214

08000704 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM8) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d107      	bne.n	8000726 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	7f1b      	ldrb	r3, [r3, #28]
 800071a:	2b08      	cmp	r3, #8
 800071c:	d103      	bne.n	8000726 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
	{
      HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_4);
 800071e:	210c      	movs	r1, #12
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000722:	f007 f937 	bl	8007994 <HAL_TIM_PWM_Stop_DMA>
    }
  }
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013400 	.word	0x40013400
 8000734:	200009b0 	.word	0x200009b0

08000738 <ws2812_example>:


void ws2812_example(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0xf0; i < 0xff; i++)
 800073e:	23f0      	movs	r3, #240	@ 0xf0
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	e033      	b.n	80007ac <ws2812_example+0x74>
	{
		ws2812_set_RGB(0x00, i+2, i+3, 0);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	3302      	adds	r3, #2
 8000748:	b2d9      	uxtb	r1, r3
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	3303      	adds	r3, #3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	2300      	movs	r3, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff78 	bl	8000648 <ws2812_set_RGB>
		ws2812_set_RGB(0x00, i+2, i+3, 1);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	3302      	adds	r3, #2
 800075c:	b2d9      	uxtb	r1, r3
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3303      	adds	r3, #3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	2301      	movs	r3, #1
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff6e 	bl	8000648 <ws2812_set_RGB>
		ws2812_set_RGB(0x00, i+2, i+3, 2);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	3302      	adds	r3, #2
 8000770:	b2d9      	uxtb	r1, r3
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3303      	adds	r3, #3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	2302      	movs	r3, #2
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff ff64 	bl	8000648 <ws2812_set_RGB>
		ws2812_set_RGB(0x00, i+2, i+3, 3);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3302      	adds	r3, #2
 8000784:	b2d9      	uxtb	r1, r3
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	3303      	adds	r3, #3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	2303      	movs	r3, #3
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff5a 	bl	8000648 <ws2812_set_RGB>
        HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_4,(uint32_t *)RGB_buffur,(144));
 8000794:	2390      	movs	r3, #144	@ 0x90
 8000796:	4a09      	ldr	r2, [pc, #36]	@ (80007bc <ws2812_example+0x84>)
 8000798:	210c      	movs	r1, #12
 800079a:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <ws2812_example+0x88>)
 800079c:	f006 fe4c 	bl	8007438 <HAL_TIM_PWM_Start_DMA>
		HAL_Delay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f002 f8a1 	bl	80028e8 <HAL_Delay>
	for(uint8_t i = 0xf0; i < 0xff; i++)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3301      	adds	r3, #1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d1c8      	bne.n	8000744 <ws2812_example+0xc>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000214 	.word	0x20000214
 80007c0:	200009b0 	.word	0x200009b0

080007c4 <ws2812_Server>:

extern osEventFlagsId_t ClassisEventHandle;
void ws2812_Server(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
//	if(retval >= 0)
//		flag_s[unlock_f] = (retval >> unlock_f) & 0x01;
//
//	if(flag_s[unlock_f] == 1)
//	{
    ws2812_example();
 80007c8:	f7ff ffb6 	bl	8000738 <ws2812_example>
//	}

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_Z13setMotorSpeedmmmm>:
 *
 */
#include  "Motor.hpp"
#include  "tim.h"

void setMotorSpeed(uint32_t speed1, uint32_t speed2, uint32_t speed3, uint32_t speed4) {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed1);
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <_Z13setMotorSpeedmmmm+0x3c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed2);
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <_Z13setMotorSpeedmmmm+0x3c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed3);
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <_Z13setMotorSpeedmmmm+0x3c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed4);
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <_Z13setMotorSpeedmmmm+0x3c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	641a      	str	r2, [r3, #64]	@ 0x40
	/* printf("speed1: %d, speed2: %d, speed3: %d, speed4: %d\n", speed1, speed2, speed3, speed4); */
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000964 	.word	0x20000964

08000810 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8000814:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	ed87 0a01 	vstr	s0, [r7, #4]
 800082a:	edd7 7a01 	vldr	s15, [r7, #4]
 800082e:	eef0 7ae7 	vabs.f32	s15, s15
 8000832:	eeb0 0a67 	vmov.f32	s0, s15
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_Z12safeDivisionIfEDaT_S0_S0_>:
  *
  * @note 确保输入值类型一致
  * @return 安全的除法结果，类型与输入的数值类型一致
  */
template<typename T>
auto safeDivision(const T numerator, const T denominator, const T safe_value) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	ed87 0a03 	vstr	s0, [r7, #12]
 800084a:	edc7 0a02 	vstr	s1, [r7, #8]
 800084e:	ed87 1a01 	vstr	s2, [r7, #4]
	return std::abs(denominator) < static_cast<T>(1e-6) ? safe_value : numerator / denominator;
 8000852:	ed97 0a02 	vldr	s0, [r7, #8]
 8000856:	f7ff ffe3 	bl	8000820 <_ZSt3absf>
 800085a:	eef0 7a40 	vmov.f32	s15, s0
 800085e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000888 <_Z12safeDivisionIfEDaT_S0_S0_+0x48>
 8000862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d502      	bpl.n	8000872 <_Z12safeDivisionIfEDaT_S0_S0_+0x32>
 800086c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000870:	e005      	b.n	800087e <_Z12safeDivisionIfEDaT_S0_S0_+0x3e>
 8000872:	edd7 6a03 	vldr	s13, [r7, #12]
 8000876:	ed97 7a02 	vldr	s14, [r7, #8]
 800087a:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800087e:	eeb0 0a67 	vmov.f32	s0, s15
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	358637bd 	.word	0x358637bd

0800088c <_ZN13PIDController9calculateEfff>:
#include "PID.hpp"

void PIDController::calculate(const float dt_s, const float target, const float feedback) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	ed87 0a02 	vstr	s0, [r7, #8]
 8000898:	edc7 0a01 	vstr	s1, [r7, #4]
 800089c:	ed87 1a00 	vstr	s2, [r7]
    const float hz = safeDivision(1.0f, dt_s, 0.0f);  // 计算频率
 80008a0:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 80009b8 <_ZN13PIDController9calculateEfff+0x12c>
 80008a4:	edd7 0a02 	vldr	s1, [r7, #8]
 80008a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80008ac:	f7ff ffc8 	bl	8000840 <_Z12safeDivisionIfEDaT_S0_S0_>
 80008b0:	ed87 0a05 	vstr	s0, [r7, #20]

    error_ = target - feedback;  // 计算误差
 80008b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80008b8:	edd7 7a00 	vldr	s15, [r7]
 80008bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	edc3 7a07 	vstr	s15, [r3, #28]

    // 计算比例、积分和微分输出
    p_out_ = params_.p * error_;  // 比例控制
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	ed93 7a00 	vldr	s14, [r3]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80008d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    integral_ += error_;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	ed93 7a08 	vldr	s14, [r3, #32]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80008e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	edc3 7a08 	vstr	s15, [r3, #32]
    integral_ = std::clamp(integral_, -params_.i_range, params_.i_range);  // 积分饱和
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f103 0020 	add.w	r0, r3, #32
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80008fe:	eef1 7a67 	vneg.f32	s15, s15
 8000902:	edc7 7a04 	vstr	s15, [r7, #16]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f103 0214 	add.w	r2, r3, #20
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	f000 f853 	bl	80009bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8000916:	4603      	mov	r3, r0
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	621a      	str	r2, [r3, #32]
    if(params_.integral_flag) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	7e1b      	ldrb	r3, [r3, #24]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00b      	beq.n	800093e <_ZN13PIDController9calculateEfff+0xb2>
        i_out_ = params_.i * integral_;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	ed93 7a01 	vldr	s14, [r3, #4]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800093c:	e003      	b.n	8000946 <_ZN13PIDController9calculateEfff+0xba>
    }
    else {
        i_out_ = 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f04f 0200 	mov.w	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    d_out_ = params_.feedback_k1 * (target - pre_target) * hz - params_.feedback_k2 * (feedback - pre_feedback) * hz;  // 微分控制
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	ed93 7a03 	vldr	s14, [r3, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000952:	edd7 6a01 	vldr	s13, [r7, #4]
 8000956:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800095a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800095e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	edd3 6a04 	vldr	s13, [r3, #16]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000972:	ed97 6a00 	vldr	s12, [r7]
 8000976:	ee76 7a67 	vsub.f32	s15, s12, s15
 800097a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800097e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    output_ = p_out_ + i_out_ + d_out_;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800099c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80009a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	00000000 	.word	0x00000000

080009bc <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @retval `__val` otherwise.
   *  @pre `_Tp` is LessThanComparable and `(__hi < __lo)` is false.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
 80009c8:	f7ff ff22 	bl	8000810 <_ZSt23__is_constant_evaluatedv>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00c      	beq.n	80009ec <_ZSt5clampIfERKT_S2_S2_S2_+0x30>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	ed93 7a00 	vldr	s14, [r3]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e6:	d501      	bpl.n	80009ec <_ZSt5clampIfERKT_S2_S2_S2_+0x30>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <_ZSt5clampIfERKT_S2_S2_S2_+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2b00      	cmp	r3, #0
      return std::min(std::max(__val, __lo), __hi);
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f80a 	bl	8000a0c <_ZSt3maxIfERKT_S2_S2_>
 80009f8:	4603      	mov	r3, r0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f81e 	bl	8000a3e <_ZSt3minIfERKT_S2_S2_>
 8000a02:	4603      	mov	r3, r0
    }
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	ed93 7a00 	vldr	s14, [r3]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	edd3 7a00 	vldr	s15, [r3]
 8000a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2a:	d501      	bpl.n	8000a30 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	e000      	b.n	8000a32 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8000a30:	687b      	ldr	r3, [r7, #4]
    }
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	ed93 7a00 	vldr	s14, [r3]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5c:	d501      	bpl.n	8000a62 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	e000      	b.n	8000a64 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8000a62:	687b      	ldr	r3, [r7, #4]
    }
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>:
	params.i_range = 30;
	params.integral_flag = false;
	rings_[ALTITUDE][INNER][Z].updateParams(params);
}

PIDController& Ring::getPIDController(const Loop loop,const Type type,const Axis axis) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	return rings_[loop][type][axis];
 8000a7c:	68f9      	ldr	r1, [r7, #12]
 8000a7e:	4809      	ldr	r0, [pc, #36]	@ (8000aa4 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis+0x34>)
 8000a80:	f000 f812 	bl	8000aa8 <_ZN8PIDArrayIS_IS_I13PIDControllerLj3EELj2EELj3EEixE4Loop>
 8000a84:	4603      	mov	r3, r0
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f81f 	bl	8000acc <_ZN8PIDArrayIS_I13PIDControllerLj3EELj2EEixE4Type>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f82b 	bl	8000aee <_ZN8PIDArrayI13PIDControllerLj3EEixE4Axis>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000034c 	.word	0x2000034c

08000aa8 <_ZN8PIDArrayIS_IS_I13PIDControllerLj3EELj2EELj3EEixE4Loop>:
class PIDArray {

public:
    auto operator[](auto) = delete;  // 防止隐式类型转换

    PIDArray<PIDArray<PIDController, 3>, 2>& operator[](Loop loop) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
        return data[static_cast<size_t>(loop)];
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
    }
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_ZN8PIDArrayIS_I13PIDControllerLj3EELj2EEixE4Type>:

    PIDArray<PIDController, 3>& operator[](Type type) {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
        return data[static_cast<size_t>(type)];
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	22b4      	movs	r2, #180	@ 0xb4
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
    }
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_ZN8PIDArrayI13PIDControllerLj3EEixE4Axis>:

    PIDController& operator[](Axis axis) {
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
        return data[static_cast<size_t>(axis)];
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	4613      	mov	r3, r2
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	1a9b      	subs	r3, r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4413      	add	r3, r2
    }
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_ZN24ExponentialAverageFilterC1Ef>:
    ExponentialAverageFilter(const float alpha): alpha_(alpha) {}
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	ed87 0a00 	vstr	s0, [r7]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	721a      	strb	r2, [r3, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_ZN24ExponentialAverageFilter6updateEf>:
    float update(const float newValue) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	ed87 0a00 	vstr	s0, [r7]
        if (initialized_) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7a1b      	ldrb	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d018      	beq.n	8000b86 <_ZN24ExponentialAverageFilter6updateEf+0x46>
            average_ = alpha_* newValue + (1 - alpha_) * average_;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	ed93 7a00 	vldr	s14, [r3]
 8000b5a:	edd7 7a00 	vldr	s15, [r7]
 8000b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edc3 7a01 	vstr	s15, [r3, #4]
 8000b84:	e005      	b.n	8000b92 <_ZN24ExponentialAverageFilter6updateEf+0x52>
            average_ = newValue;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
            initialized_ = true;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	721a      	strb	r2, [r3, #8]
        return average_;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	ee07 3a90 	vmov	s15, r3
    }
 8000b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_ZNK13PIDController9getOutputEv>:
	/**
	 * @brief 获取PID输出
	 *
	 * @return PID输出
	 */
	[[nodiscard]] float getOutput() const {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
		return output_;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb4:	ee07 3a90 	vmov	s15, r3
	}
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZN6Teleop8FloatXYZC1Ev>:
	struct FloatXYZ
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN6Teleop13FlightControlC1Ev>:
	struct FlightControl
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffe1 	bl	8000bc6 <_ZN6Teleop8FloatXYZC1Ev>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	330c      	adds	r3, #12
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffdc 	bl	8000bc6 <_ZN6Teleop8FloatXYZC1Ev>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_Z12eventFlagSet6FCMode>:
#include "Motor.hpp"
#include "Ring.hpp"

Teleop::FlightControl Teleop::flight_control_;  // 声明静态成员变量

void eventFlagSet(FCMode mode) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    return;
 8000c22:	bf00      	nop
}
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_Z8deadZoneIiEDaT_S0_S0_>:
[[nodiscard]] auto deadZone(const T x, const T ref, const T zoom) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b087      	sub	sp, #28
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	if (x > ref) {
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dd0a      	ble.n	8000c58 <_Z8deadZoneIiEDaT_S0_S0_+0x2a>
		t = x - zoom;
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	617b      	str	r3, [r7, #20]
		if (t < ref) {
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	da0c      	bge.n	8000c6c <_Z8deadZoneIiEDaT_S0_S0_+0x3e>
			t = ref;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_Z8deadZoneIiEDaT_S0_S0_+0x3e>
		t = x + zoom;
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	617b      	str	r3, [r7, #20]
		if (t > ref) {
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dd01      	ble.n	8000c6c <_Z8deadZoneIiEDaT_S0_S0_+0x3e>
			t = ref;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	617b      	str	r3, [r7, #20]
	return t;
 8000c6c:	697b      	ldr	r3, [r7, #20]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_ZN6Teleop7dataSetERKNS_6RCDataE>:

void Teleop::dataSet(const RCData& RC_control) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	@ 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    FCMode FC_mode{ FCMode::RC };
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    ExponentialAverageFilter filter(.8f);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 8000e88 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x20c>
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff3d 	bl	8000b12 <_ZN24ExponentialAverageFilterC1Ef>

    //XYZ轴速度设定量，正负参考坐标参考方向
    flight_control_.angle.x = static_cast<float>(deadZone(RC_control.roll - 1500, 0, 50)) * 0.006f;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000ca2:	2232      	movs	r2, #50	@ 0x32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffc1 	bl	8000c2e <_Z8deadZoneIiEDaT_S0_S0_>
 8000cac:	ee07 0a90 	vmov	s15, r0
 8000cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000e8c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x210>
 8000cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbc:	4b74      	ldr	r3, [pc, #464]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000cbe:	edc3 7a00 	vstr	s15, [r3]
    flight_control_.angle.y = static_cast<float>(deadZone(RC_control.pitch - 1500, 0, 50)) * 0.006f;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cc8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000ccc:	2232      	movs	r2, #50	@ 0x32
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffac 	bl	8000c2e <_Z8deadZoneIiEDaT_S0_S0_>
 8000cd6:	ee07 0a90 	vmov	s15, r0
 8000cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cde:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000e8c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x210>
 8000ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000ce8:	edc3 7a01 	vstr	s15, [r3, #4]
    flight_control_.angle.z = static_cast<float>(deadZone(RC_control.yaw - 1500, 0, 50)) * 0.006f;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cf2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000cf6:	2232      	movs	r2, #50	@ 0x32
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff97 	bl	8000c2e <_Z8deadZoneIiEDaT_S0_S0_>
 8000d00:	ee07 0a90 	vmov	s15, r0
 8000d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d08:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8000e8c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x210>
 8000d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d10:	4b5f      	ldr	r3, [pc, #380]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d12:	edc3 7a02 	vstr	s15, [r3, #8]
    flight_control_.angle_filtered.x = filter.update(flight_control_.angle.x);
 8000d16:	4b5e      	ldr	r3, [pc, #376]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	eeb0 0a67 	vmov.f32	s0, s15
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff0b 	bl	8000b40 <_ZN24ExponentialAverageFilter6updateEf>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d30:	edc3 7a03 	vstr	s15, [r3, #12]
    flight_control_.angle_filtered.y = filter.update(flight_control_.angle.y);
 8000d34:	4b56      	ldr	r3, [pc, #344]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fefc 	bl	8000b40 <_ZN24ExponentialAverageFilter6updateEf>
 8000d48:	eef0 7a40 	vmov.f32	s15, s0
 8000d4c:	4b50      	ldr	r3, [pc, #320]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d4e:	edc3 7a04 	vstr	s15, [r3, #16]
    flight_control_.angle_filtered.z = filter.update(flight_control_.angle.z);  // 指数移动平均滤波
 8000d52:	4b4f      	ldr	r3, [pc, #316]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff feed 	bl	8000b40 <_ZN24ExponentialAverageFilter6updateEf>
 8000d66:	eef0 7a40 	vmov.f32	s15, s0
 8000d6a:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d6c:	edc3 7a05 	vstr	s15, [r3, #20]
    flight_control_.angle_filtered.x = std::clamp(flight_control_.angle_filtered.x, -30.0f, 30.0f);
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x218>)
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	4b48      	ldr	r3, [pc, #288]	@ (8000e98 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x21c>)
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	f107 021c 	add.w	r2, r7, #28
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4846      	ldr	r0, [pc, #280]	@ (8000e9c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x220>)
 8000d84:	f7ff fe1a 	bl	80009bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000d8e:	60d3      	str	r3, [r2, #12]
    flight_control_.angle_filtered.y = std::clamp(flight_control_.angle_filtered.y, -30.0f, 30.0f);
 8000d90:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x218>)
 8000d92:	623b      	str	r3, [r7, #32]
 8000d94:	4b40      	ldr	r3, [pc, #256]	@ (8000e98 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x21c>)
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d98:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4619      	mov	r1, r3
 8000da2:	483f      	ldr	r0, [pc, #252]	@ (8000ea0 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x224>)
 8000da4:	f7ff fe0a 	bl	80009bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8000da8:	4603      	mov	r3, r0
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a38      	ldr	r2, [pc, #224]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000dae:	6113      	str	r3, [r2, #16]
    flight_control_.angle_filtered.z = std::clamp(flight_control_.angle_filtered.z, -30.0f, 30.0f);  // 限幅，将值限幅在[-30.0, 30.0]内
 8000db0:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x218>)
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000db4:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x21c>)
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000db8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4838      	ldr	r0, [pc, #224]	@ (8000ea4 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x228>)
 8000dc4:	f7ff fdfa 	bl	80009bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000dce:	6153      	str	r3, [r2, #20]

    flight_control_.speed_z = static_cast<float>(deadZone(RC_control.roll - 1500, 0, 50)) * 0.0023f;  // 大约为-1 ~ 1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000dda:	2232      	movs	r2, #50	@ 0x32
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff25 	bl	8000c2e <_Z8deadZoneIiEDaT_S0_S0_>
 8000de4:	ee07 0a90 	vmov	s15, r0
 8000de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000ea8 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x22c>
 8000df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df4:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000df6:	edc3 7a06 	vstr	s15, [r3, #24]
    flight_control_.speed_z_filtered = filter.update(flight_control_.speed_z);
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000dfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	eeb0 0a67 	vmov.f32	s0, s15
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe99 	bl	8000b40 <_ZN24ExponentialAverageFilter6updateEf>
 8000e0e:	eef0 7a40 	vmov.f32	s15, s0
 8000e12:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000e14:	edc3 7a07 	vstr	s15, [r3, #28]
    flight_control_.speed_z_filtered = std::clamp(flight_control_.speed_z_filtered, -VelocityLimit::velocity_limit_z_down, VelocityLimit::velocity_limit_z_up);
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <_ZN6Teleop7dataSetERKNS_6RCDataE+0x230>)
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e20:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x234>)
 8000e22:	4619      	mov	r1, r3
 8000e24:	4823      	ldr	r0, [pc, #140]	@ (8000eb4 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x238>)
 8000e26:	f7ff fdc9 	bl	80009bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x214>)
 8000e30:	61d3      	str	r3, [r2, #28]
    //飞控系统XY速度目标量综合设定（在XY平面内的速度分解成X轴方向上的速度和Y轴方向上的速度）
    if (RC_control.button1 > 1300 && RC_control.button1 < 1700) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e38:	f240 5214 	movw	r2, #1300	@ 0x514
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	dd0d      	ble.n	8000e5c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x1e0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e46:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	dc06      	bgt.n	8000e5c <_ZN6Teleop7dataSetERKNS_6RCDataE+0x1e0>
        FC_mode = FCMode::FIX;  // 定点模式
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        eventFlagSet(FCMode::FIX);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fedf 	bl	8000c18 <_Z12eventFlagSet6FCMode>
    }
    else if (RC_control.button1 > 800 && RC_control.button1 < 1200) {
        FC_mode = FCMode::RC;  // 手动控制模式
        eventFlagSet(FCMode::RC);
    }
}
 8000e5a:	e011      	b.n	8000e80 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x204>
    else if (RC_control.button1 > 800 && RC_control.button1 < 1200) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e62:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000e66:	dd0b      	ble.n	8000e80 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x204>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e6e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000e72:	da05      	bge.n	8000e80 <_ZN6Teleop7dataSetERKNS_6RCDataE+0x204>
        FC_mode = FCMode::RC;  // 手动控制模式
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        eventFlagSet(FCMode::RC);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fecc 	bl	8000c18 <_Z12eventFlagSet6FCMode>
}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	@ 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	3f4ccccd 	.word	0x3f4ccccd
 8000e8c:	3bc49ba6 	.word	0x3bc49ba6
 8000e90:	20000784 	.word	0x20000784
 8000e94:	c1f00000 	.word	0xc1f00000
 8000e98:	41f00000 	.word	0x41f00000
 8000e9c:	20000790 	.word	0x20000790
 8000ea0:	20000794 	.word	0x20000794
 8000ea4:	20000798 	.word	0x20000798
 8000ea8:	3b16bb99 	.word	0x3b16bb99
 8000eac:	bf800000 	.word	0xbf800000
 8000eb0:	0801437c 	.word	0x0801437c
 8000eb4:	200007a0 	.word	0x200007a0

08000eb8 <_ZSt3getILj0EJN7Chassis10FloatAngleEEEOKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOKS6_>:
    }

  /// Return a const rvalue reference to the ith element of a const tuple rvalue.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type>(std::__get_helper<__i>(__t));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f809 	bl	8000eda <_ZSt12__get_helperILj0EN7Chassis10FloatAngleEJEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f829 	bl	8000f22 <_ZSt7forwardIKN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000ed0:	4603      	mov	r3, r0
    }
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZSt12__get_helperILj0EN7Chassis10FloatAngleEJEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f805 	bl	8000ef2 <_ZNSt11_Tuple_implILj0EJN7Chassis10FloatAngleEEE7_M_headERKS2_>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZNSt11_Tuple_implILj0EJN7Chassis10FloatAngleEEE7_M_headERKS2_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f805 	bl	8000f0c <_ZNSt10_Head_baseILj0EN7Chassis10FloatAngleELb0EE7_M_headERKS2_>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZNSt10_Head_baseILj0EN7Chassis10FloatAngleELb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZSt7forwardIKN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_ZN6Teleop20attitudeControlOuterEf>:

void Teleop::attitudeControlOuter(const float dt_s) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	ed87 0a01 	vstr	s0, [r7, #4]
    using enum Loop; using enum Type; using enum Axis;
    const auto [feed_back_angle] = Chassis::dataGet<Chassis::FloatAngle>();
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f9e0 	bl	800130c <_ZN7Chassis7dataGetIJNS_10FloatAngleEEEESt5tupleIJDpT_EEv>
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffb1 	bl	8000eb8 <_ZSt3getILj0EJN7Chassis10FloatAngleEEEOKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOKS6_>
 8000f56:	6178      	str	r0, [r7, #20]
    Ring::getPIDController(ANGLE, OUTER, X).calculate(dt_s, flight_control_.angle_filtered.x, feed_back_angle.roll);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fd87 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8000f62:	4602      	mov	r2, r0
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_ZN6Teleop20attitudeControlOuterEf+0x7c>)
 8000f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	ed93 7a00 	vldr	s14, [r3]
 8000f70:	eeb0 1a47 	vmov.f32	s2, s14
 8000f74:	eef0 0a67 	vmov.f32	s1, s15
 8000f78:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	f7ff fc85 	bl	800088c <_ZN13PIDController9calculateEfff>
    Ring::getPIDController(ANGLE, OUTER, Y).calculate(dt_s, flight_control_.angle_filtered.y, feed_back_angle.pitch);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fd72 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <_ZN6Teleop20attitudeControlOuterEf+0x7c>)
 8000f90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f9a:	eeb0 1a47 	vmov.f32	s2, s14
 8000f9e:	eef0 0a67 	vmov.f32	s1, s15
 8000fa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	f7ff fc70 	bl	800088c <_ZN13PIDController9calculateEfff>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000784 	.word	0x20000784

08000fb8 <_ZSt3getILj0EJN7Chassis9FloatGyroEEEOKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOKS6_>:
    get(const tuple<_Elements...>&& __t) noexcept
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
      return std::forward<const __element_type>(std::__get_helper<__i>(__t));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f809 	bl	8000fda <_ZSt12__get_helperILj0EN7Chassis9FloatGyroEJEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f829 	bl	8001022 <_ZSt7forwardIKN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000fd0:	4603      	mov	r3, r0
    }
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZSt12__get_helperILj0EN7Chassis9FloatGyroEJEERKT0_RKSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f805 	bl	8000ff2 <_ZNSt11_Tuple_implILj0EJN7Chassis9FloatGyroEEE7_M_headERKS2_>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZNSt11_Tuple_implILj0EJN7Chassis9FloatGyroEEE7_M_headERKS2_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f805 	bl	800100c <_ZNSt10_Head_baseILj0EN7Chassis9FloatGyroELb0EE7_M_headERKS2_>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZNSt10_Head_baseILj0EN7Chassis9FloatGyroELb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt7forwardIKN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN6Teleop20attitudeControlInterEf>:

void Teleop::attitudeControlInter(const float dt_s) {
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	ed2d 8b02 	vpush	{d8}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
    using enum Loop; using enum Type; using enum Axis;
    const auto [feed_back_angular_speed] = Chassis::dataGet<Chassis::FloatGyro>();
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f99e 	bl	800138c <_ZN7Chassis7dataGetIJNS_9FloatGyroEEEESt5tupleIJDpT_EEv>
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ffaf 	bl	8000fb8 <_ZSt3getILj0EJN7Chassis9FloatGyroEEEOKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOKS6_>
 800105a:	61f8      	str	r0, [r7, #28]
    const auto target_angular_speed_x = Ring::getPIDController(ANGLE, OUTER, X).getOutput();
 800105c:	2200      	movs	r2, #0
 800105e:	2101      	movs	r1, #1
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fd05 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001066:	4603      	mov	r3, r0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fd9d 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 800106e:	ed87 0a06 	vstr	s0, [r7, #24]
    const auto target_angular_speed_y = Ring::getPIDController(ANGLE, OUTER, Y).getOutput();
 8001072:	2201      	movs	r2, #1
 8001074:	2101      	movs	r1, #1
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fcfa 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 800107c:	4603      	mov	r3, r0
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd92 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001084:	ed87 0a05 	vstr	s0, [r7, #20]
    Ring::getPIDController(ANGLE, INNER, X).calculate(dt_s, target_angular_speed_x, feed_back_angular_speed.x);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fcef 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001092:	4602      	mov	r2, r0
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	eeb0 1a67 	vmov.f32	s2, s15
 800109e:	edd7 0a06 	vldr	s1, [r7, #24]
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4610      	mov	r0, r2
 80010a8:	f7ff fbf0 	bl	800088c <_ZN13PIDController9calculateEfff>
    Ring::getPIDController(ANGLE, INNER, Y).calculate(dt_s, target_angular_speed_y, feed_back_angular_speed.y);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2100      	movs	r1, #0
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fcdd 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 80010b6:	4602      	mov	r2, r0
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80010be:	eeb0 1a67 	vmov.f32	s2, s15
 80010c2:	edd7 0a05 	vldr	s1, [r7, #20]
 80010c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80010ca:	4610      	mov	r0, r2
 80010cc:	f7ff fbde 	bl	800088c <_ZN13PIDController9calculateEfff>
    Ring::getPIDController(ANGLE, INNER, Z).calculate(dt_s, flight_control_.angle_filtered.z, feed_back_angular_speed.z);
 80010d0:	2202      	movs	r2, #2
 80010d2:	2100      	movs	r1, #0
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fccb 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b78      	ldr	r3, [pc, #480]	@ (80012c0 <_ZN6Teleop20attitudeControlInterEf+0x288>)
 80010de:	edd3 7a05 	vldr	s15, [r3, #20]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80010e8:	eeb0 1a47 	vmov.f32	s2, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff fbc9 	bl	800088c <_ZN13PIDController9calculateEfff>
    setMotorSpeed(
        static_cast<int>(1500 + flight_control_.speed_z_filtered * 500 - Ring::getPIDController(ANGLE, INNER, X).getOutput() - Ring::getPIDController(ANGLE, INNER, Y).getOutput() + Ring::getPIDController(ANGLE, INNER, Z).getOutput()),
 80010fa:	4b71      	ldr	r3, [pc, #452]	@ (80012c0 <_ZN6Teleop20attitudeControlInterEf+0x288>)
 80010fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001100:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80012c4 <_ZN6Teleop20attitudeControlInterEf+0x28c>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80012c8 <_ZN6Teleop20attitudeControlInterEf+0x290>
 800110c:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fcab 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd43 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	ee38 8a67 	vsub.f32	s16, s16, s15
 800112a:	2201      	movs	r2, #1
 800112c:	2100      	movs	r1, #0
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff fc9e 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fd36 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 800113c:	eef0 7a40 	vmov.f32	s15, s0
 8001140:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001144:	2202      	movs	r2, #2
 8001146:	2100      	movs	r1, #0
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fc91 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fd29 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001156:	eef0 7a40 	vmov.f32	s15, s0
 800115a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    setMotorSpeed(
 8001162:	ee17 4a90 	vmov	r4, s15
        static_cast<int>(1500 + flight_control_.speed_z_filtered * 500 - Ring::getPIDController(ANGLE, INNER, X).getOutput() + Ring::getPIDController(ANGLE, INNER, Y).getOutput() - Ring::getPIDController(ANGLE, INNER, Z).getOutput()),
 8001166:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <_ZN6Teleop20attitudeControlInterEf+0x288>)
 8001168:	edd3 7a07 	vldr	s15, [r3, #28]
 800116c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80012c4 <_ZN6Teleop20attitudeControlInterEf+0x28c>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80012c8 <_ZN6Teleop20attitudeControlInterEf+0x290>
 8001178:	ee37 8a87 	vadd.f32	s16, s15, s14
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fc75 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fd0d 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001196:	2201      	movs	r2, #1
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fc68 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fd00 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 80011a8:	eef0 7a40 	vmov.f32	s15, s0
 80011ac:	ee38 8a27 	vadd.f32	s16, s16, s15
 80011b0:	2202      	movs	r2, #2
 80011b2:	2100      	movs	r1, #0
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fc5b 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fcf3 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 80011c2:	eef0 7a40 	vmov.f32	s15, s0
 80011c6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    setMotorSpeed(
 80011ce:	ee17 5a90 	vmov	r5, s15
        static_cast<int>(1500 + flight_control_.speed_z_filtered * 500 + Ring::getPIDController(ANGLE, INNER, X).getOutput() + Ring::getPIDController(ANGLE, INNER, Y).getOutput() + Ring::getPIDController(ANGLE, INNER, Z).getOutput()),
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <_ZN6Teleop20attitudeControlInterEf+0x288>)
 80011d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80011d8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80012c4 <_ZN6Teleop20attitudeControlInterEf+0x28c>
 80011dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80012c8 <_ZN6Teleop20attitudeControlInterEf+0x290>
 80011e4:	ee37 8a87 	vadd.f32	s16, s15, s14
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fc3f 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fcd7 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 80011fa:	eef0 7a40 	vmov.f32	s15, s0
 80011fe:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001202:	2201      	movs	r2, #1
 8001204:	2100      	movs	r1, #0
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fc32 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fcca 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
 8001218:	ee38 8a27 	vadd.f32	s16, s16, s15
 800121c:	2202      	movs	r2, #2
 800121e:	2100      	movs	r1, #0
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fc25 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fcbd 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 800122e:	eef0 7a40 	vmov.f32	s15, s0
 8001232:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    setMotorSpeed(
 800123a:	ee17 6a90 	vmov	r6, s15
        static_cast<int>(1500 + flight_control_.speed_z_filtered * 500 + Ring::getPIDController(ANGLE, INNER, X).getOutput() - Ring::getPIDController(ANGLE, INNER, Y).getOutput() - Ring::getPIDController(ANGLE, INNER, Z).getOutput())
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <_ZN6Teleop20attitudeControlInterEf+0x288>)
 8001240:	edd3 7a07 	vldr	s15, [r3, #28]
 8001244:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80012c4 <_ZN6Teleop20attitudeControlInterEf+0x28c>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80012c8 <_ZN6Teleop20attitudeControlInterEf+0x290>
 8001250:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fc09 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fca1 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001266:	eef0 7a40 	vmov.f32	s15, s0
 800126a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800126e:	2201      	movs	r2, #1
 8001270:	2100      	movs	r1, #0
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fbfc 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fc94 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 8001280:	eef0 7a40 	vmov.f32	s15, s0
 8001284:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001288:	2202      	movs	r2, #2
 800128a:	2100      	movs	r1, #0
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fbef 	bl	8000a70 <_ZN4Ring16getPIDControllerE4Loop4Type4Axis>
 8001292:	4603      	mov	r3, r0
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fc87 	bl	8000ba8 <_ZNK13PIDController9getOutputEv>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    setMotorSpeed(
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	4632      	mov	r2, r6
 80012ac:	4629      	mov	r1, r5
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff fa8e 	bl	80007d0 <_Z13setMotorSpeedmmmm>
    );
}
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	@ 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	ecbd 8b02 	vpop	{d8}
 80012be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c0:	20000784 	.word	0x20000784
 80012c4:	43fa0000 	.word	0x43fa0000
 80012c8:	44bb8000 	.word	0x44bb8000

080012cc <_ZZN7Chassis7dataGetIJNS_10FloatAngleEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav>:
     *   auto [angle, RC_control] = dataGet<FloatAngle, RCType>();  // 读取了angle_和RC_control_成员
     * @endcode
     */
    template<typename ...Args>
    [[nodiscard]] static std::tuple<Args...> dataGet() {
        auto get = []<typename T>() {
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	@ 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6178      	str	r0, [r7, #20]
            if constexpr (std::is_same_v<T, FloatAngle>) {
                return angle_;
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <_ZZN7Chassis7dataGetIJNS_10FloatAngleEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav+0x3c>)
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	ca07      	ldmia	r2, {r0, r1, r2}
 80012dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012e0:	69f9      	ldr	r1, [r7, #28]
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	ee06 1a90 	vmov	s13, r1
 80012ea:	ee07 2a10 	vmov	s14, r2
 80012ee:	ee07 3a90 	vmov	s15, r3
        auto get = []<typename T>() {
 80012f2:	eeb0 0a66 	vmov.f32	s0, s13
 80012f6:	eef0 0a47 	vmov.f32	s1, s14
 80012fa:	eeb0 1a67 	vmov.f32	s2, s15
 80012fe:	372c      	adds	r7, #44	@ 0x2c
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	20000334 	.word	0x20000334

0800130c <_ZN7Chassis7dataGetIJNS_10FloatAngleEEEESt5tupleIJDpT_EEv>:
    [[nodiscard]] static std::tuple<Args...> dataGet() {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
                // 由于编译时类型检查，这个分支实际上在正常使用中是不会被执行的。
                static_assert(AlwaysFalse<T>::value, "错误的类型！请确保类型为ChassisContainer的成员变量类型中的一个！");
                return 0;  // 事实上不会执行，因为前面在编译时就会报错；仅仅是为了防止警告。
            }
        };
        return { get.template operator() <Args>()... };  // 模板lambda展开
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffd7 	bl	80012cc <_ZZN7Chassis7dataGetIJNS_10FloatAngleEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav>
 800131e:	eef0 6a40 	vmov.f32	s13, s0
 8001322:	eeb0 7a60 	vmov.f32	s14, s1
 8001326:	eef0 7a41 	vmov.f32	s15, s2
 800132a:	edc7 6a03 	vstr	s13, [r7, #12]
 800132e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001332:	edc7 7a05 	vstr	s15, [r7, #20]
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f844 	bl	80013ca <_ZNSt5tupleIJN7Chassis10FloatAngleEEEC1IJS1_ELb1ELb1EEEDpOT_>
    }
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <_ZZN7Chassis7dataGetIJNS_9FloatGyroEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav>:
        auto get = []<typename T>() {
 800134c:	b480      	push	{r7}
 800134e:	b08b      	sub	sp, #44	@ 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6178      	str	r0, [r7, #20]
                return gyro_;
 8001354:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <_ZZN7Chassis7dataGetIJNS_9FloatGyroEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav+0x3c>)
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	ca07      	ldmia	r2, {r0, r1, r2}
 800135c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001360:	69f9      	ldr	r1, [r7, #28]
 8001362:	6a3a      	ldr	r2, [r7, #32]
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	ee06 1a90 	vmov	s13, r1
 800136a:	ee07 2a10 	vmov	s14, r2
 800136e:	ee07 3a90 	vmov	s15, r3
        auto get = []<typename T>() {
 8001372:	eeb0 0a66 	vmov.f32	s0, s13
 8001376:	eef0 0a47 	vmov.f32	s1, s14
 800137a:	eeb0 1a67 	vmov.f32	s2, s15
 800137e:	372c      	adds	r7, #44	@ 0x2c
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000340 	.word	0x20000340

0800138c <_ZN7Chassis7dataGetIJNS_9FloatGyroEEEESt5tupleIJDpT_EEv>:
    [[nodiscard]] static std::tuple<Args...> dataGet() {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
        return { get.template operator() <Args>()... };  // 模板lambda展开
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffd7 	bl	800134c <_ZZN7Chassis7dataGetIJNS_9FloatGyroEEEESt5tupleIJDpT_EEvENKUlvE_clIS1_EEDav>
 800139e:	eef0 6a40 	vmov.f32	s13, s0
 80013a2:	eeb0 7a60 	vmov.f32	s14, s1
 80013a6:	eef0 7a41 	vmov.f32	s15, s2
 80013aa:	edc7 6a03 	vstr	s13, [r7, #12]
 80013ae:	ed87 7a04 	vstr	s14, [r7, #16]
 80013b2:	edc7 7a05 	vstr	s15, [r7, #20]
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f817 	bl	80013f0 <_ZNSt5tupleIJN7Chassis9FloatGyroEEEC1IJS1_ELb1ELb1EEEDpOT_>
    }
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZNSt5tupleIJN7Chassis10FloatAngleEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80013ca:	b590      	push	{r4, r7, lr}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80013d4:	687c      	ldr	r4, [r7, #4]
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f000 f81d 	bl	8001416 <_ZSt7forwardIN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS2_E4typeE>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	4620      	mov	r0, r4
 80013e2:	f000 f823 	bl	800142c <_ZNSt11_Tuple_implILj0EJN7Chassis10FloatAngleEEEC1IS1_EEOT_>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}

080013f0 <_ZNSt5tupleIJN7Chassis9FloatGyroEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80013fa:	687c      	ldr	r4, [r7, #4]
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 f828 	bl	8001452 <_ZSt7forwardIN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	4620      	mov	r0, r4
 8001408:	f000 f82e 	bl	8001468 <_ZNSt11_Tuple_implILj0EJN7Chassis9FloatGyroEEEC1IS1_EEOT_>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <_ZSt7forwardIN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_ZNSt11_Tuple_implILj0EJN7Chassis10FloatAngleEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8001436:	687c      	ldr	r4, [r7, #4]
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f7ff ffec 	bl	8001416 <_ZSt7forwardIN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS2_E4typeE>
 800143e:	4603      	mov	r3, r0
 8001440:	4619      	mov	r1, r3
 8001442:	4620      	mov	r0, r4
 8001444:	f000 f823 	bl	800148e <_ZNSt10_Head_baseILj0EN7Chassis10FloatAngleELb0EEC1IS1_EEOT_>
	{ }
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}

08001452 <_ZSt7forwardIN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_ZNSt11_Tuple_implILj0EJN7Chassis9FloatGyroEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8001472:	687c      	ldr	r4, [r7, #4]
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f7ff ffec 	bl	8001452 <_ZSt7forwardIN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS2_E4typeE>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f000 f817 	bl	80014b2 <_ZNSt10_Head_baseILj0EN7Chassis9FloatGyroELb0EEC1IS1_EEOT_>
	{ }
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}

0800148e <_ZNSt10_Head_baseILj0EN7Chassis10FloatAngleELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7ff ffbc 	bl	8001416 <_ZSt7forwardIN7Chassis10FloatAngleEEOT_RNSt16remove_referenceIS2_E4typeE>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZNSt10_Head_baseILj0EN7Chassis9FloatGyroELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff ffc8 	bl	8001452 <_ZSt7forwardIN7Chassis9FloatGyroEEOT_RNSt16remove_referenceIS2_E4typeE>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <_Z41__static_initialization_and_destruction_0ii>:
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d102      	bne.n	80014f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Teleop::FlightControl Teleop::flight_control_;  // 声明静态成员变量
 80014f2:	4803      	ldr	r0, [pc, #12]	@ (8001500 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80014f4:	f7ff fb7e 	bl	8000bf4 <_ZN6Teleop13FlightControlC1Ev>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000784 	.word	0x20000784

08001504 <_GLOBAL__sub_I__ZN6Teleop15flight_control_E>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffe3 	bl	80014d8 <_Z41__static_initialization_and_destruction_0ii>
 8001512:	bd80      	pop	{r7, pc}

08001514 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <MX_CRC_Init+0x3c>)
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <MX_CRC_Init+0x40>)
 800151c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_CRC_Init+0x3c>)
 8001520:	2200      	movs	r2, #0
 8001522:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <MX_CRC_Init+0x3c>)
 8001526:	2200      	movs	r2, #0
 8001528:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_CRC_Init+0x3c>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <MX_CRC_Init+0x3c>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_CRC_Init+0x3c>)
 8001538:	2201      	movs	r2, #1
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_CRC_Init+0x3c>)
 800153e:	f001 fb05 	bl	8002b4c <HAL_CRC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001548:	f000 faac 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200007a4 	.word	0x200007a4
 8001554:	40023000 	.word	0x40023000

08001558 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_CRC_MspInit+0x38>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10b      	bne.n	8001582 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_CRC_MspInit+0x3c>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <HAL_CRC_MspInit+0x3c>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001574:	6493      	str	r3, [r2, #72]	@ 0x48
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <HAL_CRC_MspInit+0x3c>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023000 	.word	0x40023000
 8001594:	40021000 	.word	0x40021000

08001598 <_Z16getImuDataServerv>:
void SensorTask(void *argument);
void TriflesTask(void *argument);

void UserTasksCallback(void *argument);
void LedCallback(void *argument);
void getImuDataServer(void) {
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <MX_FREERTOS_Init>:


extern "C"{
void MX_FREERTOS_Init(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	/* creation of ChassisMutex */
	chassis_mutex_handle = osMutexNew(&chassis_mutex_attributes);
 80015ac:	482a      	ldr	r0, [pc, #168]	@ (8001658 <MX_FREERTOS_Init+0xb0>)
 80015ae:	f00e f87c 	bl	800f6aa <osMutexNew>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a29      	ldr	r2, [pc, #164]	@ (800165c <MX_FREERTOS_Init+0xb4>)
 80015b6:	6013      	str	r3, [r2, #0]
	/* creation of SensorMutex */
	sensor_mutex_handle = osMutexNew(&sensor_mutex_attributes);
 80015b8:	4829      	ldr	r0, [pc, #164]	@ (8001660 <MX_FREERTOS_Init+0xb8>)
 80015ba:	f00e f876 	bl	800f6aa <osMutexNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <MX_FREERTOS_Init+0xbc>)
 80015c2:	6013      	str	r3, [r2, #0]
	/* creation of TriflesMutex */
	trifles_mutex_handle = osMutexNew(&trifles_mutex_attributes);
 80015c4:	4828      	ldr	r0, [pc, #160]	@ (8001668 <MX_FREERTOS_Init+0xc0>)
 80015c6:	f00e f870 	bl	800f6aa <osMutexNew>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a27      	ldr	r2, [pc, #156]	@ (800166c <MX_FREERTOS_Init+0xc4>)
 80015ce:	6013      	str	r3, [r2, #0]
	/* creation of UnlockMutex */
	unlock_mutex_handle = osMutexNew(&unlock_mutex_attributes);
 80015d0:	4827      	ldr	r0, [pc, #156]	@ (8001670 <MX_FREERTOS_Init+0xc8>)
 80015d2:	f00e f86a 	bl	800f6aa <osMutexNew>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <MX_FREERTOS_Init+0xcc>)
 80015da:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */

	/* creation of User_TasksTimer */
	usertasks_timer_handle = osTimerNew(UserTasksCallback, osTimerPeriodic, NULL, &usertasks_timer_attributes);
 80015dc:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <MX_FREERTOS_Init+0xd0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	4826      	ldr	r0, [pc, #152]	@ (800167c <MX_FREERTOS_Init+0xd4>)
 80015e4:	f00d ff78 	bl	800f4d8 <osTimerNew>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a25      	ldr	r2, [pc, #148]	@ (8001680 <MX_FREERTOS_Init+0xd8>)
 80015ec:	6013      	str	r3, [r2, #0]
	/* creation of LedTimer */
	led_timer_handle = osTimerNew(LedCallback, osTimerPeriodic, NULL, &led_timer_attributes);
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <MX_FREERTOS_Init+0xdc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	2101      	movs	r1, #1
 80015f4:	4824      	ldr	r0, [pc, #144]	@ (8001688 <MX_FREERTOS_Init+0xe0>)
 80015f6:	f00d ff6f 	bl	800f4d8 <osTimerNew>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <MX_FREERTOS_Init+0xe4>)
 80015fe:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	chassis_task_handle = osThreadNew(StartDefaultTask, NULL, &chassis_task_attributes);
 8001600:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_FREERTOS_Init+0xe8>)
 8001602:	2100      	movs	r1, #0
 8001604:	4823      	ldr	r0, [pc, #140]	@ (8001694 <MX_FREERTOS_Init+0xec>)
 8001606:	f00d fea5 	bl	800f354 <osThreadNew>
 800160a:	4603      	mov	r3, r0
 800160c:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <MX_FREERTOS_Init+0xf0>)
 800160e:	6013      	str	r3, [r2, #0]
	sensor_task_handle = osThreadNew(SensorTask, NULL, &sensor_task_attributes);
 8001610:	4a22      	ldr	r2, [pc, #136]	@ (800169c <MX_FREERTOS_Init+0xf4>)
 8001612:	2100      	movs	r1, #0
 8001614:	4822      	ldr	r0, [pc, #136]	@ (80016a0 <MX_FREERTOS_Init+0xf8>)
 8001616:	f00d fe9d 	bl	800f354 <osThreadNew>
 800161a:	4603      	mov	r3, r0
 800161c:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <MX_FREERTOS_Init+0xfc>)
 800161e:	6013      	str	r3, [r2, #0]
	trifles_task_handle = osThreadNew(TriflesTask, NULL, &trifles_task_attributes);
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <MX_FREERTOS_Init+0x100>)
 8001622:	2100      	movs	r1, #0
 8001624:	4821      	ldr	r0, [pc, #132]	@ (80016ac <MX_FREERTOS_Init+0x104>)
 8001626:	f00d fe95 	bl	800f354 <osThreadNew>
 800162a:	4603      	mov	r3, r0
 800162c:	4a20      	ldr	r2, [pc, #128]	@ (80016b0 <MX_FREERTOS_Init+0x108>)
 800162e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */

	/* creation of ClassisEventFlag */
	chassis_event_handle = osEventFlagsNew(&chassis_event_attributes);
 8001630:	4820      	ldr	r0, [pc, #128]	@ (80016b4 <MX_FREERTOS_Init+0x10c>)
 8001632:	f00d fffb 	bl	800f62c <osEventFlagsNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <MX_FREERTOS_Init+0x110>)
 800163a:	6013      	str	r3, [r2, #0]
	/* creation of SensorEventFlag */
	sensor_event_handle = osEventFlagsNew(&sensor_event_attributes);
 800163c:	481f      	ldr	r0, [pc, #124]	@ (80016bc <MX_FREERTOS_Init+0x114>)
 800163e:	f00d fff5 	bl	800f62c <osEventFlagsNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a1e      	ldr	r2, [pc, #120]	@ (80016c0 <MX_FREERTOS_Init+0x118>)
 8001646:	6013      	str	r3, [r2, #0]
	/* creation of TriflesEventFlag */
	trifles_event_handle = osEventFlagsNew(&trifles_event_attributes);
 8001648:	481e      	ldr	r0, [pc, #120]	@ (80016c4 <MX_FREERTOS_Init+0x11c>)
 800164a:	f00d ffef 	bl	800f62c <osEventFlagsNew>
 800164e:	4603      	mov	r3, r0
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <MX_FREERTOS_Init+0x120>)
 8001652:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_EVENTS */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	08014380 	.word	0x08014380
 800165c:	200007c8 	.word	0x200007c8
 8001660:	08014390 	.word	0x08014390
 8001664:	200007cc 	.word	0x200007cc
 8001668:	080143a0 	.word	0x080143a0
 800166c:	200007d0 	.word	0x200007d0
 8001670:	080143b0 	.word	0x080143b0
 8001674:	200007d4 	.word	0x200007d4
 8001678:	080143c0 	.word	0x080143c0
 800167c:	080017a5 	.word	0x080017a5
 8001680:	200007d8 	.word	0x200007d8
 8001684:	080143d0 	.word	0x080143d0
 8001688:	080017b9 	.word	0x080017b9
 800168c:	200007dc 	.word	0x200007dc
 8001690:	080143e0 	.word	0x080143e0
 8001694:	080016cd 	.word	0x080016cd
 8001698:	200007e0 	.word	0x200007e0
 800169c:	08014404 	.word	0x08014404
 80016a0:	08001755 	.word	0x08001755
 80016a4:	200007e4 	.word	0x200007e4
 80016a8:	08014428 	.word	0x08014428
 80016ac:	08001799 	.word	0x08001799
 80016b0:	200007e8 	.word	0x200007e8
 80016b4:	0801444c 	.word	0x0801444c
 80016b8:	200007ec 	.word	0x200007ec
 80016bc:	0801445c 	.word	0x0801445c
 80016c0:	200007f0 	.word	0x200007f0
 80016c4:	0801446c 	.word	0x0801446c
 80016c8:	200007f4 	.word	0x200007f4

080016cc <_Z16StartDefaultTaskPv>:
/**
  * @brief  启动任务：启用定时器，开始控制系统(20ms)
  * @param  argument: Not used
  * @retval None
  */
void StartDefaultTask(void *argument) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80016d4:	f011 f9f0 	bl	8012ab8 <MX_USB_Device_Init>
  // getImuDataInit(); // 初始化IMU
  osTimerStart(led_timer_handle, 2000);
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <_Z16StartDefaultTaskPv+0x74>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00d ff75 	bl	800f5d0 <osTimerStart>
  osDelay(500);
 80016e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ea:	f00d fec5 	bl	800f478 <osDelay>
  osMutexAcquire(unlock_mutex_handle, osWaitForever);  // 等待解锁互斥量释放
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_Z16StartDefaultTaskPv+0x78>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 31ff 	mov.w	r1, #4294967295
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00e f85d 	bl	800f7b6 <osMutexAcquire>
  printf("Unlocked!\r\n");
 80016fc:	4812      	ldr	r0, [pc, #72]	@ (8001748 <_Z16StartDefaultTaskPv+0x7c>)
 80016fe:	f012 f88d 	bl	801381c <puts>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;) {
	if (osMutexAcquire(chassis_mutex_handle, 1) == osOK) {
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <_Z16StartDefaultTaskPv+0x80>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f00e f854 	bl	800f7b6 <osMutexAcquire>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00c      	beq.n	8001738 <_Z16StartDefaultTaskPv+0x6c>
	  Teleop::attitudeControlOuter(0.02f);
 800171e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001750 <_Z16StartDefaultTaskPv+0x84>
 8001722:	f7ff fc09 	bl	8000f38 <_ZN6Teleop20attitudeControlOuterEf>
	  Teleop::attitudeControlInter(0.02f);
 8001726:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001750 <_Z16StartDefaultTaskPv+0x84>
 800172a:	f7ff fc85 	bl	8001038 <_ZN6Teleop20attitudeControlInterEf>

	  osMutexRelease(chassis_mutex_handle);
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <_Z16StartDefaultTaskPv+0x80>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f00e f88a 	bl	800f84c <osMutexRelease>
	}
    osDelay(20);
 8001738:	2014      	movs	r0, #20
 800173a:	f00d fe9d 	bl	800f478 <osDelay>
	if (osMutexAcquire(chassis_mutex_handle, 1) == osOK) {
 800173e:	e7e0      	b.n	8001702 <_Z16StartDefaultTaskPv+0x36>
 8001740:	200007dc 	.word	0x200007dc
 8001744:	200007d4 	.word	0x200007d4
 8001748:	08013f6c 	.word	0x08013f6c
 800174c:	200007c8 	.word	0x200007c8
 8001750:	3ca3d70a 	.word	0x3ca3d70a

08001754 <_Z10SensorTaskPv>:
/**
* @brief 传感器任务：获取IMU数据，获取遥控器数据(10ms)
* @param argument: Not used
* @retval None
*/
void SensorTask(void *argument) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_Task */
  /* Infinite loop */
  for(;;) {
    if (osMutexAcquire(chassis_mutex_handle, 1) == osOK) {
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <_Z10SensorTaskPv+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	4618      	mov	r0, r3
 8001764:	f00e f827 	bl	800f7b6 <osMutexAcquire>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <_Z10SensorTaskPv+0x32>
      getImuDataServer();
 8001778:	f7ff ff0e 	bl	8001598 <_Z16getImuDataServerv>
      osMutexRelease(chassis_mutex_handle);
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <_Z10SensorTaskPv+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f00e f863 	bl	800f84c <osMutexRelease>
    }
    getRCData();
 8001786:	f7fe ff0d 	bl	80005a4 <_Z9getRCDatav>
    osDelay(10);
 800178a:	200a      	movs	r0, #10
 800178c:	f00d fe74 	bl	800f478 <osDelay>
    if (osMutexAcquire(chassis_mutex_handle, 1) == osOK) {
 8001790:	e7e4      	b.n	800175c <_Z10SensorTaskPv+0x8>
 8001792:	bf00      	nop
 8001794:	200007c8 	.word	0x200007c8

08001798 <_Z11TriflesTaskPv>:
  }
  /* USER CODE END Sensor_Task */
}

void TriflesTask(void *argument) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for (;;) {
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <_Z11TriflesTaskPv+0x8>

080017a4 <_Z17UserTasksCallbackPv>:
/**
 * @brief UserTask 定时器回调
 *
 * @param argument
 */
void UserTasksCallback(void *argument) {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN User_TasksCallback */
  // Vertical_Move(40, 1500);
  // User_Tasks();
  // Echo_init();
  /* USER CODE END User_TasksCallback */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_Z11LedCallbackPv>:
 * @brief 交互灯光定时器回调
 *
 * @param argument
 */
void LedCallback(void *argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedCallback */
  ws2812_Server();
 80017c0:	f7ff f800 	bl	80007c4 <ws2812_Server>
  /* USER CODE END LedCallback */
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <MX_GPIO_Init+0xa4>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <MX_GPIO_Init+0xa4>)
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <MX_GPIO_Init+0xa4>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <MX_GPIO_Init+0xa4>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_GPIO_Init+0xa4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_GPIO_Init+0xa4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS2_GPIO_Port, SPI1_CS2_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2110      	movs	r1, #16
 8001846:	480b      	ldr	r0, [pc, #44]	@ (8001874 <MX_GPIO_Init+0xa8>)
 8001848:	f001 fe5c 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS2_Pin;
 800184c:	2310      	movs	r3, #16
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS2_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4804      	ldr	r0, [pc, #16]	@ (8001874 <MX_GPIO_Init+0xa8>)
 8001864:	f001 fbfa 	bl	800305c <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	48000800 	.word	0x48000800

08001878 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_I2C1_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <MX_I2C1_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <MX_I2C1_Init+0x7c>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001890:	2201      	movs	r2, #1
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_I2C1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018b4:	f001 fe52 	bl	800355c <HAL_I2C_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018be:	f000 f8f1 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4809      	ldr	r0, [pc, #36]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018c6:	f001 ff6f 	bl	80037a8 <HAL_I2CEx_ConfigAnalogFilter>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 f8e8 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_I2C1_Init+0x74>)
 80018d8:	f001 ffd6 	bl	8003888 <HAL_I2CEx_ConfigDigitalFilter>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 f8df 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200007f8 	.word	0x200007f8
 80018f0:	40005400 	.word	0x40005400
 80018f4:	20b0d9ff 	.word	0x20b0d9ff

080018f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09a      	sub	sp, #104	@ 0x68
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2244      	movs	r2, #68	@ 0x44
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f012 f85f 	bl	80139dc <memset>
  if(i2cHandle->Instance==I2C1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1f      	ldr	r2, [pc, #124]	@ (80019a0 <HAL_I2C_MspInit+0xa8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d136      	bne.n	8001996 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001928:	2340      	movs	r3, #64	@ 0x40
 800192a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fd45 	bl	80063c4 <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001940:	f000 f8b0 	bl	8001aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800195c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001960:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001962:	2312      	movs	r3, #18
 8001964:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196e:	2304      	movs	r3, #4
 8001970:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001976:	4619      	mov	r1, r3
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <HAL_I2C_MspInit+0xb0>)
 800197a:	f001 fb6f 	bl	800305c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001988:	6593      	str	r3, [r2, #88]	@ 0x58
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_I2C_MspInit+0xac>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3768      	adds	r7, #104	@ 0x68
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000400 	.word	0x48000400

080019ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b0:	f000 ff64 	bl	800287c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b4:	f000 f81a 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b8:	f7ff ff08 	bl	80017cc <MX_GPIO_Init>
  MX_CRC_Init();
 80019bc:	f7ff fdaa 	bl	8001514 <MX_CRC_Init>
  MX_SPI1_Init();
 80019c0:	f000 f882 	bl	8001ac8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80019c4:	f000 f8be 	bl	8001b44 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80019c8:	f000 fd1c 	bl	8002404 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019cc:	f000 fd66 	bl	800249c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80019d0:	f000 fb34 	bl	800203c <MX_TIM2_Init>
  MX_TIM8_Init();
 80019d4:	f000 fbca 	bl	800216c <MX_TIM8_Init>
  MX_I2C1_Init();
 80019d8:	f7ff ff4e 	bl	8001878 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019dc:	f00d fc70 	bl	800f2c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019e0:	f7ff fde2 	bl	80015a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019e4:	f00d fc90 	bl	800f308 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <main+0x3c>

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	@ 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	2238      	movs	r2, #56	@ 0x38
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f011 ffee 	bl	80139dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a12:	f003 fce7 	bl	80053e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a20:	2302      	movs	r3, #2
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a24:	2303      	movs	r3, #3
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001a2c:	236c      	movs	r3, #108	@ 0x6c
 8001a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8001a34:	2306      	movs	r3, #6
 8001a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fd93 	bl	800556c <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a4c:	f000 f82a 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2303      	movs	r3, #3
 8001a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2104      	movs	r1, #4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f004 f98b 	bl	8005d84 <HAL_RCC_ClockConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a74:	f000 f816 	bl	8001aa4 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3750      	adds	r7, #80	@ 0x50
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a92:	f000 ff0b 	bl	80028ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40001000 	.word	0x40001000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001ace:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <MX_SPI1_Init+0x78>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001ae2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ae6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001af6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b16:	2207      	movs	r2, #7
 8001b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b22:	2208      	movs	r2, #8
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_SPI1_Init+0x74>)
 8001b28:	f004 ffec 	bl	8006b04 <HAL_SPI_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b32:	f7ff ffb7 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000084c 	.word	0x2000084c
 8001b40:	40013000 	.word	0x40013000

08001b44 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <MX_SPI3_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b5e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b92:	2207      	movs	r2, #7
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_SPI3_Init+0x74>)
 8001ba4:	f004 ffae 	bl	8006b04 <HAL_SPI_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001bae:	f7ff ff79 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200008b0 	.word	0x200008b0
 8001bbc:	40003c00 	.word	0x40003c00

08001bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	@ 0x38
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a54      	ldr	r2, [pc, #336]	@ (8001d30 <HAL_SPI_MspInit+0x170>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d13a      	bne.n	8001c58 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be2:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be6:	4a53      	ldr	r2, [pc, #332]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bee:	4b51      	ldr	r3, [pc, #324]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c12:	2310      	movs	r3, #16
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c22:	2305      	movs	r3, #5
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c30:	f001 fa14 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c34:	23e0      	movs	r3, #224	@ 0xe0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c44:	2305      	movs	r3, #5
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c52:	f001 fa03 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c56:	e067      	b.n	8001d28 <HAL_SPI_MspInit+0x168>
  else if(spiHandle->Instance==SPI3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a36      	ldr	r2, [pc, #216]	@ (8001d38 <HAL_SPI_MspInit+0x178>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d162      	bne.n	8001d28 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a33      	ldr	r2, [pc, #204]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c86:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	4a27      	ldr	r2, [pc, #156]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_SPI_MspInit+0x174>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce2:	f001 f9bb 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ce6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cf8:	2306      	movs	r3, #6
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <HAL_SPI_MspInit+0x17c>)
 8001d04:	f001 f9aa 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <HAL_SPI_MspInit+0x180>)
 8001d24:	f001 f99a 	bl	800305c <HAL_GPIO_Init>
}
 8001d28:	bf00      	nop
 8001d2a:	3738      	adds	r7, #56	@ 0x38
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013000 	.word	0x40013000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40003c00 	.word	0x40003c00
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000400 	.word	0x48000400

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <HAL_MspInit+0x50>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	f06f 0001 	mvn.w	r0, #1
 8001d82:	f000 fea1 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d86:	f003 fbe1 	bl	800554c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	@ 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001da8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_InitTick+0xc4>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	4a2b      	ldr	r2, [pc, #172]	@ (8001e5c <HAL_InitTick+0xc4>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db4:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <HAL_InitTick+0xc4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 fa72 	bl	80062b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dd0:	f004 fa44 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 8001dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	4a21      	ldr	r2, [pc, #132]	@ (8001e60 <HAL_InitTick+0xc8>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	3b01      	subs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001de6:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_InitTick+0xd0>)
 8001de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001e04:	4817      	ldr	r0, [pc, #92]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001e06:	f005 f873 	bl	8006ef0 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11b      	bne.n	8001e50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e18:	4812      	ldr	r0, [pc, #72]	@ (8001e64 <HAL_InitTick+0xcc>)
 8001e1a:	f005 f967 	bl	80070ec <HAL_TIM_Base_Start_IT>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e2c:	2036      	movs	r0, #54	@ 0x36
 8001e2e:	f000 fe75 	bl	8002b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d808      	bhi.n	8001e4a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	2036      	movs	r0, #54	@ 0x36
 8001e3e:	f000 fe43 	bl	8002ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <HAL_InitTick+0xd4>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e002      	b.n	8001e50 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3730      	adds	r7, #48	@ 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	20000914 	.word	0x20000914
 8001e68:	40001000 	.word	0x40001000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <USB_LP_IRQHandler+0x10>)
 8001eae:	f001 fe55 	bl	8003b5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200031fc 	.word	0x200031fc

08001ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <TIM6_DAC_IRQHandler+0x10>)
 8001ec2:	f005 feeb 	bl	8007c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000914 	.word	0x20000914

08001ed0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fb9d 	bl	8002664 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f011 fdb2 	bl	8013b44 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20008000 	.word	0x20008000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000960 	.word	0x20000960
 8002014:	20003840 	.word	0x20003840

08002018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	@ 0x38
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800206e:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002070:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002074:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002076:	4b3c      	ldr	r3, [pc, #240]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <MX_TIM2_Init+0x12c>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002082:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <MX_TIM2_Init+0x12c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002096:	4834      	ldr	r0, [pc, #208]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002098:	f004 ff2a 	bl	8006ef0 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020a2:	f7ff fcff 	bl	8001aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020b0:	4619      	mov	r1, r3
 80020b2:	482d      	ldr	r0, [pc, #180]	@ (8002168 <MX_TIM2_Init+0x12c>)
 80020b4:	f006 f978 	bl	80083a8 <HAL_TIM_ConfigClockSource>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020be:	f7ff fcf1 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020c2:	4829      	ldr	r0, [pc, #164]	@ (8002168 <MX_TIM2_Init+0x12c>)
 80020c4:	f005 f8ba 	bl	800723c <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020ce:	f7ff fce9 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4821      	ldr	r0, [pc, #132]	@ (8002168 <MX_TIM2_Init+0x12c>)
 80020e2:	f007 fcb5 	bl	8009a50 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020ec:	f7ff fcda 	bl	8001aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f0:	2360      	movs	r3, #96	@ 0x60
 80020f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	4818      	ldr	r0, [pc, #96]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002108:	f005 ff18 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002112:	f7ff fcc7 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2204      	movs	r2, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4812      	ldr	r0, [pc, #72]	@ (8002168 <MX_TIM2_Init+0x12c>)
 800211e:	f005 ff0d 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002128:	f7ff fcbc 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	2208      	movs	r2, #8
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_TIM2_Init+0x12c>)
 8002134:	f005 ff02 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800213e:	f7ff fcb1 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	220c      	movs	r2, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	@ (8002168 <MX_TIM2_Init+0x12c>)
 800214a:	f005 fef7 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002154:	f7ff fca6 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002158:	4803      	ldr	r0, [pc, #12]	@ (8002168 <MX_TIM2_Init+0x12c>)
 800215a:	f000 f8d9 	bl	8002310 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000964 	.word	0x20000964

0800216c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b098      	sub	sp, #96	@ 0x60
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2234      	movs	r2, #52	@ 0x34
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f011 fc1f 	bl	80139dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <MX_TIM8_Init+0x120>)
 80021a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002290 <MX_TIM8_Init+0x124>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021a4:	4b39      	ldr	r3, [pc, #228]	@ (800228c <MX_TIM8_Init+0x120>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <MX_TIM8_Init+0x120>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021b0:	4b36      	ldr	r3, [pc, #216]	@ (800228c <MX_TIM8_Init+0x120>)
 80021b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <MX_TIM8_Init+0x120>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021be:	4b33      	ldr	r3, [pc, #204]	@ (800228c <MX_TIM8_Init+0x120>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b31      	ldr	r3, [pc, #196]	@ (800228c <MX_TIM8_Init+0x120>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021ca:	4830      	ldr	r0, [pc, #192]	@ (800228c <MX_TIM8_Init+0x120>)
 80021cc:	f005 f836 	bl	800723c <HAL_TIM_PWM_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f7ff fc65 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ea:	4619      	mov	r1, r3
 80021ec:	4827      	ldr	r0, [pc, #156]	@ (800228c <MX_TIM8_Init+0x120>)
 80021ee:	f007 fc2f 	bl	8009a50 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80021f8:	f7ff fc54 	bl	8001aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fc:	2360      	movs	r3, #96	@ 0x60
 80021fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002208:	2300      	movs	r3, #0
 800220a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	481a      	ldr	r0, [pc, #104]	@ (800228c <MX_TIM8_Init+0x120>)
 8002222:	f005 fe8b 	bl	8007f3c <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800222c:	f7ff fc3a 	bl	8001aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002244:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002248:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	@ (800228c <MX_TIM8_Init+0x120>)
 800226e:	f007 fd3f 	bl	8009cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002278:	f7ff fc14 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <MX_TIM8_Init+0x120>)
 800227e:	f000 f847 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3760      	adds	r7, #96	@ 0x60
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200009b0 	.word	0x200009b0
 8002290:	40013400 	.word	0x40013400

08002294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d10b      	bne.n	80022be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_TIM_Base_MspInit+0x38>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_TIM_Base_MspInit+0x38>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_TIM_Base_MspInit+0x38>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_TIM_PWM_MspInit+0x38>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10b      	bne.n	80022fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	4a09      	ldr	r2, [pc, #36]	@ (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ee:	4b07      	ldr	r3, [pc, #28]	@ (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40013400 	.word	0x40013400
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002330:	d13a      	bne.n	80023a8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a2f      	ldr	r2, [pc, #188]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b2d      	ldr	r3, [pc, #180]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b2a      	ldr	r3, [pc, #168]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a29      	ldr	r2, [pc, #164]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002362:	2303      	movs	r3, #3
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002372:	2301      	movs	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002380:	f000 fe6c 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002384:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4815      	ldr	r0, [pc, #84]	@ (80023f8 <HAL_TIM_MspPostInit+0xe8>)
 80023a2:	f000 fe5b 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023a6:	e020      	b.n	80023ea <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM8)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	@ (80023fc <HAL_TIM_MspPostInit+0xec>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d11b      	bne.n	80023ea <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	4a0f      	ldr	r2, [pc, #60]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_TIM_MspPostInit+0xe4>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ca:	2340      	movs	r3, #64	@ 0x40
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80023da:	2304      	movs	r3, #4
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4806      	ldr	r0, [pc, #24]	@ (8002400 <HAL_TIM_MspPostInit+0xf0>)
 80023e6:	f000 fe39 	bl	800305c <HAL_GPIO_Init>
}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	@ 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000400 	.word	0x48000400
 80023fc:	40013400 	.word	0x40013400
 8002400:	48000800 	.word	0x48000800

08002404 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002408:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 800240a:	4a23      	ldr	r2, [pc, #140]	@ (8002498 <MX_USART1_UART_Init+0x94>)
 800240c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800240e:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002440:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800244c:	4811      	ldr	r0, [pc, #68]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 800244e:	f007 fdfd 	bl	800a04c <HAL_UART_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002458:	f7ff fb24 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800245c:	2100      	movs	r1, #0
 800245e:	480d      	ldr	r0, [pc, #52]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002460:	f008 fe06 	bl	800b070 <HAL_UARTEx_SetTxFifoThreshold>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800246a:	f7ff fb1b 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4808      	ldr	r0, [pc, #32]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002472:	f008 fe81 	bl	800b178 <HAL_UARTEx_SetRxFifoThreshold>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800247c:	f7ff fb12 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002480:	4804      	ldr	r0, [pc, #16]	@ (8002494 <MX_USART1_UART_Init+0x90>)
 8002482:	f008 fd93 	bl	800afac <HAL_UARTEx_DisableFifoMode>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800248c:	f7ff fb0a 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200009fc 	.word	0x200009fc
 8002498:	40013800 	.word	0x40013800

0800249c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a0:	4b22      	ldr	r3, [pc, #136]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024a2:	4a23      	ldr	r2, [pc, #140]	@ (8002530 <MX_USART2_UART_Init+0x94>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a6:	4b21      	ldr	r3, [pc, #132]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e4:	4811      	ldr	r0, [pc, #68]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024e6:	f007 fdb1 	bl	800a04c <HAL_UART_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024f0:	f7ff fad8 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f4:	2100      	movs	r1, #0
 80024f6:	480d      	ldr	r0, [pc, #52]	@ (800252c <MX_USART2_UART_Init+0x90>)
 80024f8:	f008 fdba 	bl	800b070 <HAL_UARTEx_SetTxFifoThreshold>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002502:	f7ff facf 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002506:	2100      	movs	r1, #0
 8002508:	4808      	ldr	r0, [pc, #32]	@ (800252c <MX_USART2_UART_Init+0x90>)
 800250a:	f008 fe35 	bl	800b178 <HAL_UARTEx_SetRxFifoThreshold>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002514:	f7ff fac6 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002518:	4804      	ldr	r0, [pc, #16]	@ (800252c <MX_USART2_UART_Init+0x90>)
 800251a:	f008 fd47 	bl	800afac <HAL_UARTEx_DisableFifoMode>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002524:	f7ff fabe 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000a90 	.word	0x20000a90
 8002530:	40004400 	.word	0x40004400

08002534 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09c      	sub	sp, #112	@ 0x70
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	2244      	movs	r2, #68	@ 0x44
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f011 fa41 	bl	80139dc <memset>
  if(uartHandle->Instance==USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3e      	ldr	r2, [pc, #248]	@ (8002658 <HAL_UART_MspInit+0x124>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d138      	bne.n	80025d6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	4618      	mov	r0, r3
 8002572:	f003 ff27 	bl	80063c4 <HAL_RCCEx_PeriphCLKConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800257c:	f7ff fa92 	bl	8001aa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <HAL_UART_MspInit+0x128>)
 8002582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002584:	4a35      	ldr	r2, [pc, #212]	@ (800265c <HAL_UART_MspInit+0x128>)
 8002586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258a:	6613      	str	r3, [r2, #96]	@ 0x60
 800258c:	4b33      	ldr	r3, [pc, #204]	@ (800265c <HAL_UART_MspInit+0x128>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	4b30      	ldr	r3, [pc, #192]	@ (800265c <HAL_UART_MspInit+0x128>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259c:	4a2f      	ldr	r2, [pc, #188]	@ (800265c <HAL_UART_MspInit+0x128>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_UART_MspInit+0x128>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c2:	2307      	movs	r3, #7
 80025c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025ca:	4619      	mov	r1, r3
 80025cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d0:	f000 fd44 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025d4:	e03b      	b.n	800264e <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	@ (8002660 <HAL_UART_MspInit+0x12c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d136      	bne.n	800264e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 fee9 	bl	80063c4 <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80025f8:	f7ff fa54 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <HAL_UART_MspInit+0x128>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a16      	ldr	r2, [pc, #88]	@ (800265c <HAL_UART_MspInit+0x128>)
 8002602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_UART_MspInit+0x128>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_UART_MspInit+0x128>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002618:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_UART_MspInit+0x128>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002620:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_UART_MspInit+0x128>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800262c:	230c      	movs	r3, #12
 800262e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263c:	2307      	movs	r3, #7
 800263e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264a:	f000 fd07 	bl	800305c <HAL_GPIO_Init>
}
 800264e:	bf00      	nop
 8002650:	3770      	adds	r7, #112	@ 0x70
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40013800 	.word	0x40013800
 800265c:	40021000 	.word	0x40021000
 8002660:	40004400 	.word	0x40004400

08002664 <__io_putchar>:
	#define PUTCHAR_PROTOTYOE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYOE
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800266c:	1d39      	adds	r1, r7, #4
 800266e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002672:	2201      	movs	r2, #1
 8002674:	4803      	ldr	r0, [pc, #12]	@ (8002684 <__io_putchar+0x20>)
 8002676:	f007 fd87 	bl	800a188 <HAL_UART_Transmit>
	return ch;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000a90 	.word	0x20000a90

08002688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002688:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800268c:	f7ff fcc4 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002690:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002692:	490d      	ldr	r1, [pc, #52]	@ (80026c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <LoopForever+0xe>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026a8:	4c0a      	ldr	r4, [pc, #40]	@ (80026d4 <LoopForever+0x16>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f011 fa4b 	bl	8013b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ba:	f7ff f977 	bl	80019ac <main>

080026be <LoopForever>:

LoopForever:
    b LoopForever
 80026be:	e7fe      	b.n	80026be <LoopForever>
  ldr   r0, =_estack
 80026c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80026cc:	080144d0 	.word	0x080144d0
  ldr r2, =_sbss
 80026d0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80026d4:	20003840 	.word	0x20003840

080026d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC1_2_IRQHandler>

080026da <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
 80026ec:	f7ff f9da 	bl	8001aa4 <Error_Handler>
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e007      	b.n	800270a <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	2100      	movs	r1, #0
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d9f4      	bls.n	80026fa <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	721a      	strb	r2, [r3, #8]
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
 8002730:	f7ff f9b8 	bl	8001aa4 <Error_Handler>
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7a1b      	ldrb	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d905      	bls.n	800274c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
 8002744:	f7ff f9ae 	bl	8001aa4 <Error_Handler>
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7a1b      	ldrb	r3, [r3, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	b2d1      	uxtb	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	7211      	strb	r1, [r2, #8]
 8002758:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800275a:	f3ef 8211 	mrs	r2, BASEPRI
 800275e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
 8002794:	f7ff f986 	bl	8001aa4 <Error_Handler>
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7a1b      	ldrb	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d905      	bls.n	80027bc <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
 80027b4:	f7ff f976 	bl	8001aa4 <Error_Handler>
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7a1b      	ldrb	r3, [r3, #8]
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027d0:	bf00      	nop
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80027e8:	f011 f9ac 	bl	8013b44 <__errno>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2216      	movs	r2, #22
 80027f0:	601a      	str	r2, [r3, #0]
    return;
 80027f2:	e016      	b.n	8002822 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80027f4:	200c      	movs	r0, #12
 80027f6:	f010 fe43 	bl	8013480 <malloc>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff63 	bl	80026da <stm32_lock_init>
    return;
 8002814:	e005      	b.n	8002822 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002816:	b672      	cpsid	i
}
 8002818:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800281a:	f7ff f943 	bl	8001aa4 <Error_Handler>
 800281e:	bf00      	nop
 8002820:	e7fd      	b.n	800281e <__retarget_lock_init_recursive+0x44>
}
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002836:	b672      	cpsid	i
}
 8002838:	bf00      	nop
 800283a:	f7ff f933 	bl	8001aa4 <Error_Handler>
 800283e:	bf00      	nop
 8002840:	e7fd      	b.n	800283e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff6a 	bl	800271e <stm32_lock_acquire>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	bf00      	nop
 8002864:	f7ff f91e 	bl	8001aa4 <Error_Handler>
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff87 	bl	8002782 <stm32_lock_release>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002886:	2003      	movs	r0, #3
 8002888:	f000 f8fe 	bl	8002a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800288c:	200f      	movs	r0, #15
 800288e:	f7ff fa83 	bl	8001d98 <HAL_InitTick>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	e001      	b.n	80028a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800289e:	f7ff fa51 	bl	8001d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028a2:	79fb      	ldrb	r3, [r7, #7]

}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_IncTick+0x20>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000b3c 	.word	0x20000b3c
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000b3c 	.word	0x20000b3c

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d004      	beq.n	800290c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_Delay+0x40>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290c:	bf00      	nop
 800290e:	f7ff ffdf 	bl	80028d0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	429a      	cmp	r2, r3
 800291c:	d8f7      	bhi.n	800290e <HAL_Delay+0x26>
  {
  }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000008 	.word	0x20000008

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	d00f      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d009      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d006      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d003      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aae:	21a6      	movs	r1, #166	@ 0xa6
 8002ab0:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ab2:	f7fe fffd 	bl	8001ab0 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff38 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	08013f78 	.word	0x08013f78

08002ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d903      	bls.n	8002ae4 <HAL_NVIC_SetPriority+0x1c>
 8002adc:	21be      	movs	r1, #190	@ 0xbe
 8002ade:	480e      	ldr	r0, [pc, #56]	@ (8002b18 <HAL_NVIC_SetPriority+0x50>)
 8002ae0:	f7fe ffe6 	bl	8001ab0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d903      	bls.n	8002af2 <HAL_NVIC_SetPriority+0x2a>
 8002aea:	21bf      	movs	r1, #191	@ 0xbf
 8002aec:	480a      	ldr	r0, [pc, #40]	@ (8002b18 <HAL_NVIC_SetPriority+0x50>)
 8002aee:	f7fe ffdf 	bl	8001ab0 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af2:	f7ff ff3f 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f7ff ff8f 	bl	8002a20 <NVIC_EncodePriority>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff5e 	bl	80029cc <__NVIC_SetPriority>
}
 8002b10:	bf00      	nop
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	08013f78 	.word	0x08013f78

08002b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	da03      	bge.n	8002b36 <HAL_NVIC_EnableIRQ+0x1a>
 8002b2e:	21d2      	movs	r1, #210	@ 0xd2
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <HAL_NVIC_EnableIRQ+0x2c>)
 8002b32:	f7fe ffbd 	bl	8001ab0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff28 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08013f78 	.word	0x08013f78

08002b4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0a5      	b.n	8002caa <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a54      	ldr	r2, [pc, #336]	@ (8002cb4 <HAL_CRC_Init+0x168>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <HAL_CRC_Init+0x24>
 8002b68:	2170      	movs	r1, #112	@ 0x70
 8002b6a:	4853      	ldr	r0, [pc, #332]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002b6c:	f7fe ffa0 	bl	8001ab0 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7f5b      	ldrb	r3, [r3, #29]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7fe fce9 	bl	8001558 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	791b      	ldrb	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_CRC_Init+0x58>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	791b      	ldrb	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d003      	beq.n	8002ba4 <HAL_CRC_Init+0x58>
 8002b9c:	217e      	movs	r1, #126	@ 0x7e
 8002b9e:	4846      	ldr	r0, [pc, #280]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002ba0:	f7fe ff86 	bl	8001ab0 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	791b      	ldrb	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a42      	ldr	r2, [pc, #264]	@ (8002cbc <HAL_CRC_Init+0x170>)
 8002bb2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0218 	bic.w	r2, r2, #24
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	e00c      	b.n	8002be0 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f875 	bl	8002cc0 <HAL_CRCEx_Polynomial_Set>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e064      	b.n	8002caa <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	795b      	ldrb	r3, [r3, #5]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_CRC_Init+0xac>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	795b      	ldrb	r3, [r3, #5]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d003      	beq.n	8002bf8 <HAL_CRC_Init+0xac>
 8002bf0:	2190      	movs	r1, #144	@ 0x90
 8002bf2:	4831      	ldr	r0, [pc, #196]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002bf4:	f7fe ff5c 	bl	8001ab0 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	795b      	ldrb	r3, [r3, #5]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e004      	b.n	8002c16 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6912      	ldr	r2, [r2, #16]
 8002c14:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00f      	beq.n	8002c3e <HAL_CRC_Init+0xf2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d00b      	beq.n	8002c3e <HAL_CRC_Init+0xf2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b40      	cmp	r3, #64	@ 0x40
 8002c2c:	d007      	beq.n	8002c3e <HAL_CRC_Init+0xf2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b60      	cmp	r3, #96	@ 0x60
 8002c34:	d003      	beq.n	8002c3e <HAL_CRC_Init+0xf2>
 8002c36:	219c      	movs	r1, #156	@ 0x9c
 8002c38:	481f      	ldr	r0, [pc, #124]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002c3a:	f7fe ff39 	bl	8001ab0 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_CRC_Init+0x120>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b80      	cmp	r3, #128	@ 0x80
 8002c62:	d003      	beq.n	8002c6c <HAL_CRC_Init+0x120>
 8002c64:	21a0      	movs	r1, #160	@ 0xa0
 8002c66:	4814      	ldr	r0, [pc, #80]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002c68:	f7fe ff22 	bl	8001ab0 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d00b      	beq.n	8002ca2 <HAL_CRC_Init+0x156>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d007      	beq.n	8002ca2 <HAL_CRC_Init+0x156>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d003      	beq.n	8002ca2 <HAL_CRC_Init+0x156>
 8002c9a:	21a5      	movs	r1, #165	@ 0xa5
 8002c9c:	4806      	ldr	r0, [pc, #24]	@ (8002cb8 <HAL_CRC_Init+0x16c>)
 8002c9e:	f7fe ff07 	bl	8001ab0 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023000 	.word	0x40023000
 8002cb8:	08013fb4 	.word	0x08013fb4
 8002cbc:	04c11db7 	.word	0x04c11db7

08002cc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cd0:	231f      	movs	r3, #31
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d009      	beq.n	8002cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d006      	beq.n	8002cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b18      	cmp	r3, #24
 8002cea:	d003      	beq.n	8002cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002cec:	215f      	movs	r1, #95	@ 0x5f
 8002cee:	4842      	ldr	r0, [pc, #264]	@ (8002df8 <HAL_CRCEx_Polynomial_Set+0x138>)
 8002cf0:	f7fe fede 	bl	8001ab0 <assert_failed>

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_CRCEx_Polynomial_Set+0x44>
  {
    status =  HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
 8002d02:	e063      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0x10c>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d04:	bf00      	nop
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	613a      	str	r2, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_CRCEx_Polynomial_Set+0x64>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_CRCEx_Polynomial_Set+0x46>
    {
    }

    switch (PolyLength)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	d846      	bhi.n	8002db8 <HAL_CRCEx_Polynomial_Set+0xf8>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <HAL_CRCEx_Polynomial_Set+0x70>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002dbf 	.word	0x08002dbf
 8002d34:	08002db9 	.word	0x08002db9
 8002d38:	08002db9 	.word	0x08002db9
 8002d3c:	08002db9 	.word	0x08002db9
 8002d40:	08002db9 	.word	0x08002db9
 8002d44:	08002db9 	.word	0x08002db9
 8002d48:	08002db9 	.word	0x08002db9
 8002d4c:	08002db9 	.word	0x08002db9
 8002d50:	08002dad 	.word	0x08002dad
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002db9 	.word	0x08002db9
 8002d5c:	08002db9 	.word	0x08002db9
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002db9 	.word	0x08002db9
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002db9 	.word	0x08002db9
 8002d70:	08002da1 	.word	0x08002da1
 8002d74:	08002db9 	.word	0x08002db9
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002db9 	.word	0x08002db9
 8002d80:	08002db9 	.word	0x08002db9
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002db9 	.word	0x08002db9
 8002d90:	08002d95 	.word	0x08002d95
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d913      	bls.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0x102>
        {
          status =   HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d9e:	e010      	b.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0x102>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d90f      	bls.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0x106>
        {
          status =   HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002daa:	e00c      	b.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0x106>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d90b      	bls.n	8002dca <HAL_CRCEx_Polynomial_Set+0x10a>
        {
          status =   HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002db6:	e008      	b.n	8002dca <HAL_CRCEx_Polynomial_Set+0x10a>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
        break;
 8002dbc:	e006      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e004      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0x10c>
        break;
 8002dca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_CRCEx_Polynomial_Set+0x12e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 0118 	bic.w	r1, r3, #24
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	08013fec 	.word	0x08013fec

08002dfc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_Start_IT+0x20>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e1a:	d304      	bcc.n	8002e26 <HAL_DMA_Start_IT+0x2a>
 8002e1c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002e20:	483a      	ldr	r0, [pc, #232]	@ (8002f0c <HAL_DMA_Start_IT+0x110>)
 8002e22:	f7fe fe45 	bl	8001ab0 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Start_IT+0x38>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e066      	b.n	8002f02 <HAL_DMA_Start_IT+0x106>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d155      	bne.n	8002ef4 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8b6 	bl	8002fde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 020e 	orr.w	r2, r2, #14
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e00f      	b.n	8002eac <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 020a 	orr.w	r2, r2, #10
 8002eaa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e005      	b.n	8002f00 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	08014028 	.word	0x08014028

08002f10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d00d      	beq.n	8002f44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	e047      	b.n	8002fd4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 020e 	bic.w	r2, r2, #14
 8002f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
    }
  }
  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f202 	lsl.w	r2, r1, r2
 800301a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d108      	bne.n	800303e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800303c:	e007      	b.n	800304e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003070:	d01b      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a37      	ldr	r2, [pc, #220]	@ (8003154 <HAL_GPIO_Init+0xf8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d017      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a36      	ldr	r2, [pc, #216]	@ (8003158 <HAL_GPIO_Init+0xfc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a35      	ldr	r2, [pc, #212]	@ (800315c <HAL_GPIO_Init+0x100>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a34      	ldr	r2, [pc, #208]	@ (8003160 <HAL_GPIO_Init+0x104>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a33      	ldr	r2, [pc, #204]	@ (8003164 <HAL_GPIO_Init+0x108>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a32      	ldr	r2, [pc, #200]	@ (8003168 <HAL_GPIO_Init+0x10c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x4e>
 80030a2:	21a9      	movs	r1, #169	@ 0xa9
 80030a4:	4831      	ldr	r0, [pc, #196]	@ (800316c <HAL_GPIO_Init+0x110>)
 80030a6:	f7fe fd03 	bl	8001ab0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_GPIO_Init+0x62>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030bc:	d303      	bcc.n	80030c6 <HAL_GPIO_Init+0x6a>
 80030be:	21aa      	movs	r1, #170	@ 0xaa
 80030c0:	482a      	ldr	r0, [pc, #168]	@ (800316c <HAL_GPIO_Init+0x110>)
 80030c2:	f7fe fcf5 	bl	8001ab0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 8209 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f000 8204 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b11      	cmp	r3, #17
 80030e0:	f000 81ff 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f000 81fa 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	f000 81f5 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003100:	f000 81ef 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800310c:	f000 81e9 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003118:	f000 81e3 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003124:	f000 81dd 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003130:	f000 81d7 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800313c:	f000 81d1 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	f000 81cc 	beq.w	80034e2 <HAL_GPIO_Init+0x486>
 800314a:	21ab      	movs	r1, #171	@ 0xab
 800314c:	4807      	ldr	r0, [pc, #28]	@ (800316c <HAL_GPIO_Init+0x110>)
 800314e:	f7fe fcaf 	bl	8001ab0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003152:	e1c6      	b.n	80034e2 <HAL_GPIO_Init+0x486>
 8003154:	48000400 	.word	0x48000400
 8003158:	48000800 	.word	0x48000800
 800315c:	48000c00 	.word	0x48000c00
 8003160:	48001000 	.word	0x48001000
 8003164:	48001400 	.word	0x48001400
 8003168:	48001800 	.word	0x48001800
 800316c:	08014060 	.word	0x08014060
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 81aa 	beq.w	80034dc <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d005      	beq.n	80031a0 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800319c:	2b02      	cmp	r3, #2
 800319e:	d144      	bne.n	800322a <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00f      	beq.n	80031c8 <HAL_GPIO_Init+0x16c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <HAL_GPIO_Init+0x16c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0x16c>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x16c>
 80031c0:	21bb      	movs	r1, #187	@ 0xbb
 80031c2:	488b      	ldr	r0, [pc, #556]	@ (80033f0 <HAL_GPIO_Init+0x394>)
 80031c4:	f7fe fc74 	bl	8001ab0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b03      	cmp	r3, #3
 8003234:	d027      	beq.n	8003286 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_GPIO_Init+0x1fa>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x1fa>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x1fa>
 800324e:	21cc      	movs	r1, #204	@ 0xcc
 8003250:	4867      	ldr	r0, [pc, #412]	@ (80033f0 <HAL_GPIO_Init+0x394>)
 8003252:	f7fe fc2d 	bl	8001ab0 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d14b      	bne.n	800332a <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003298:	d01b      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a55      	ldr	r2, [pc, #340]	@ (80033f4 <HAL_GPIO_Init+0x398>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d017      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a54      	ldr	r2, [pc, #336]	@ (80033f8 <HAL_GPIO_Init+0x39c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a53      	ldr	r2, [pc, #332]	@ (80033fc <HAL_GPIO_Init+0x3a0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a52      	ldr	r2, [pc, #328]	@ (8003400 <HAL_GPIO_Init+0x3a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a51      	ldr	r2, [pc, #324]	@ (8003404 <HAL_GPIO_Init+0x3a8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a50      	ldr	r2, [pc, #320]	@ (8003408 <HAL_GPIO_Init+0x3ac>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x276>
 80032ca:	21d9      	movs	r1, #217	@ 0xd9
 80032cc:	4848      	ldr	r0, [pc, #288]	@ (80033f0 <HAL_GPIO_Init+0x394>)
 80032ce:	f7fe fbef 	bl	8001ab0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	d903      	bls.n	80032e2 <HAL_GPIO_Init+0x286>
 80032da:	21da      	movs	r1, #218	@ 0xda
 80032dc:	4844      	ldr	r0, [pc, #272]	@ (80033f0 <HAL_GPIO_Init+0x394>)
 80032de:	f7fe fbe7 	bl	8001ab0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80b8 	beq.w	80034dc <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336c:	4b27      	ldr	r3, [pc, #156]	@ (800340c <HAL_GPIO_Init+0x3b0>)
 800336e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003370:	4a26      	ldr	r2, [pc, #152]	@ (800340c <HAL_GPIO_Init+0x3b0>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6613      	str	r3, [r2, #96]	@ 0x60
 8003378:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_GPIO_Init+0x3b0>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003384:	4a22      	ldr	r2, [pc, #136]	@ (8003410 <HAL_GPIO_Init+0x3b4>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033ae:	d031      	beq.n	8003414 <HAL_GPIO_Init+0x3b8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a10      	ldr	r2, [pc, #64]	@ (80033f4 <HAL_GPIO_Init+0x398>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d019      	beq.n	80033ec <HAL_GPIO_Init+0x390>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	@ (80033f8 <HAL_GPIO_Init+0x39c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_GPIO_Init+0x38c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	@ (80033fc <HAL_GPIO_Init+0x3a0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00d      	beq.n	80033e4 <HAL_GPIO_Init+0x388>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <HAL_GPIO_Init+0x3a4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0x384>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003404 <HAL_GPIO_Init+0x3a8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_GPIO_Init+0x380>
 80033d8:	2305      	movs	r3, #5
 80033da:	e01c      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033dc:	2306      	movs	r3, #6
 80033de:	e01a      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e018      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e016      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e014      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e012      	b.n	8003416 <HAL_GPIO_Init+0x3ba>
 80033f0:	08014060 	.word	0x08014060
 80033f4:	48000400 	.word	0x48000400
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	48001000 	.word	0x48001000
 8003404:	48001400 	.word	0x48001400
 8003408:	48001800 	.word	0x48001800
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000
 8003414:	2300      	movs	r3, #0
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	f002 0203 	and.w	r2, r2, #3
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	4093      	lsls	r3, r2
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003426:	4935      	ldr	r1, [pc, #212]	@ (80034fc <HAL_GPIO_Init+0x4a0>)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003434:	4b32      	ldr	r3, [pc, #200]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003458:	4a29      	ldr	r2, [pc, #164]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345e:	4b28      	ldr	r3, [pc, #160]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003482:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034b2:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <HAL_GPIO_Init+0x4a4>)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f ae3f 	bne.w	8003170 <HAL_GPIO_Init+0x114>
  }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_GPIO_WritePin+0x20>
 800351a:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800351e:	480e      	ldr	r0, [pc, #56]	@ (8003558 <HAL_GPIO_WritePin+0x54>)
 8003520:	f7fe fac6 	bl	8001ab0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_GPIO_WritePin+0x36>
 800352a:	787b      	ldrb	r3, [r7, #1]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d004      	beq.n	800353a <HAL_GPIO_WritePin+0x36>
 8003530:	f240 119b 	movw	r1, #411	@ 0x19b
 8003534:	4808      	ldr	r0, [pc, #32]	@ (8003558 <HAL_GPIO_WritePin+0x54>)
 8003536:	f7fe fabb 	bl	8001ab0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800353a:	787b      	ldrb	r3, [r7, #1]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003546:	e002      	b.n	800354e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	08014060 	.word	0x08014060

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e110      	b.n	8003790 <HAL_I2C_Init+0x234>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a89      	ldr	r2, [pc, #548]	@ (8003798 <HAL_I2C_Init+0x23c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_I2C_Init+0x3a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a87      	ldr	r2, [pc, #540]	@ (800379c <HAL_I2C_Init+0x240>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_I2C_Init+0x3a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a86      	ldr	r2, [pc, #536]	@ (80037a0 <HAL_I2C_Init+0x244>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_I2C_Init+0x3a>
 800358c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8003590:	4884      	ldr	r0, [pc, #528]	@ (80037a4 <HAL_I2C_Init+0x248>)
 8003592:	f7fe fa8d 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359e:	d304      	bcc.n	80035aa <HAL_I2C_Init+0x4e>
 80035a0:	f240 2121 	movw	r1, #545	@ 0x221
 80035a4:	487f      	ldr	r0, [pc, #508]	@ (80037a4 <HAL_I2C_Init+0x248>)
 80035a6:	f7fe fa83 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d008      	beq.n	80035c4 <HAL_I2C_Init+0x68>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d004      	beq.n	80035c4 <HAL_I2C_Init+0x68>
 80035ba:	f240 2122 	movw	r1, #546	@ 0x222
 80035be:	4879      	ldr	r0, [pc, #484]	@ (80037a4 <HAL_I2C_Init+0x248>)
 80035c0:	f7fe fa76 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_I2C_Init+0x84>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d4:	d004      	beq.n	80035e0 <HAL_I2C_Init+0x84>
 80035d6:	f240 2123 	movw	r1, #547	@ 0x223
 80035da:	4872      	ldr	r0, [pc, #456]	@ (80037a4 <HAL_I2C_Init+0x248>)
 80035dc:	f7fe fa68 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	2bff      	cmp	r3, #255	@ 0xff
 80035e6:	d904      	bls.n	80035f2 <HAL_I2C_Init+0x96>
 80035e8:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80035ec:	486d      	ldr	r0, [pc, #436]	@ (80037a4 <HAL_I2C_Init+0x248>)
 80035ee:	f7fe fa5f 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <HAL_I2C_Init+0xe0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d01c      	beq.n	800363c <HAL_I2C_Init+0xe0>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d018      	beq.n	800363c <HAL_I2C_Init+0xe0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d014      	beq.n	800363c <HAL_I2C_Init+0xe0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d010      	beq.n	800363c <HAL_I2C_Init+0xe0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d00c      	beq.n	800363c <HAL_I2C_Init+0xe0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b06      	cmp	r3, #6
 8003628:	d008      	beq.n	800363c <HAL_I2C_Init+0xe0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b07      	cmp	r3, #7
 8003630:	d004      	beq.n	800363c <HAL_I2C_Init+0xe0>
 8003632:	f240 2125 	movw	r1, #549	@ 0x225
 8003636:	485b      	ldr	r0, [pc, #364]	@ (80037a4 <HAL_I2C_Init+0x248>)
 8003638:	f7fe fa3a 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_I2C_Init+0xfc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800364c:	d004      	beq.n	8003658 <HAL_I2C_Init+0xfc>
 800364e:	f240 2126 	movw	r1, #550	@ 0x226
 8003652:	4854      	ldr	r0, [pc, #336]	@ (80037a4 <HAL_I2C_Init+0x248>)
 8003654:	f7fe fa2c 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_I2C_Init+0x118>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003668:	d004      	beq.n	8003674 <HAL_I2C_Init+0x118>
 800366a:	f240 2127 	movw	r1, #551	@ 0x227
 800366e:	484d      	ldr	r0, [pc, #308]	@ (80037a4 <HAL_I2C_Init+0x248>)
 8003670:	f7fe fa1e 	bl	8001ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fe f935 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	@ 0x24
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	e006      	b.n	80036ea <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d108      	bne.n	8003704 <HAL_I2C_Init+0x1a8>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	e007      	b.n	8003714 <HAL_I2C_Init+0x1b8>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003712:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003726:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003736:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69d9      	ldr	r1, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40005400 	.word	0x40005400
 800379c:	40005800 	.word	0x40005800
 80037a0:	40007800 	.word	0x40007800
 80037a4:	0801409c 	.word	0x0801409c

080037a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a30      	ldr	r2, [pc, #192]	@ (8003878 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00d      	beq.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2e      	ldr	r2, [pc, #184]	@ (800387c <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d008      	beq.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003880 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80037d0:	2163      	movs	r1, #99	@ 0x63
 80037d2:	482c      	ldr	r0, [pc, #176]	@ (8003884 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80037d4:	f7fe f96c 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e4:	d003      	beq.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80037e6:	2164      	movs	r1, #100	@ 0x64
 80037e8:	4826      	ldr	r0, [pc, #152]	@ (8003884 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80037ea:	f7fe f961 	bl	8001ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d138      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8003804:	2302      	movs	r3, #2
 8003806:	e032      	b.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40005400 	.word	0x40005400
 800387c:	40005800 	.word	0x40005800
 8003880:	40007800 	.word	0x40007800
 8003884:	080140d4 	.word	0x080140d4

08003888 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2e      	ldr	r2, [pc, #184]	@ (8003950 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00d      	beq.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d008      	beq.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80038b0:	2191      	movs	r1, #145	@ 0x91
 80038b2:	482a      	ldr	r0, [pc, #168]	@ (800395c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80038b4:	f7fe f8fc 	bl	8001ab0 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d903      	bls.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 80038be:	2192      	movs	r1, #146	@ 0x92
 80038c0:	4826      	ldr	r0, [pc, #152]	@ (800395c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80038c2:	f7fe f8f5 	bl	8001ab0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d139      	bne.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80038dc:	2302      	movs	r3, #2
 80038de:	e033      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800390e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40005400 	.word	0x40005400
 8003954:	40005800 	.word	0x40005800
 8003958:	40007800 	.word	0x40007800
 800395c:	080140d4 	.word	0x080140d4

08003960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0c9      	b.n	8003b06 <HAL_PCD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a66      	ldr	r2, [pc, #408]	@ (8003b10 <HAL_PCD_Init+0x1b0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <HAL_PCD_Init+0x24>
 800397c:	2187      	movs	r1, #135	@ 0x87
 800397e:	4865      	ldr	r0, [pc, #404]	@ (8003b14 <HAL_PCD_Init+0x1b4>)
 8003980:	f7fe f896 	bl	8001ab0 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00f fa6d 	bl	8012e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2203      	movs	r2, #3
 80039a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f007 fccd 	bl	800b34a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e03e      	b.n	8003a34 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3311      	adds	r3, #17
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	3310      	adds	r3, #16
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	3313      	adds	r3, #19
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	3320      	adds	r3, #32
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	3324      	adds	r3, #36	@ 0x24
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3301      	adds	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3bb      	bcc.n	80039b6 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e044      	b.n	8003ace <HAL_PCD_Init+0x16e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	791b      	ldrb	r3, [r3, #4]
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3b5      	bcc.n	8003a44 <HAL_PCD_Init+0xe4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003ae4:	f007 fc4c 	bl	800b380 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	7a9b      	ldrb	r3, [r3, #10]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_PCD_Init+0x1a4>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fc45 	bl	800538e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40005c00 	.word	0x40005c00
 8003b14:	08014110 	.word	0x08014110

08003b18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_Start+0x16>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e012      	b.n	8003b54 <HAL_PCD_Start+0x3c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f007 fbee 	bl	800b31c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f009 feae 	bl	800d8a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f009 feb3 	bl	800d8d4 <USB_ReadInterrupts>
 8003b6e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fb04 	bl	8004188 <PCD_EP_ISR_Handler>

    return;
 8003b80:	e110      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f00f f9f8 	bl	8012f9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8fc 	bl	8003daa <HAL_PCD_SetAddress>

    return;
 8003bb2:	e0f7      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd0:	b292      	uxth	r2, r2
 8003bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bd6:	e0e5      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bfa:	e0d3      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d034      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0208 	bic.w	r2, r2, #8
 8003c30:	b292      	uxth	r2, r2
 8003c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c48:	2100      	movs	r1, #0
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f00f fb98 	bl	8013380 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f00f f9db 	bl	801300c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c6e:	e099      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d027      	beq.n	8003cca <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0204 	orr.w	r2, r2, #4
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f00f f988 	bl	8012fd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cc8:	e06c      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d040      	beq.n	8003d56 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d12b      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0204 	orr.w	r2, r2, #4
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0208 	orr.w	r2, r2, #8
 8003d20:	b292      	uxth	r2, r2
 8003d22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d44:	2101      	movs	r1, #1
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f00f fb1a 	bl	8013380 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d4c:	e02a      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f00f f942 	bl	8012fd8 <HAL_PCD_SuspendCallback>
    return;
 8003d54:	e026      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00f      	beq.n	8003d80 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d72:	b292      	uxth	r2, r2
 8003d74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f00f f900 	bl	8012f7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d7e:	e011      	b.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003da2:	bf00      	nop
  }
}
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_PCD_SetAddress+0x1a>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e012      	b.n	8003dea <HAL_PCD_SetAddress+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f009 fd4f 	bl	800d87e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	4608      	mov	r0, r1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	70fb      	strb	r3, [r7, #3]
 8003e04:	460b      	mov	r3, r1
 8003e06:	803b      	strh	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da0e      	bge.n	8003e36 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	f003 0207 	and.w	r2, r3, #7
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	3310      	adds	r3, #16
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	705a      	strb	r2, [r3, #1]
 8003e34:	e00e      	b.n	8003e54 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 0207 	and.w	r2, r3, #7
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e60:	883a      	ldrh	r2, [r7, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	78ba      	ldrb	r2, [r7, #2]
 8003e6a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e6c:	78bb      	ldrb	r3, [r7, #2]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d102      	bne.n	8003e78 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_PCD_EP_Open+0x94>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e00e      	b.n	8003ea4 <HAL_PCD_EP_Open+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f007 fa91 	bl	800b3bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da0e      	bge.n	8003ede <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 0207 	and.w	r2, r3, #7
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	3310      	adds	r3, #16
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	705a      	strb	r2, [r3, #1]
 8003edc:	e00e      	b.n	8003efc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	f003 0207 	and.w	r2, r3, #7
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_PCD_EP_Close+0x6a>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e00e      	b.n	8003f34 <HAL_PCD_EP_Close+0x88>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f007 fe0d 	bl	800bb44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f007 ffc5 	bl	800bf1e <USB_EPStartXfer>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 0207 	and.w	r2, r3, #7
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003fc0:	681b      	ldr	r3, [r3, #0]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	f003 0207 	and.w	r2, r3, #7
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	3310      	adds	r3, #16
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2201      	movs	r2, #1
 8004018:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	b2da      	uxtb	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6979      	ldr	r1, [r7, #20]
 800402c:	4618      	mov	r0, r3
 800402e:	f007 ff76 	bl	800bf1e <USB_EPStartXfer>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	7912      	ldrb	r2, [r2, #4]
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e03e      	b.n	80040d8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800405a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405e:	2b00      	cmp	r3, #0
 8004060:	da0e      	bge.n	8004080 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	f003 0207 	and.w	r2, r3, #7
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	3310      	adds	r3, #16
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	705a      	strb	r2, [r3, #1]
 800407e:	e00c      	b.n	800409a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_PCD_EP_SetStall+0x7e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e00e      	b.n	80040d8 <HAL_PCD_EP_SetStall+0x9c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f009 fad9 	bl	800d680 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	7912      	ldrb	r2, [r2, #4]
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e040      	b.n	8004180 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004102:	2b00      	cmp	r3, #0
 8004104:	da0e      	bge.n	8004124 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 0207 	and.w	r2, r3, #7
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3310      	adds	r3, #16
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	705a      	strb	r2, [r3, #1]
 8004122:	e00e      	b.n	8004142 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 0207 	and.w	r2, r3, #7
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_PCD_EP_ClrStall+0x82>
 800415e:	2302      	movs	r3, #2
 8004160:	e00e      	b.n	8004180 <HAL_PCD_EP_ClrStall+0xa0>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f009 fad6 	bl	800d722 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b096      	sub	sp, #88	@ 0x58
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004190:	e3ad      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800419a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800419e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80041ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 816f 	bne.w	8004494 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d14c      	bne.n	800425c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	81fb      	strh	r3, [r7, #14]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3310      	adds	r3, #16
 80041ea:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	4413      	add	r3, r2
 8004206:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004212:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	441a      	add	r2, r3
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004222:	2100      	movs	r1, #0
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f00e fe90 	bl	8012f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7b1b      	ldrb	r3, [r3, #12]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 835c 	beq.w	80048ee <PCD_EP_ISR_Handler+0x766>
 8004236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 8357 	bne.w	80048ee <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	731a      	strb	r2, [r3, #12]
 800425a:	e348      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004262:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800426e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004276:	2b00      	cmp	r3, #0
 8004278:	d032      	beq.n	80042e0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	4413      	add	r3, r2
 8004294:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80042ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f009 fb5f 	bl	800d978 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042c6:	4013      	ands	r3, r2
 80042c8:	823b      	strh	r3, [r7, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	8a3a      	ldrh	r2, [r7, #16]
 80042d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042d4:	b292      	uxth	r2, r2
 80042d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f00e fe09 	bl	8012ef0 <HAL_PCD_SetupStageCallback>
 80042de:	e306      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f280 8302 	bge.w	80048ee <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042f6:	4013      	ands	r3, r2
 80042f8:	83fb      	strh	r3, [r7, #30]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	8bfa      	ldrh	r2, [r7, #30]
 8004300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004304:	b292      	uxth	r2, r2
 8004306:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004310:	b29b      	uxth	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	4413      	add	r3, r2
 8004322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800432c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <PCD_EP_ISR_Handler+0x1e4>
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004346:	6959      	ldr	r1, [r3, #20]
 8004348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800434c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004350:	b29b      	uxth	r3, r3
 8004352:	f009 fb11 	bl	800d978 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	441a      	add	r2, r3
 8004360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004362:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004364:	2100      	movs	r1, #0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f00e fdd4 	bl	8012f14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004376:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800437a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 82b5 	bne.w	80048ee <PCD_EP_ISR_Handler+0x766>
 8004384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004388:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800438c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004390:	f000 82ad 	beq.w	80048ee <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043be:	b29a      	uxth	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80043ca:	d91d      	bls.n	8004408 <PCD_EP_ISR_Handler+0x280>
 80043cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <PCD_EP_ISR_Handler+0x25e>
 80043e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e2:	3b01      	subs	r3, #1
 80043e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004400:	b29a      	uxth	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e026      	b.n	8004456 <PCD_EP_ISR_Handler+0x2ce>
 8004408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <PCD_EP_ISR_Handler+0x29e>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e017      	b.n	8004456 <PCD_EP_ISR_Handler+0x2ce>
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	647b      	str	r3, [r7, #68]	@ 0x44
 800442e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <PCD_EP_ISR_Handler+0x2b8>
 800443a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443c:	3301      	adds	r3, #1
 800443e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29a      	uxth	r2, r3
 8004446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004448:	b29b      	uxth	r3, r3
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	b29b      	uxth	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b29a      	uxth	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004466:	827b      	strh	r3, [r7, #18]
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800446e:	827b      	strh	r3, [r7, #18]
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004476:	827b      	strh	r3, [r7, #18]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	8a7b      	ldrh	r3, [r7, #18]
 800447e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800448e:	b29b      	uxth	r3, r3
 8004490:	8013      	strh	r3, [r2, #0]
 8004492:	e22c      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f280 80f6 	bge.w	800469e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044c8:	4013      	ands	r3, r2
 80044ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80044e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044e4:	b292      	uxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044e8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004500:	7b1b      	ldrb	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d123      	bne.n	800454e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	4413      	add	r3, r2
 8004520:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800452a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800452e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 808e 	beq.w	8004654 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453e:	6959      	ldr	r1, [r3, #20]
 8004540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004542:	88da      	ldrh	r2, [r3, #6]
 8004544:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004548:	f009 fa16 	bl	800d978 <USB_ReadPMA>
 800454c:	e082      	b.n	8004654 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800454e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004550:	78db      	ldrb	r3, [r3, #3]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d10a      	bne.n	800456c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004556:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800455a:	461a      	mov	r2, r3
 800455c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9d3 	bl	800490a <HAL_PCD_EP_DB_Receive>
 8004564:	4603      	mov	r3, r0
 8004566:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800456a:	e073      	b.n	8004654 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d022      	beq.n	8004610 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80045f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02c      	beq.n	8004654 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004604:	891a      	ldrh	r2, [r3, #8]
 8004606:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800460a:	f009 f9b5 	bl	800d978 <USB_ReadPMA>
 800460e:	e021      	b.n	8004654 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004618:	b29b      	uxth	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	4413      	add	r3, r2
 800462a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004634:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	6959      	ldr	r1, [r3, #20]
 8004648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464a:	895a      	ldrh	r2, [r3, #10]
 800464c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004650:	f009 f992 	bl	800d978 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800465c:	441a      	add	r2, r3
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800466a:	441a      	add	r2, r3
 800466c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800466e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <PCD_EP_ISR_Handler+0x4fc>
 8004678:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d206      	bcs.n	8004692 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f00e fc42 	bl	8012f14 <HAL_PCD_DataOutStageCallback>
 8004690:	e005      	b.n	800469e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004698:	4618      	mov	r0, r3
 800469a:	f007 fc40 	bl	800bf1e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800469e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8121 	beq.w	80048ee <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80046ac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3310      	adds	r3, #16
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80046f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80046fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80a2 	bne.w	800484a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800470c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470e:	7b1b      	ldrb	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8093 	beq.w	800483c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004716:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d046      	beq.n	80047b0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d126      	bne.n	8004778 <PCD_EP_ISR_Handler+0x5f0>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	4413      	add	r3, r2
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	4413      	add	r3, r2
 800474c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475c:	b29a      	uxth	r2, r3
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e061      	b.n	800483c <PCD_EP_ISR_Handler+0x6b4>
 8004778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d15d      	bne.n	800483c <PCD_EP_ISR_Handler+0x6b4>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478e:	b29b      	uxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004794:	4413      	add	r3, r2
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00da      	lsls	r2, r3, #3
 800479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	2200      	movs	r2, #0
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e045      	b.n	800483c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d126      	bne.n	800480c <PCD_EP_ISR_Handler+0x684>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d2:	4413      	add	r3, r2
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047de:	4413      	add	r3, r2
 80047e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004804:	b29a      	uxth	r2, r3
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	e017      	b.n	800483c <PCD_EP_ISR_Handler+0x6b4>
 800480c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d113      	bne.n	800483c <PCD_EP_ISR_Handler+0x6b4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800481c:	b29b      	uxth	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004822:	4413      	add	r3, r2
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	00da      	lsls	r2, r3, #3
 800482c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800482e:	4413      	add	r3, r2
 8004830:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	2200      	movs	r2, #0
 800483a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800483c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f00e fb81 	bl	8012f4a <HAL_PCD_DataInStageCallback>
 8004848:	e051      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800484a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d144      	bne.n	80048e0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	4413      	add	r3, r2
 8004870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800487e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004886:	429a      	cmp	r2, r3
 8004888:	d907      	bls.n	800489a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800488a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004896:	619a      	str	r2, [r3, #24]
 8004898:	e002      	b.n	80048a0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800489a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489c:	2200      	movs	r2, #0
 800489e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f00e fb4b 	bl	8012f4a <HAL_PCD_DataInStageCallback>
 80048b4:	e01b      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048be:	441a      	add	r2, r3
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048cc:	441a      	add	r2, r3
 80048ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d8:	4618      	mov	r0, r3
 80048da:	f007 fb20 	bl	800bf1e <USB_EPStartXfer>
 80048de:	e006      	b.n	80048ee <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048e4:	461a      	mov	r2, r3
 80048e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f917 	bl	8004b1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	b21b      	sxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f6ff ac49 	blt.w	8004192 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3758      	adds	r7, #88	@ 0x58
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b088      	sub	sp, #32
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	4613      	mov	r3, r2
 8004916:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d07c      	beq.n	8004a1c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	4413      	add	r3, r2
 800493c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004946:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	8b7b      	ldrh	r3, [r7, #26]
 800494e:	429a      	cmp	r2, r3
 8004950:	d306      	bcc.n	8004960 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	8b7b      	ldrh	r3, [r7, #26]
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	619a      	str	r2, [r3, #24]
 800495e:	e002      	b.n	8004966 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2200      	movs	r2, #0
 8004964:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d123      	bne.n	80049b6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004988:	833b      	strh	r3, [r7, #24]
 800498a:	8b3b      	ldrh	r3, [r7, #24]
 800498c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004990:	833b      	strh	r3, [r7, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	8b3b      	ldrh	r3, [r7, #24]
 80049a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	82fb      	strh	r3, [r7, #22]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	8afb      	ldrh	r3, [r7, #22]
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a00:	8b7b      	ldrh	r3, [r7, #26]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8085 	beq.w	8004b12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	891a      	ldrh	r2, [r3, #8]
 8004a14:	8b7b      	ldrh	r3, [r7, #26]
 8004a16:	f008 ffaf 	bl	800d978 <USB_ReadPMA>
 8004a1a:	e07a      	b.n	8004b12 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	8b7b      	ldrh	r3, [r7, #26]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d306      	bcc.n	8004a5a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	8b7b      	ldrh	r3, [r7, #26]
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	619a      	str	r2, [r3, #24]
 8004a58:	e002      	b.n	8004a60 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d123      	bne.n	8004ab0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a82:	83fb      	strh	r3, [r7, #30]
 8004a84:	8bfb      	ldrh	r3, [r7, #30]
 8004a86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a8a:	83fb      	strh	r3, [r7, #30]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	8bfb      	ldrh	r3, [r7, #30]
 8004a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11f      	bne.n	8004afa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad4:	83bb      	strh	r3, [r7, #28]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	8bbb      	ldrh	r3, [r7, #28]
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004afa:	8b7b      	ldrh	r3, [r7, #26]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6959      	ldr	r1, [r3, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	895a      	ldrh	r2, [r3, #10]
 8004b0c:	8b7b      	ldrh	r3, [r7, #26]
 8004b0e:	f008 ff33 	bl	800d978 <USB_ReadPMA>
    }
  }

  return count;
 8004b12:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b0a4      	sub	sp, #144	@ 0x90
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 81db 	beq.w	8004eec <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d907      	bls.n	8004b7a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	619a      	str	r2, [r3, #24]
 8004b78:	e002      	b.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 80b9 	bne.w	8004cfc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d126      	bne.n	8004be0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	4413      	add	r3, r2
 8004ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	00da      	lsls	r2, r3, #3
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	e01a      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d116      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	4413      	add	r3, r2
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	00da      	lsls	r2, r3, #3
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	4413      	add	r3, r2
 8004c0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d126      	bne.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x156>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	00da      	lsls	r2, r3, #3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e017      	b.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x186>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d113      	bne.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x186>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	4413      	add	r3, r2
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	00da      	lsls	r2, r3, #3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f00e f94e 	bl	8012f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 82fa 	beq.w	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd4:	82fb      	strh	r3, [r7, #22]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	8afb      	ldrh	r3, [r7, #22]
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]
 8004cfa:	e2d8      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 82ac 	bne.w	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d5e:	441a      	add	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d30b      	bcc.n	8004d96 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	621a      	str	r2, [r3, #32]
 8004d94:	e017      	b.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d108      	bne.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004d9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004dae:	e00a      	b.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d165      	bne.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x37e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de2:	4413      	add	r3, r2
 8004de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	00da      	lsls	r2, r3, #3
 8004dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dee:	4413      	add	r3, r2
 8004df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e0c:	d91d      	bls.n	8004e4a <HAL_PCD_EP_DB_Transmit+0x32e>
 8004e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e24:	3b01      	subs	r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	029b      	lsls	r3, r3, #10
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e044      	b.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	e035      	b.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_PCD_EP_DB_Transmit+0x366>
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e7e:	3301      	adds	r3, #1
 8004e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	e01c      	b.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d118      	bne.n	8004ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb6:	4413      	add	r3, r2
 8004eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00da      	lsls	r2, r3, #3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6959      	ldr	r1, [r3, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	891a      	ldrh	r2, [r3, #8]
 8004ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f008 fd05 	bl	800d8f4 <USB_WritePMA>
 8004eea:	e1e0      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f10:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d307      	bcc.n	8004f30 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	e002      	b.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 80c0 	bne.w	80050c0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d126      	bne.n	8004f96 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f5c:	4413      	add	r3, r2
 8004f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	00da      	lsls	r2, r3, #3
 8004f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f68:	4413      	add	r3, r2
 8004f6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e01a      	b.n	8004fcc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d116      	bne.n	8004fcc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fb2:	4413      	add	r3, r2
 8004fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc8:	2200      	movs	r2, #0
 8004fca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12b      	bne.n	8005032 <HAL_PCD_EP_DB_Transmit+0x516>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fee:	4413      	add	r3, r2
 8004ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	00da      	lsls	r2, r3, #3
 8004ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005010:	b29a      	uxth	r2, r3
 8005012:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005028:	b29a      	uxth	r2, r3
 800502a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e017      	b.n	8005062 <HAL_PCD_EP_DB_Transmit+0x546>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d113      	bne.n	8005062 <HAL_PCD_EP_DB_Transmit+0x546>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005048:	4413      	add	r3, r2
 800504a:	677b      	str	r3, [r7, #116]	@ 0x74
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	00da      	lsls	r2, r3, #3
 8005052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005054:	4413      	add	r3, r2
 8005056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800505a:	673b      	str	r3, [r7, #112]	@ 0x70
 800505c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800505e:	2200      	movs	r2, #0
 8005060:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f00d ff6e 	bl	8012f4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005074:	2b00      	cmp	r3, #0
 8005076:	f040 811a 	bne.w	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005094:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
 80050be:	e0f6      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d121      	bne.n	800510e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005102:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 80ca 	bne.w	80052ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005122:	441a      	add	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005130:	441a      	add	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d30b      	bcc.n	800515a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	e017      	b.n	800518a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d108      	bne.n	8005174 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005162:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005172:	e00a      	b.n	800518a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d165      	bne.n	8005264 <HAL_PCD_EP_DB_Transmit+0x748>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ac:	4413      	add	r3, r2
 80051ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	00da      	lsls	r2, r3, #3
 80051b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80051d6:	d91d      	bls.n	8005214 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80051d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80051ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051ee:	3b01      	subs	r3, #1
 80051f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e041      	b.n	8005298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_PCD_EP_DB_Transmit+0x716>
 800521c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e032      	b.n	8005298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_PCD_EP_DB_Transmit+0x730>
 8005246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005248:	3301      	adds	r3, #1
 800524a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29a      	uxth	r2, r3
 8005252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e019      	b.n	8005298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d115      	bne.n	8005298 <HAL_PCD_EP_DB_Transmit+0x77c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527a:	4413      	add	r3, r2
 800527c:	657b      	str	r3, [r7, #84]	@ 0x54
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	00da      	lsls	r2, r3, #3
 8005284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005286:	4413      	add	r3, r2
 8005288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800528c:	653b      	str	r3, [r7, #80]	@ 0x50
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005292:	b29a      	uxth	r2, r3
 8005294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005296:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6959      	ldr	r1, [r3, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	895a      	ldrh	r2, [r3, #10]
 80052a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f008 fb23 	bl	800d8f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c8:	82bb      	strh	r3, [r7, #20]
 80052ca:	8abb      	ldrh	r3, [r7, #20]
 80052cc:	f083 0310 	eor.w	r3, r3, #16
 80052d0:	82bb      	strh	r3, [r7, #20]
 80052d2:	8abb      	ldrh	r3, [r7, #20]
 80052d4:	f083 0320 	eor.w	r3, r3, #32
 80052d8:	82bb      	strh	r3, [r7, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8abb      	ldrh	r3, [r7, #20]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3790      	adds	r7, #144	@ 0x90
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	817b      	strh	r3, [r7, #10]
 8005316:	4613      	mov	r3, r2
 8005318:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	f003 0207 	and.w	r2, r3, #7
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3310      	adds	r3, #16
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e009      	b.n	8005352 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800533e:	897a      	ldrh	r2, [r7, #10]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005352:	893b      	ldrh	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	b29a      	uxth	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	80da      	strh	r2, [r3, #6]
 8005366:	e00b      	b.n	8005380 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2201      	movs	r2, #1
 800536c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	b29a      	uxth	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	b29a      	uxth	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f043 0302 	orr.w	r3, r3, #2
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <HAL_PWREx_ControlVoltageScaling+0x26>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d007      	beq.n	800540a <HAL_PWREx_ControlVoltageScaling+0x26>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005400:	d003      	beq.n	800540a <HAL_PWREx_ControlVoltageScaling+0x26>
 8005402:	219d      	movs	r1, #157	@ 0x9d
 8005404:	484d      	ldr	r0, [pc, #308]	@ (800553c <HAL_PWREx_ControlVoltageScaling+0x158>)
 8005406:	f7fc fb53 	bl	8001ab0 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d141      	bne.n	8005494 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005410:	4b4b      	ldr	r3, [pc, #300]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541c:	d131      	bne.n	8005482 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800541e:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005424:	4a46      	ldr	r2, [pc, #280]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005426:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800542a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800542e:	4b44      	ldr	r3, [pc, #272]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005436:	4a42      	ldr	r2, [pc, #264]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800543c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543e:	4b41      	ldr	r3, [pc, #260]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2232      	movs	r2, #50	@ 0x32
 8005444:	fb02 f303 	mul.w	r3, r2, r3
 8005448:	4a3f      	ldr	r2, [pc, #252]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005454:	e002      	b.n	800545c <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b01      	subs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800545c:	4b38      	ldr	r3, [pc, #224]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005468:	d102      	bne.n	8005470 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f2      	bne.n	8005456 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005470:	4b33      	ldr	r3, [pc, #204]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547c:	d158      	bne.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e057      	b.n	8005532 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005482:	4b2f      	ldr	r3, [pc, #188]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005488:	4a2d      	ldr	r2, [pc, #180]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800548a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005492:	e04d      	b.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800549a:	d141      	bne.n	8005520 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800549c:	4b28      	ldr	r3, [pc, #160]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a8:	d131      	bne.n	800550e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054aa:	4b25      	ldr	r3, [pc, #148]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b0:	4a23      	ldr	r2, [pc, #140]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ba:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005544 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2232      	movs	r2, #50	@ 0x32
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0c9b      	lsrs	r3, r3, #18
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e0:	e002      	b.n	80054e8 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e8:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f4:	d102      	bne.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x118>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f2      	bne.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005508:	d112      	bne.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e011      	b.n	8005532 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800550e:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800551e:	e007      	b.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005520:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005528:	4a05      	ldr	r2, [pc, #20]	@ (8005540 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800552a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800552e:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	08014148 	.word	0x08014148
 8005540:	40007000 	.word	0x40007000
 8005544:	20000000 	.word	0x20000000
 8005548:	431bde83 	.word	0x431bde83

0800554c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800555a:	6093      	str	r3, [r2, #8]
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40007000 	.word	0x40007000

0800556c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e3fc      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d022      	beq.n	80055cc <HAL_RCC_OscConfig+0x60>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11c      	bne.n	80055cc <HAL_RCC_OscConfig+0x60>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d116      	bne.n	80055cc <HAL_RCC_OscConfig+0x60>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d110      	bne.n	80055cc <HAL_RCC_OscConfig+0x60>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <HAL_RCC_OscConfig+0x60>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_RCC_OscConfig+0x60>
 80055c2:	f240 1145 	movw	r1, #325	@ 0x145
 80055c6:	4893      	ldr	r0, [pc, #588]	@ (8005814 <HAL_RCC_OscConfig+0x2a8>)
 80055c8:	f7fc fa72 	bl	8001ab0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8089 	beq.w	80056ec <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00e      	beq.n	8005600 <HAL_RCC_OscConfig+0x94>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ea:	d009      	beq.n	8005600 <HAL_RCC_OscConfig+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055f4:	d004      	beq.n	8005600 <HAL_RCC_OscConfig+0x94>
 80055f6:	f240 114b 	movw	r1, #331	@ 0x14b
 80055fa:	4886      	ldr	r0, [pc, #536]	@ (8005814 <HAL_RCC_OscConfig+0x2a8>)
 80055fc:	f7fc fa58 	bl	8001ab0 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005600:	4b85      	ldr	r3, [pc, #532]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560a:	4b83      	ldr	r3, [pc, #524]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d102      	bne.n	8005620 <HAL_RCC_OscConfig+0xb4>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d002      	beq.n	8005626 <HAL_RCC_OscConfig+0xba>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d10b      	bne.n	800563e <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005626:	4b7c      	ldr	r3, [pc, #496]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d05b      	beq.n	80056ea <HAL_RCC_OscConfig+0x17e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d157      	bne.n	80056ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e39c      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0xea>
 8005648:	4b73      	ldr	r3, [pc, #460]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a72      	ldr	r2, [pc, #456]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e01d      	b.n	8005692 <HAL_RCC_OscConfig+0x126>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x10e>
 8005660:	4b6d      	ldr	r3, [pc, #436]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a6c      	ldr	r2, [pc, #432]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b6a      	ldr	r3, [pc, #424]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a69      	ldr	r2, [pc, #420]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e00b      	b.n	8005692 <HAL_RCC_OscConfig+0x126>
 800567a:	4b67      	ldr	r3, [pc, #412]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a66      	ldr	r2, [pc, #408]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	4b64      	ldr	r3, [pc, #400]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a63      	ldr	r2, [pc, #396]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005690:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fd f919 	bl	80028d0 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a2:	f7fd f915 	bl	80028d0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b64      	cmp	r3, #100	@ 0x64
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e361      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056b4:	4b58      	ldr	r3, [pc, #352]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x136>
 80056c0:	e014      	b.n	80056ec <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fd f905 	bl	80028d0 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ca:	f7fd f901 	bl	80028d0 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b64      	cmp	r3, #100	@ 0x64
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e34d      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x15e>
 80056e8:	e000      	b.n	80056ec <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8094 	beq.w	8005822 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_RCC_OscConfig+0x1aa>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570a:	d004      	beq.n	8005716 <HAL_RCC_OscConfig+0x1aa>
 800570c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8005710:	4840      	ldr	r0, [pc, #256]	@ (8005814 <HAL_RCC_OscConfig+0x2a8>)
 8005712:	f7fc f9cd 	bl	8001ab0 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b7f      	cmp	r3, #127	@ 0x7f
 800571c:	d904      	bls.n	8005728 <HAL_RCC_OscConfig+0x1bc>
 800571e:	f240 1181 	movw	r1, #385	@ 0x181
 8005722:	483c      	ldr	r0, [pc, #240]	@ (8005814 <HAL_RCC_OscConfig+0x2a8>)
 8005724:	f7fc f9c4 	bl	8001ab0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005732:	4b39      	ldr	r3, [pc, #228]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b0c      	cmp	r3, #12
 8005740:	d102      	bne.n	8005748 <HAL_RCC_OscConfig+0x1dc>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d002      	beq.n	800574e <HAL_RCC_OscConfig+0x1e2>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d11f      	bne.n	800578e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800574e:	4b32      	ldr	r3, [pc, #200]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_RCC_OscConfig+0x1fa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e308      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005766:	4b2c      	ldr	r3, [pc, #176]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	061b      	lsls	r3, r3, #24
 8005774:	4928      	ldr	r1, [pc, #160]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005776:	4313      	orrs	r3, r2
 8005778:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800577a:	4b28      	ldr	r3, [pc, #160]	@ (800581c <HAL_RCC_OscConfig+0x2b0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fb0a 	bl	8001d98 <HAL_InitTick>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04a      	beq.n	8005820 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e2f4      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d023      	beq.n	80057de <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005796:	4b20      	ldr	r3, [pc, #128]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fd f895 	bl	80028d0 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057aa:	f7fd f891 	bl	80028d0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e2dd      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057bc:	4b16      	ldr	r3, [pc, #88]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c8:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	4910      	ldr	r1, [pc, #64]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
 80057dc:	e021      	b.n	8005822 <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fd f871 	bl	80028d0 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f2:	f7fd f86d 	bl	80028d0 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e2b9      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005804:	4b04      	ldr	r3, [pc, #16]	@ (8005818 <HAL_RCC_OscConfig+0x2ac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCC_OscConfig+0x286>
 8005810:	e007      	b.n	8005822 <HAL_RCC_OscConfig+0x2b6>
 8005812:	bf00      	nop
 8005814:	08014184 	.word	0x08014184
 8005818:	40021000 	.word	0x40021000
 800581c:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d049      	beq.n	80058c2 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_RCC_OscConfig+0x2dc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d004      	beq.n	8005848 <HAL_RCC_OscConfig+0x2dc>
 800583e:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8005842:	48a3      	ldr	r0, [pc, #652]	@ (8005ad0 <HAL_RCC_OscConfig+0x564>)
 8005844:	f7fc f934 	bl	8001ab0 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01c      	beq.n	800588a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005850:	4ba0      	ldr	r3, [pc, #640]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005856:	4a9f      	ldr	r2, [pc, #636]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fd f836 	bl	80028d0 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005868:	f7fd f832 	bl	80028d0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e27e      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800587a:	4b96      	ldr	r3, [pc, #600]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <HAL_RCC_OscConfig+0x2fc>
 8005888:	e01b      	b.n	80058c2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800588a:	4b92      	ldr	r3, [pc, #584]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800588c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005890:	4a90      	ldr	r2, [pc, #576]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fd f819 	bl	80028d0 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a2:	f7fd f815 	bl	80028d0 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e261      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b4:	4b87      	ldr	r3, [pc, #540]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80058b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ef      	bne.n	80058a2 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80b7 	beq.w	8005a3e <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x38a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d008      	beq.n	80058f6 <HAL_RCC_OscConfig+0x38a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d004      	beq.n	80058f6 <HAL_RCC_OscConfig+0x38a>
 80058ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80058f0:	4877      	ldr	r0, [pc, #476]	@ (8005ad0 <HAL_RCC_OscConfig+0x564>)
 80058f2:	f7fc f8dd 	bl	8001ab0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058f6:	4b77      	ldr	r3, [pc, #476]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x39a>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_RCC_OscConfig+0x39c>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590c:	4b71      	ldr	r3, [pc, #452]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800590e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005910:	4a70      	ldr	r2, [pc, #448]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005916:	6593      	str	r3, [r2, #88]	@ 0x58
 8005918:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005924:	2301      	movs	r3, #1
 8005926:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005928:	4b6b      	ldr	r3, [pc, #428]	@ (8005ad8 <HAL_RCC_OscConfig+0x56c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d118      	bne.n	8005966 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005934:	4b68      	ldr	r3, [pc, #416]	@ (8005ad8 <HAL_RCC_OscConfig+0x56c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a67      	ldr	r2, [pc, #412]	@ (8005ad8 <HAL_RCC_OscConfig+0x56c>)
 800593a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800593e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005940:	f7fc ffc6 	bl	80028d0 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005948:	f7fc ffc2 	bl	80028d0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e20e      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCC_OscConfig+0x56c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d108      	bne.n	8005980 <HAL_RCC_OscConfig+0x414>
 800596e:	4b59      	ldr	r3, [pc, #356]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005974:	4a57      	ldr	r2, [pc, #348]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800597e:	e024      	b.n	80059ca <HAL_RCC_OscConfig+0x45e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d110      	bne.n	80059aa <HAL_RCC_OscConfig+0x43e>
 8005988:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598e:	4a51      	ldr	r2, [pc, #324]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005990:	f043 0304 	orr.w	r3, r3, #4
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005998:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059a8:	e00f      	b.n	80059ca <HAL_RCC_OscConfig+0x45e>
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b0:	4a48      	ldr	r2, [pc, #288]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059ba:	4b46      	ldr	r3, [pc, #280]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c0:	4a44      	ldr	r2, [pc, #272]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059c2:	f023 0304 	bic.w	r3, r3, #4
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d2:	f7fc ff7d 	bl	80028d0 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fc ff79 	bl	80028d0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1c3      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f0:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ed      	beq.n	80059da <HAL_RCC_OscConfig+0x46e>
 80059fe:	e015      	b.n	8005a2c <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fc ff66 	bl	80028d0 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7fc ff62 	bl	80028d0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1ac      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ed      	bne.n	8005a08 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a2c:	7ffb      	ldrb	r3, [r7, #31]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d105      	bne.n	8005a3e <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a32:	4b28      	ldr	r3, [pc, #160]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	4a27      	ldr	r2, [pc, #156]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04f      	beq.n	8005aea <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d008      	beq.n	8005a64 <HAL_RCC_OscConfig+0x4f8>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d004      	beq.n	8005a64 <HAL_RCC_OscConfig+0x4f8>
 8005a5a:	f240 213b 	movw	r1, #571	@ 0x23b
 8005a5e:	481c      	ldr	r0, [pc, #112]	@ (8005ad0 <HAL_RCC_OscConfig+0x564>)
 8005a60:	f7fc f826 	bl	8001ab0 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a6c:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a72:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fc ff28 	bl	80028d0 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a84:	f7fc ff24 	bl	80028d0 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e170      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a96:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ef      	beq.n	8005a84 <HAL_RCC_OscConfig+0x518>
 8005aa4:	e021      	b.n	8005aea <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aac:	4a09      	ldr	r2, [pc, #36]	@ (8005ad4 <HAL_RCC_OscConfig+0x568>)
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fc ff0b 	bl	80028d0 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005abc:	e00e      	b.n	8005adc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005abe:	f7fc ff07 	bl	80028d0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d907      	bls.n	8005adc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e153      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
 8005ad0:	08014184 	.word	0x08014184
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005adc:	4b85      	ldr	r3, [pc, #532]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e9      	bne.n	8005abe <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <HAL_RCC_OscConfig+0x5a0>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d008      	beq.n	8005b0c <HAL_RCC_OscConfig+0x5a0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d004      	beq.n	8005b0c <HAL_RCC_OscConfig+0x5a0>
 8005b02:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8005b06:	487c      	ldr	r0, [pc, #496]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005b08:	f7fb ffd2 	bl	8001ab0 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8130 	beq.w	8005d76 <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b16:	4b77      	ldr	r3, [pc, #476]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	f000 80e2 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f040 80bd 	bne.w	8005ca8 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_RCC_OscConfig+0x5e4>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d008      	beq.n	8005b50 <HAL_RCC_OscConfig+0x5e4>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d004      	beq.n	8005b50 <HAL_RCC_OscConfig+0x5e4>
 8005b46:	f240 216e 	movw	r1, #622	@ 0x26e
 8005b4a:	486b      	ldr	r0, [pc, #428]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005b4c:	f7fb ffb0 	bl	8001ab0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_RCC_OscConfig+0x5f4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d904      	bls.n	8005b6a <HAL_RCC_OscConfig+0x5fe>
 8005b60:	f240 216f 	movw	r1, #623	@ 0x26f
 8005b64:	4864      	ldr	r0, [pc, #400]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005b66:	f7fb ffa3 	bl	8001ab0 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6e:	2b07      	cmp	r3, #7
 8005b70:	d903      	bls.n	8005b7a <HAL_RCC_OscConfig+0x60e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b78:	d904      	bls.n	8005b84 <HAL_RCC_OscConfig+0x618>
 8005b7a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8005b7e:	485e      	ldr	r0, [pc, #376]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005b80:	f7fb ff96 	bl	8001ab0 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d903      	bls.n	8005b94 <HAL_RCC_OscConfig+0x628>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	2b1f      	cmp	r3, #31
 8005b92:	d904      	bls.n	8005b9e <HAL_RCC_OscConfig+0x632>
 8005b94:	f240 2171 	movw	r1, #625	@ 0x271
 8005b98:	4857      	ldr	r0, [pc, #348]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005b9a:	f7fb ff89 	bl	8001ab0 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d010      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x65c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d00c      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x65c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x65c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x65c>
 8005bbe:	f240 2172 	movw	r1, #626	@ 0x272
 8005bc2:	484d      	ldr	r0, [pc, #308]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005bc4:	f7fb ff74 	bl	8001ab0 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x686>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d00c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x686>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x686>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d004      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x686>
 8005be8:	f240 2173 	movw	r1, #627	@ 0x273
 8005bec:	4842      	ldr	r0, [pc, #264]	@ (8005cf8 <HAL_RCC_OscConfig+0x78c>)
 8005bee:	f7fb ff5f 	bl	8001ab0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b40      	ldr	r3, [pc, #256]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005bf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fc fe67 	bl	80028d0 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c06:	f7fc fe63 	bl	80028d0 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0af      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c18:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f0      	bne.n	8005c06 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c24:	4b33      	ldr	r3, [pc, #204]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	4b34      	ldr	r3, [pc, #208]	@ (8005cfc <HAL_RCC_OscConfig+0x790>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6a11      	ldr	r1, [r2, #32]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005c3e:	0212      	lsls	r2, r2, #8
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0552      	lsls	r2, r2, #21
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c52:	0852      	lsrs	r2, r2, #1
 8005c54:	3a01      	subs	r2, #1
 8005c56:	0652      	lsls	r2, r2, #25
 8005c58:	4311      	orrs	r1, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c5e:	06d2      	lsls	r2, r2, #27
 8005c60:	430a      	orrs	r2, r1
 8005c62:	4924      	ldr	r1, [pc, #144]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c68:	4b22      	ldr	r3, [pc, #136]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c74:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc fe26 	bl	80028d0 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fc fe22 	bl	80028d0 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e06e      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x71c>
 8005ca6:	e066      	b.n	8005d76 <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca8:	4b12      	ldr	r3, [pc, #72]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a11      	ldr	r2, [pc, #68]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fc fe0c 	bl	80028d0 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc fe08 	bl	80028d0 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e054      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	4905      	ldr	r1, [pc, #20]	@ (8005cf4 <HAL_RCC_OscConfig+0x788>)
 8005ce0:	4b07      	ldr	r3, [pc, #28]	@ (8005d00 <HAL_RCC_OscConfig+0x794>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60cb      	str	r3, [r1, #12]
 8005ce6:	e046      	b.n	8005d76 <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d109      	bne.n	8005d04 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e041      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	08014184 	.word	0x08014184
 8005cfc:	019f800c 	.word	0x019f800c
 8005d00:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d04:	4b1e      	ldr	r3, [pc, #120]	@ (8005d80 <HAL_RCC_OscConfig+0x814>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 0203 	and.w	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d12c      	bne.n	8005d72 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	3b01      	subs	r3, #1
 8005d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d123      	bne.n	8005d72 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11b      	bne.n	8005d72 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d113      	bne.n	8005d72 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	3b01      	subs	r3, #1
 8005d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d109      	bne.n	8005d72 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e1e0      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x2c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d904      	bls.n	8005dba <HAL_RCC_ClockConfig+0x36>
 8005db0:	f240 310b 	movw	r1, #779	@ 0x30b
 8005db4:	4869      	ldr	r0, [pc, #420]	@ (8005f5c <HAL_RCC_ClockConfig+0x1d8>)
 8005db6:	f7fb fe7b 	bl	8001ab0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d031      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d02e      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d02b      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d025      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d022      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d01f      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b07      	cmp	r3, #7
 8005de8:	d01c      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d019      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d016      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b0a      	cmp	r3, #10
 8005dfa:	d013      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b0b      	cmp	r3, #11
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	d00d      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b0d      	cmp	r3, #13
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b0e      	cmp	r3, #14
 8005e12:	d007      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	d004      	beq.n	8005e24 <HAL_RCC_ClockConfig+0xa0>
 8005e1a:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8005e1e:	484f      	ldr	r0, [pc, #316]	@ (8005f5c <HAL_RCC_ClockConfig+0x1d8>)
 8005e20:	f7fb fe46 	bl	8001ab0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	4b4e      	ldr	r3, [pc, #312]	@ (8005f60 <HAL_RCC_ClockConfig+0x1dc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d910      	bls.n	8005e54 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b4b      	ldr	r3, [pc, #300]	@ (8005f60 <HAL_RCC_ClockConfig+0x1dc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 020f 	bic.w	r2, r3, #15
 8005e3a:	4949      	ldr	r1, [pc, #292]	@ (8005f60 <HAL_RCC_ClockConfig+0x1dc>)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e42:	4b47      	ldr	r3, [pc, #284]	@ (8005f60 <HAL_RCC_ClockConfig+0x1dc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e184      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 808e 	beq.w	8005f7e <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d00c      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x100>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d008      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x100>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d004      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x100>
 8005e7a:	f240 3123 	movw	r1, #803	@ 0x323
 8005e7e:	4837      	ldr	r0, [pc, #220]	@ (8005f5c <HAL_RCC_ClockConfig+0x1d8>)
 8005e80:	f7fb fe16 	bl	8001ab0 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d129      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e8c:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e160      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e9c:	f000 fa4c 	bl	8006338 <RCC_GetSysClockFreqFromPLLSource>
 8005ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4a30      	ldr	r2, [pc, #192]	@ (8005f68 <HAL_RCC_ClockConfig+0x1e4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d93f      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d009      	beq.n	8005eca <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d033      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d12f      	bne.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eca:	4b26      	ldr	r3, [pc, #152]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ed2:	4a24      	ldr	r2, [pc, #144]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eda:	2380      	movs	r3, #128	@ 0x80
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e024      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e132      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e12a      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005f08:	f000 f93a 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4a15      	ldr	r2, [pc, #84]	@ (8005f68 <HAL_RCC_ClockConfig+0x1e4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d909      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f16:	4b13      	ldr	r3, [pc, #76]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f1e:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f26:	2380      	movs	r3, #128	@ 0x80
 8005f28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0203 	bic.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	490b      	ldr	r1, [pc, #44]	@ (8005f64 <HAL_RCC_ClockConfig+0x1e0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3c:	f7fc fcc8 	bl	80028d0 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	e013      	b.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fc fcc4 	bl	80028d0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d90a      	bls.n	8005f6c <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e101      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
 8005f5a:	bf00      	nop
 8005f5c:	08014184 	.word	0x08014184
 8005f60:	40022000 	.word	0x40022000
 8005f64:	40021000 	.word	0x40021000
 8005f68:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 020c 	and.w	r2, r3, #12
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d1e2      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d04c      	beq.n	8006024 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f96:	4b74      	ldr	r3, [pc, #464]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4a73      	ldr	r2, [pc, #460]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8005f9c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fa0:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005fae:	4b6e      	ldr	r3, [pc, #440]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8005fb8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005fbc:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d024      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b80      	cmp	r3, #128	@ 0x80
 8005fcc:	d020      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b90      	cmp	r3, #144	@ 0x90
 8005fd4:	d01c      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fdc:	d018      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2bb0      	cmp	r3, #176	@ 0xb0
 8005fe4:	d014      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2bd0      	cmp	r3, #208	@ 0xd0
 8005ff4:	d00c      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2be0      	cmp	r3, #224	@ 0xe0
 8005ffc:	d008      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2bf0      	cmp	r3, #240	@ 0xf0
 8006004:	d004      	beq.n	8006010 <HAL_RCC_ClockConfig+0x28c>
 8006006:	f240 317a 	movw	r1, #890	@ 0x37a
 800600a:	4858      	ldr	r0, [pc, #352]	@ (800616c <HAL_RCC_ClockConfig+0x3e8>)
 800600c:	f7fb fd50 	bl	8001ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b55      	ldr	r3, [pc, #340]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4952      	ldr	r1, [pc, #328]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
 8006022:	e008      	b.n	8006036 <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2b80      	cmp	r3, #128	@ 0x80
 8006028:	d105      	bne.n	8006036 <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800602a:	4b4f      	ldr	r3, [pc, #316]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	4a4e      	ldr	r2, [pc, #312]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8006030:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006034:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006036:	4b4e      	ldr	r3, [pc, #312]	@ (8006170 <HAL_RCC_ClockConfig+0x3ec>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d21d      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006044:	4b4a      	ldr	r3, [pc, #296]	@ (8006170 <HAL_RCC_ClockConfig+0x3ec>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 020f 	bic.w	r2, r3, #15
 800604c:	4948      	ldr	r1, [pc, #288]	@ (8006170 <HAL_RCC_ClockConfig+0x3ec>)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006054:	f7fc fc3c 	bl	80028d0 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fc fc38 	bl	80028d0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e075      	b.n	800615e <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <HAL_RCC_ClockConfig+0x3ec>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d1ed      	bne.n	800605c <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d025      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d018      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x342>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609c:	d013      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x342>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80060a6:	d00e      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x342>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060b0:	d009      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x342>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060ba:	d004      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x342>
 80060bc:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80060c0:	482a      	ldr	r0, [pc, #168]	@ (800616c <HAL_RCC_ClockConfig+0x3e8>)
 80060c2:	f7fb fcf5 	bl	8001ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c6:	4b28      	ldr	r3, [pc, #160]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4925      	ldr	r1, [pc, #148]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d026      	beq.n	8006132 <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d018      	beq.n	800611e <HAL_RCC_ClockConfig+0x39a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d013      	beq.n	800611e <HAL_RCC_ClockConfig+0x39a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80060fe:	d00e      	beq.n	800611e <HAL_RCC_ClockConfig+0x39a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x39a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006112:	d004      	beq.n	800611e <HAL_RCC_ClockConfig+0x39a>
 8006114:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8006118:	4814      	ldr	r0, [pc, #80]	@ (800616c <HAL_RCC_ClockConfig+0x3e8>)
 800611a:	f7fb fcc9 	bl	8001ab0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800611e:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	490e      	ldr	r1, [pc, #56]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 800612e:	4313      	orrs	r3, r2
 8006130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006132:	f000 f825 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 8006136:	4602      	mov	r2, r0
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_RCC_ClockConfig+0x3e4>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	490c      	ldr	r1, [pc, #48]	@ (8006174 <HAL_RCC_ClockConfig+0x3f0>)
 8006144:	5ccb      	ldrb	r3, [r1, r3]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	fa22 f303 	lsr.w	r3, r2, r3
 800614e:	4a0a      	ldr	r2, [pc, #40]	@ (8006178 <HAL_RCC_ClockConfig+0x3f4>)
 8006150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006152:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <HAL_RCC_ClockConfig+0x3f8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fb fe1e 	bl	8001d98 <HAL_InitTick>
 800615c:	4603      	mov	r3, r0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40021000 	.word	0x40021000
 800616c:	08014184 	.word	0x08014184
 8006170:	40022000 	.word	0x40022000
 8006174:	0801447c 	.word	0x0801447c
 8006178:	20000000 	.word	0x20000000
 800617c:	20000004 	.word	0x20000004

08006180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006186:	4b2c      	ldr	r3, [pc, #176]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b04      	cmp	r3, #4
 8006190:	d102      	bne.n	8006198 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006192:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	e047      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006198:	4b27      	ldr	r3, [pc, #156]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d102      	bne.n	80061aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061a4:	4b26      	ldr	r3, [pc, #152]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	e03e      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061aa:	4b23      	ldr	r3, [pc, #140]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d136      	bne.n	8006224 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061b6:	4b20      	ldr	r3, [pc, #128]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	3301      	adds	r3, #1
 80061cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d10c      	bne.n	80061ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	4a16      	ldr	r2, [pc, #88]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061de:	68d2      	ldr	r2, [r2, #12]
 80061e0:	0a12      	lsrs	r2, r2, #8
 80061e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	617b      	str	r3, [r7, #20]
      break;
 80061ec:	e00c      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ee:	4a13      	ldr	r2, [pc, #76]	@ (800623c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	4a10      	ldr	r2, [pc, #64]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f8:	68d2      	ldr	r2, [r2, #12]
 80061fa:	0a12      	lsrs	r2, r2, #8
 80061fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]
      break;
 8006206:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006208:	4b0b      	ldr	r3, [pc, #44]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	0e5b      	lsrs	r3, r3, #25
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	3301      	adds	r3, #1
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e001      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006228:	693b      	ldr	r3, [r7, #16]
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000
 800623c:	00f42400 	.word	0x00f42400
 8006240:	007a1200 	.word	0x007a1200

08006244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006248:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <HAL_RCC_GetHCLKFreq+0x14>)
 800624a:	681b      	ldr	r3, [r3, #0]
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000000 	.word	0x20000000

0800625c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006260:	f7ff fff0 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4904      	ldr	r1, [pc, #16]	@ (8006284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	0801448c 	.word	0x0801448c

08006288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800628c:	f7ff ffda 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	0adb      	lsrs	r3, r3, #11
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	4904      	ldr	r1, [pc, #16]	@ (80062b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800629e:	5ccb      	ldrb	r3, [r1, r3]
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40021000 	.word	0x40021000
 80062b0:	0801448c 	.word	0x0801448c

080062b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_RCC_GetClockConfig+0x1a>
 80062c4:	f240 41e3 	movw	r1, #1251	@ 0x4e3
 80062c8:	4818      	ldr	r0, [pc, #96]	@ (800632c <HAL_RCC_GetClockConfig+0x78>)
 80062ca:	f7fb fbf1 	bl	8001ab0 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <HAL_RCC_GetClockConfig+0x2a>
 80062d4:	f240 41e4 	movw	r1, #1252	@ 0x4e4
 80062d8:	4814      	ldr	r0, [pc, #80]	@ (800632c <HAL_RCC_GetClockConfig+0x78>)
 80062da:	f7fb fbe9 	bl	8001ab0 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	220f      	movs	r2, #15
 80062e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80062e4:	4b12      	ldr	r3, [pc, #72]	@ (8006330 <HAL_RCC_GetClockConfig+0x7c>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0203 	and.w	r2, r3, #3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80062f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <HAL_RCC_GetClockConfig+0x7c>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80062fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <HAL_RCC_GetClockConfig+0x7c>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006308:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <HAL_RCC_GetClockConfig+0x7c>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	08db      	lsrs	r3, r3, #3
 800630e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006316:	4b07      	ldr	r3, [pc, #28]	@ (8006334 <HAL_RCC_GetClockConfig+0x80>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 020f 	and.w	r2, r3, #15
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	601a      	str	r2, [r3, #0]
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08014184 	.word	0x08014184
 8006330:	40021000 	.word	0x40021000
 8006334:	40022000 	.word	0x40022000

08006338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800633e:	4b1e      	ldr	r3, [pc, #120]	@ (80063b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b03      	cmp	r3, #3
 800635a:	d10c      	bne.n	8006376 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800635c:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	4a14      	ldr	r2, [pc, #80]	@ (80063b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006366:	68d2      	ldr	r2, [r2, #12]
 8006368:	0a12      	lsrs	r2, r2, #8
 800636a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	617b      	str	r3, [r7, #20]
    break;
 8006374:	e00c      	b.n	8006390 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	4a0e      	ldr	r2, [pc, #56]	@ (80063b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006380:	68d2      	ldr	r2, [r2, #12]
 8006382:	0a12      	lsrs	r2, r2, #8
 8006384:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006388:	fb02 f303 	mul.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]
    break;
 800638e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006390:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	0e5b      	lsrs	r3, r3, #25
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	3301      	adds	r3, #1
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063aa:	687b      	ldr	r3, [r7, #4]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40021000 	.word	0x40021000
 80063bc:	007a1200 	.word	0x007a1200
 80063c0:	00f42400 	.word	0x00f42400

080063c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063cc:	2300      	movs	r3, #0
 80063ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063d0:	2300      	movs	r3, #0
 80063d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d15d      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d157      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d151      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d14b      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d145      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d13f      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006424:	2b00      	cmp	r3, #0
 8006426:	d139      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d133      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800643c:	2b00      	cmp	r3, #0
 800643e:	d12d      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d127      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006454:	2b00      	cmp	r3, #0
 8006456:	d121      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11b      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d115      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10f      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006494:	2183      	movs	r1, #131	@ 0x83
 8006496:	4855      	ldr	r0, [pc, #340]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006498:	f7fb fb0a 	bl	8001ab0 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80b2 	beq.w	800660e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064aa:	2300      	movs	r3, #0
 80064ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d012      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x118>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064be:	d00d      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x118>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c8:	d008      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x118>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x118>
 80064d4:	218b      	movs	r1, #139	@ 0x8b
 80064d6:	4845      	ldr	r0, [pc, #276]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80064d8:	f7fb faea 	bl	8001ab0 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064dc:	4b44      	ldr	r3, [pc, #272]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10d      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e8:	4b41      	ldr	r3, [pc, #260]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ec:	4a40      	ldr	r2, [pc, #256]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f4:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006500:	2301      	movs	r3, #1
 8006502:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3a      	ldr	r2, [pc, #232]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800650a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800650e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006510:	f7fc f9de 	bl	80028d0 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006516:	e009      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006518:	f7fc f9da 	bl	80028d0 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d902      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	74fb      	strb	r3, [r7, #19]
        break;
 800652a:	e005      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652c:	4b31      	ldr	r3, [pc, #196]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ef      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d15c      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800653e:	4b2c      	ldr	r3, [pc, #176]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d019      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800655a:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006566:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656c:	4a20      	ldr	r2, [pc, #128]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800656e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657c:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800657e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d016      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc f99a 	bl	80028d0 <HAL_GetTick>
 800659c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800659e:	e00b      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fc f996 	bl	80028d0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d902      	bls.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	74fb      	strb	r3, [r7, #19]
            break;
 80065b6:	e006      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b8:	4b0d      	ldr	r3, [pc, #52]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ec      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065c6:	7cfb      	ldrb	r3, [r7, #19]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065cc:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	4905      	ldr	r1, [pc, #20]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80065e2:	e00b      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065e4:	7cfb      	ldrb	r3, [r7, #19]
 80065e6:	74bb      	strb	r3, [r7, #18]
 80065e8:	e008      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80065ea:	bf00      	nop
 80065ec:	080141bc 	.word	0x080141bc
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065fc:	7c7b      	ldrb	r3, [r7, #17]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b98      	ldr	r3, [pc, #608]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	4a97      	ldr	r2, [pc, #604]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01e      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d00b      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d007      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d003      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800663a:	21e0      	movs	r1, #224	@ 0xe0
 800663c:	488a      	ldr	r0, [pc, #552]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800663e:	f7fb fa37 	bl	8001ab0 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006642:	4b88      	ldr	r3, [pc, #544]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006648:	f023 0203 	bic.w	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4984      	ldr	r1, [pc, #528]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01e      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00f      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b04      	cmp	r3, #4
 8006672:	d00b      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d007      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b08      	cmp	r3, #8
 8006682:	d003      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006684:	21ea      	movs	r1, #234	@ 0xea
 8006686:	4878      	ldr	r0, [pc, #480]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006688:	f7fb fa12 	bl	8001ab0 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800668c:	4b75      	ldr	r3, [pc, #468]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	f023 020c 	bic.w	r2, r3, #12
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	4972      	ldr	r1, [pc, #456]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01e      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00f      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d00b      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b30      	cmp	r3, #48	@ 0x30
 80066c4:	d007      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d003      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80066ce:	21f4      	movs	r1, #244	@ 0xf4
 80066d0:	4865      	ldr	r0, [pc, #404]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066d2:	f7fb f9ed 	bl	8001ab0 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066d6:	4b63      	ldr	r3, [pc, #396]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	495f      	ldr	r1, [pc, #380]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01e      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00f      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b40      	cmp	r3, #64	@ 0x40
 8006706:	d00b      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2bc0      	cmp	r3, #192	@ 0xc0
 800670e:	d007      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b80      	cmp	r3, #128	@ 0x80
 8006716:	d003      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006718:	21ff      	movs	r1, #255	@ 0xff
 800671a:	4853      	ldr	r0, [pc, #332]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800671c:	f7fb f9c8 	bl	8001ab0 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006720:	4b50      	ldr	r3, [pc, #320]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	494d      	ldr	r1, [pc, #308]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d022      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d013      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006752:	d00e      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800675c:	d009      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006766:	d004      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006768:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800676c:	483e      	ldr	r0, [pc, #248]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800676e:	f7fb f99f 	bl	8001ab0 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006772:	4b3c      	ldr	r3, [pc, #240]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006778:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	4938      	ldr	r1, [pc, #224]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01d      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a4:	d009      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ae:	d004      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80067b0:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80067b4:	482c      	ldr	r0, [pc, #176]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067b6:	f7fb f97b 	bl	8001ab0 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4926      	ldr	r1, [pc, #152]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01d      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00e      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ec:	d009      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80067f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80067fc:	481a      	ldr	r0, [pc, #104]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067fe:	f7fb f957 	bl	8001ab0 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006802:	4b18      	ldr	r3, [pc, #96]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4914      	ldr	r1, [pc, #80]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d023      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006834:	d009      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683e:	d004      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006840:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8006844:	4808      	ldr	r0, [pc, #32]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006846:	f7fb f933 	bl	8001ab0 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800684a:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006850:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	4902      	ldr	r1, [pc, #8]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006860:	e004      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006862:	bf00      	nop
 8006864:	40021000 	.word	0x40021000
 8006868:	080141bc 	.word	0x080141bc
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006874:	2b00      	cmp	r3, #0
 8006876:	d022      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006888:	d00e      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006892:	d009      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800689c:	d004      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800689e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80068a2:	4896      	ldr	r0, [pc, #600]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80068a4:	f7fb f904 	bl	8001ab0 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a8:	4b95      	ldr	r3, [pc, #596]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	4992      	ldr	r1, [pc, #584]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02d      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d013      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x536>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068da:	d00e      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x536>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068e4:	d009      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x536>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x536>
 80068f0:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 80068f4:	4881      	ldr	r0, [pc, #516]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80068f6:	f7fb f8db 	bl	8001ab0 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068fa:	4b81      	ldr	r3, [pc, #516]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	497d      	ldr	r1, [pc, #500]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006918:	d105      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800691a:	4b79      	ldr	r3, [pc, #484]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4a78      	ldr	r2, [pc, #480]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006924:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800692e:	2b00      	cmp	r3, #0
 8006930:	d02d      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006942:	d00e      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800694c:	d009      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006958:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800695c:	4867      	ldr	r0, [pc, #412]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800695e:	f7fb f8a7 	bl	8001ab0 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006962:	4b67      	ldr	r3, [pc, #412]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006968:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	4963      	ldr	r1, [pc, #396]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006982:	4b5f      	ldr	r3, [pc, #380]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4a5e      	ldr	r2, [pc, #376]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800698c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d028      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069aa:	d009      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069b4:	d004      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80069b6:	f240 1179 	movw	r1, #377	@ 0x179
 80069ba:	4850      	ldr	r0, [pc, #320]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80069bc:	f7fb f878 	bl	8001ab0 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	494c      	ldr	r1, [pc, #304]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069de:	d105      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e0:	4b47      	ldr	r3, [pc, #284]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a46      	ldr	r2, [pc, #280]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d023      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a08:	d004      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006a0a:	f240 118b 	movw	r1, #395	@ 0x18b
 8006a0e:	483b      	ldr	r0, [pc, #236]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006a10:	f7fb f84e 	bl	8001ab0 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a14:	4b3a      	ldr	r3, [pc, #232]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a22:	4937      	ldr	r1, [pc, #220]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a32:	d105      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a34:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4a31      	ldr	r2, [pc, #196]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d023      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a5c:	d004      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8006a5e:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8006a62:	4826      	ldr	r0, [pc, #152]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006a64:	f7fb f824 	bl	8001ab0 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	4922      	ldr	r1, [pc, #136]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a86:	d105      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d028      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006abc:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8006ac0:	480e      	ldr	r0, [pc, #56]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006ac2:	f7fa fff5 	bl	8001ab0 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad4:	490a      	ldr	r1, [pc, #40]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae4:	d105      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ae6:	4b06      	ldr	r3, [pc, #24]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4a05      	ldr	r2, [pc, #20]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006af2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	080141bc 	.word	0x080141bc
 8006b00:	40021000 	.word	0x40021000

08006b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e1e5      	b.n	8006ee2 <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8006d08 <HAL_SPI_Init+0x204>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00e      	beq.n	8006b3e <HAL_SPI_Init+0x3a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a79      	ldr	r2, [pc, #484]	@ (8006d0c <HAL_SPI_Init+0x208>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_SPI_Init+0x3a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a78      	ldr	r2, [pc, #480]	@ (8006d10 <HAL_SPI_Init+0x20c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_SPI_Init+0x3a>
 8006b34:	f240 1145 	movw	r1, #325	@ 0x145
 8006b38:	4876      	ldr	r0, [pc, #472]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006b3a:	f7fa ffb9 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <HAL_SPI_Init+0x56>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4e:	d004      	beq.n	8006b5a <HAL_SPI_Init+0x56>
 8006b50:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8006b54:	486f      	ldr	r0, [pc, #444]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006b56:	f7fa ffab 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <HAL_SPI_Init+0x7c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b6a:	d009      	beq.n	8006b80 <HAL_SPI_Init+0x7c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b74:	d004      	beq.n	8006b80 <HAL_SPI_Init+0x7c>
 8006b76:	f240 1147 	movw	r1, #327	@ 0x147
 8006b7a:	4866      	ldr	r0, [pc, #408]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006b7c:	f7fa ff98 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b88:	d040      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8006b92:	d03b      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8006b9c:	d036      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ba6:	d031      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8006bb0:	d02c      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006bba:	d027      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8006bc4:	d022      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bce:	d01d      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bd8:	d018      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006be2:	d013      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006bec:	d00e      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf6:	d009      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c00:	d004      	beq.n	8006c0c <HAL_SPI_Init+0x108>
 8006c02:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8006c06:	4843      	ldr	r0, [pc, #268]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006c08:	f7fa ff52 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c14:	d00d      	beq.n	8006c32 <HAL_SPI_Init+0x12e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_SPI_Init+0x12e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c26:	d004      	beq.n	8006c32 <HAL_SPI_Init+0x12e>
 8006c28:	f240 1149 	movw	r1, #329	@ 0x149
 8006c2c:	4839      	ldr	r0, [pc, #228]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006c2e:	f7fa ff3f 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d008      	beq.n	8006c4c <HAL_SPI_Init+0x148>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <HAL_SPI_Init+0x148>
 8006c42:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8006c46:	4833      	ldr	r0, [pc, #204]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006c48:	f7fa ff32 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d020      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d01c      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d018      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	2b18      	cmp	r3, #24
 8006c6a:	d014      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d010      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	2b28      	cmp	r3, #40	@ 0x28
 8006c7a:	d00c      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b30      	cmp	r3, #48	@ 0x30
 8006c82:	d008      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	2b38      	cmp	r3, #56	@ 0x38
 8006c8a:	d004      	beq.n	8006c96 <HAL_SPI_Init+0x192>
 8006c8c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006c90:	4820      	ldr	r0, [pc, #128]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006c92:	f7fa ff0d 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <HAL_SPI_Init+0x1ac>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	2b80      	cmp	r3, #128	@ 0x80
 8006ca4:	d004      	beq.n	8006cb0 <HAL_SPI_Init+0x1ac>
 8006ca6:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006caa:	481a      	ldr	r0, [pc, #104]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006cac:	f7fa ff00 	bl	8001ab0 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_SPI_Init+0x1c6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d004      	beq.n	8006cca <HAL_SPI_Init+0x1c6>
 8006cc0:	f240 114d 	movw	r1, #333	@ 0x14d
 8006cc4:	4813      	ldr	r0, [pc, #76]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006cc6:	f7fa fef3 	bl	8001ab0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d151      	bne.n	8006d76 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <HAL_SPI_Init+0x1e8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d004      	beq.n	8006cec <HAL_SPI_Init+0x1e8>
 8006ce2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8006ce6:	480b      	ldr	r0, [pc, #44]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006ce8:	f7fa fee2 	bl	8001ab0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d011      	beq.n	8006d18 <HAL_SPI_Init+0x214>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d00d      	beq.n	8006d18 <HAL_SPI_Init+0x214>
 8006cfc:	f240 1151 	movw	r1, #337	@ 0x151
 8006d00:	4804      	ldr	r0, [pc, #16]	@ (8006d14 <HAL_SPI_Init+0x210>)
 8006d02:	f7fa fed5 	bl	8001ab0 <assert_failed>
 8006d06:	e007      	b.n	8006d18 <HAL_SPI_Init+0x214>
 8006d08:	40013000 	.word	0x40013000
 8006d0c:	40003800 	.word	0x40003800
 8006d10:	40003c00 	.word	0x40003c00
 8006d14:	080141f8 	.word	0x080141f8

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d20:	d125      	bne.n	8006d6e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d050      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d04c      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d048      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	2b18      	cmp	r3, #24
 8006d40:	d044      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d040      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	2b28      	cmp	r3, #40	@ 0x28
 8006d50:	d03c      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	2b30      	cmp	r3, #48	@ 0x30
 8006d58:	d038      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	2b38      	cmp	r3, #56	@ 0x38
 8006d60:	d034      	beq.n	8006dcc <HAL_SPI_Init+0x2c8>
 8006d62:	f240 1155 	movw	r1, #341	@ 0x155
 8006d66:	4861      	ldr	r0, [pc, #388]	@ (8006eec <HAL_SPI_Init+0x3e8>)
 8006d68:	f7fa fea2 	bl	8001ab0 <assert_failed>
 8006d6c:	e02e      	b.n	8006dcc <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	61da      	str	r2, [r3, #28]
 8006d74:	e02a      	b.n	8006dcc <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d020      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d01c      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d018      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	2b18      	cmp	r3, #24
 8006d94:	d014      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d010      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	2b28      	cmp	r3, #40	@ 0x28
 8006da4:	d00c      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b30      	cmp	r3, #48	@ 0x30
 8006dac:	d008      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	2b38      	cmp	r3, #56	@ 0x38
 8006db4:	d004      	beq.n	8006dc0 <HAL_SPI_Init+0x2bc>
 8006db6:	f240 115f 	movw	r1, #351	@ 0x15f
 8006dba:	484c      	ldr	r0, [pc, #304]	@ (8006eec <HAL_SPI_Init+0x3e8>)
 8006dbc:	f7fa fe78 	bl	8001ab0 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fa feea 	bl	8001bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e0c:	d902      	bls.n	8006e14 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e002      	b.n	8006e1a <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_Init+0x330>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e2c:	d002      	beq.n	8006e34 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e76:	ea42 0103 	orr.w	r1, r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	f003 0204 	and.w	r2, r3, #4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006eb0:	ea42 0103 	orr.w	r1, r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	080141f8 	.word	0x080141f8

08006ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0dc      	b.n	80070bc <HAL_TIM_Base_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a6f      	ldr	r2, [pc, #444]	@ (80070c4 <HAL_TIM_Base_Init+0x1d4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d031      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f14:	d02c      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a6b      	ldr	r2, [pc, #428]	@ (80070c8 <HAL_TIM_Base_Init+0x1d8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d027      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a69      	ldr	r2, [pc, #420]	@ (80070cc <HAL_TIM_Base_Init+0x1dc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d022      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a68      	ldr	r2, [pc, #416]	@ (80070d0 <HAL_TIM_Base_Init+0x1e0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d01d      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a66      	ldr	r2, [pc, #408]	@ (80070d4 <HAL_TIM_Base_Init+0x1e4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d018      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a65      	ldr	r2, [pc, #404]	@ (80070d8 <HAL_TIM_Base_Init+0x1e8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a63      	ldr	r2, [pc, #396]	@ (80070dc <HAL_TIM_Base_Init+0x1ec>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00e      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a62      	ldr	r2, [pc, #392]	@ (80070e0 <HAL_TIM_Base_Init+0x1f0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d009      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a60      	ldr	r2, [pc, #384]	@ (80070e4 <HAL_TIM_Base_Init+0x1f4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_TIM_Base_Init+0x80>
 8006f66:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8006f6a:	485f      	ldr	r0, [pc, #380]	@ (80070e8 <HAL_TIM_Base_Init+0x1f8>)
 8006f6c:	f7fa fda0 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d014      	beq.n	8006fa2 <HAL_TIM_Base_Init+0xb2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d010      	beq.n	8006fa2 <HAL_TIM_Base_Init+0xb2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d00c      	beq.n	8006fa2 <HAL_TIM_Base_Init+0xb2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b40      	cmp	r3, #64	@ 0x40
 8006f8e:	d008      	beq.n	8006fa2 <HAL_TIM_Base_Init+0xb2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b60      	cmp	r3, #96	@ 0x60
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIM_Base_Init+0xb2>
 8006f98:	f240 1123 	movw	r1, #291	@ 0x123
 8006f9c:	4852      	ldr	r0, [pc, #328]	@ (80070e8 <HAL_TIM_Base_Init+0x1f8>)
 8006f9e:	f7fa fd87 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIM_Base_Init+0xd8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIM_Base_Init+0xd8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIM_Base_Init+0xd8>
 8006fbe:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8006fc2:	4849      	ldr	r0, [pc, #292]	@ (80070e8 <HAL_TIM_Base_Init+0x1f8>)
 8006fc4:	f7fa fd74 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d00f      	beq.n	8006ff2 <HAL_TIM_Base_Init+0x102>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <HAL_TIM_Base_Init+0xf8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe2:	d201      	bcs.n	8006fe8 <HAL_TIM_Base_Init+0xf8>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <HAL_TIM_Base_Init+0xfa>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	e006      	b.n	8007000 <HAL_TIM_Base_Init+0x110>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <HAL_TIM_Base_Init+0x11e>
 8007004:	f240 1125 	movw	r1, #293	@ 0x125
 8007008:	4837      	ldr	r0, [pc, #220]	@ (80070e8 <HAL_TIM_Base_Init+0x1f8>)
 800700a:	f7fa fd51 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <HAL_TIM_Base_Init+0x138>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b80      	cmp	r3, #128	@ 0x80
 800701c:	d004      	beq.n	8007028 <HAL_TIM_Base_Init+0x138>
 800701e:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8007022:	4831      	ldr	r0, [pc, #196]	@ (80070e8 <HAL_TIM_Base_Init+0x1f8>)
 8007024:	f7fa fd44 	bl	8001ab0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_TIM_Base_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fb f929 	bl	8002294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f001 ffb7 	bl	8008fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40001000 	.word	0x40001000
 80070d4:	40001400 	.word	0x40001400
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800
 80070e8:	08014230 	.word	0x08014230

080070ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a45      	ldr	r2, [pc, #276]	@ (8007210 <HAL_TIM_Base_Start_IT+0x124>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d031      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007106:	d02c      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a41      	ldr	r2, [pc, #260]	@ (8007214 <HAL_TIM_Base_Start_IT+0x128>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d027      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a40      	ldr	r2, [pc, #256]	@ (8007218 <HAL_TIM_Base_Start_IT+0x12c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d022      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a3e      	ldr	r2, [pc, #248]	@ (800721c <HAL_TIM_Base_Start_IT+0x130>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01d      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a3d      	ldr	r2, [pc, #244]	@ (8007220 <HAL_TIM_Base_Start_IT+0x134>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d018      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a3b      	ldr	r2, [pc, #236]	@ (8007224 <HAL_TIM_Base_Start_IT+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a3a      	ldr	r2, [pc, #232]	@ (8007228 <HAL_TIM_Base_Start_IT+0x13c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00e      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a38      	ldr	r2, [pc, #224]	@ (800722c <HAL_TIM_Base_Start_IT+0x140>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d009      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a37      	ldr	r2, [pc, #220]	@ (8007230 <HAL_TIM_Base_Start_IT+0x144>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d004      	beq.n	8007162 <HAL_TIM_Base_Start_IT+0x76>
 8007158:	f240 11df 	movw	r1, #479	@ 0x1df
 800715c:	4835      	ldr	r0, [pc, #212]	@ (8007234 <HAL_TIM_Base_Start_IT+0x148>)
 800715e:	f7fa fca7 	bl	8001ab0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d001      	beq.n	8007172 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e04a      	b.n	8007208 <HAL_TIM_Base_Start_IT+0x11c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a20      	ldr	r2, [pc, #128]	@ (8007210 <HAL_TIM_Base_Start_IT+0x124>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xda>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719c:	d013      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xda>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007214 <HAL_TIM_Base_Start_IT+0x128>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xda>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <HAL_TIM_Base_Start_IT+0x12c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xda>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007224 <HAL_TIM_Base_Start_IT+0x138>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xda>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a19      	ldr	r2, [pc, #100]	@ (8007228 <HAL_TIM_Base_Start_IT+0x13c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d115      	bne.n	80071f2 <HAL_TIM_Base_Start_IT+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007238 <HAL_TIM_Base_Start_IT+0x14c>)
 80071ce:	4013      	ands	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d015      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x118>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071de:	d011      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x118>
    {
      __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	e008      	b.n	8007204 <HAL_TIM_Base_Start_IT+0x118>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e000      	b.n	8007206 <HAL_TIM_Base_Start_IT+0x11a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40001000 	.word	0x40001000
 8007220:	40001400 	.word	0x40001400
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800
 8007234:	08014230 	.word	0x08014230
 8007238:	00010007 	.word	0x00010007

0800723c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0dc      	b.n	8007408 <HAL_TIM_PWM_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a6f      	ldr	r2, [pc, #444]	@ (8007410 <HAL_TIM_PWM_Init+0x1d4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d031      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007260:	d02c      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a6b      	ldr	r2, [pc, #428]	@ (8007414 <HAL_TIM_PWM_Init+0x1d8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d027      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a69      	ldr	r2, [pc, #420]	@ (8007418 <HAL_TIM_PWM_Init+0x1dc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d022      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a68      	ldr	r2, [pc, #416]	@ (800741c <HAL_TIM_PWM_Init+0x1e0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d01d      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a66      	ldr	r2, [pc, #408]	@ (8007420 <HAL_TIM_PWM_Init+0x1e4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d018      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a65      	ldr	r2, [pc, #404]	@ (8007424 <HAL_TIM_PWM_Init+0x1e8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d013      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a63      	ldr	r2, [pc, #396]	@ (8007428 <HAL_TIM_PWM_Init+0x1ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00e      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a62      	ldr	r2, [pc, #392]	@ (800742c <HAL_TIM_PWM_Init+0x1f0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d009      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a60      	ldr	r2, [pc, #384]	@ (8007430 <HAL_TIM_PWM_Init+0x1f4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d004      	beq.n	80072bc <HAL_TIM_PWM_Init+0x80>
 80072b2:	f240 513f 	movw	r1, #1343	@ 0x53f
 80072b6:	485f      	ldr	r0, [pc, #380]	@ (8007434 <HAL_TIM_PWM_Init+0x1f8>)
 80072b8:	f7fa fbfa 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d014      	beq.n	80072ee <HAL_TIM_PWM_Init+0xb2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d010      	beq.n	80072ee <HAL_TIM_PWM_Init+0xb2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d00c      	beq.n	80072ee <HAL_TIM_PWM_Init+0xb2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b40      	cmp	r3, #64	@ 0x40
 80072da:	d008      	beq.n	80072ee <HAL_TIM_PWM_Init+0xb2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b60      	cmp	r3, #96	@ 0x60
 80072e2:	d004      	beq.n	80072ee <HAL_TIM_PWM_Init+0xb2>
 80072e4:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 80072e8:	4852      	ldr	r0, [pc, #328]	@ (8007434 <HAL_TIM_PWM_Init+0x1f8>)
 80072ea:	f7fa fbe1 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00e      	beq.n	8007314 <HAL_TIM_PWM_Init+0xd8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fe:	d009      	beq.n	8007314 <HAL_TIM_PWM_Init+0xd8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007308:	d004      	beq.n	8007314 <HAL_TIM_PWM_Init+0xd8>
 800730a:	f240 5141 	movw	r1, #1345	@ 0x541
 800730e:	4849      	ldr	r0, [pc, #292]	@ (8007434 <HAL_TIM_PWM_Init+0x1f8>)
 8007310:	f7fa fbce 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731c:	d00f      	beq.n	800733e <HAL_TIM_PWM_Init+0x102>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d006      	beq.n	8007334 <HAL_TIM_PWM_Init+0xf8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800732e:	d201      	bcs.n	8007334 <HAL_TIM_PWM_Init+0xf8>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <HAL_TIM_PWM_Init+0xfa>
 8007334:	2300      	movs	r3, #0
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e006      	b.n	800734c <HAL_TIM_PWM_Init+0x110>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	bf14      	ite	ne
 8007346:	2301      	movne	r3, #1
 8007348:	2300      	moveq	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <HAL_TIM_PWM_Init+0x11e>
 8007350:	f240 5142 	movw	r1, #1346	@ 0x542
 8007354:	4837      	ldr	r0, [pc, #220]	@ (8007434 <HAL_TIM_PWM_Init+0x1f8>)
 8007356:	f7fa fbab 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_TIM_PWM_Init+0x138>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b80      	cmp	r3, #128	@ 0x80
 8007368:	d004      	beq.n	8007374 <HAL_TIM_PWM_Init+0x138>
 800736a:	f240 5143 	movw	r1, #1347	@ 0x543
 800736e:	4831      	ldr	r0, [pc, #196]	@ (8007434 <HAL_TIM_PWM_Init+0x1f8>)
 8007370:	f7fa fb9e 	bl	8001ab0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_TIM_PWM_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fa ffa1 	bl	80022d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f001 fe11 	bl	8008fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40001000 	.word	0x40001000
 8007420:	40001400 	.word	0x40001400
 8007424:	40013400 	.word	0x40013400
 8007428:	40014000 	.word	0x40014000
 800742c:	40014400 	.word	0x40014400
 8007430:	40014800 	.word	0x40014800
 8007434:	08014230 	.word	0x08014230

08007438 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a83      	ldr	r2, [pc, #524]	@ (800765c <HAL_TIM_PWM_Start_DMA+0x224>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d111      	bne.n	8007478 <HAL_TIM_PWM_Start_DMA+0x40>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d073      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d070      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b08      	cmp	r3, #8
 8007464:	d06d      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b0c      	cmp	r3, #12
 800746a:	d06a      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b10      	cmp	r3, #16
 8007470:	d067      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b14      	cmp	r3, #20
 8007476:	d064      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007480:	d10b      	bne.n	800749a <HAL_TIM_PWM_Start_DMA+0x62>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d05c      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d059      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d056      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b0c      	cmp	r3, #12
 8007498:	d053      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a70      	ldr	r2, [pc, #448]	@ (8007660 <HAL_TIM_PWM_Start_DMA+0x228>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10b      	bne.n	80074bc <HAL_TIM_PWM_Start_DMA+0x84>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04b      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d048      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d045      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b0c      	cmp	r3, #12
 80074ba:	d042      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a68      	ldr	r2, [pc, #416]	@ (8007664 <HAL_TIM_PWM_Start_DMA+0x22c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d10b      	bne.n	80074de <HAL_TIM_PWM_Start_DMA+0xa6>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d03a      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d037      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d034      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d031      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a61      	ldr	r2, [pc, #388]	@ (8007668 <HAL_TIM_PWM_Start_DMA+0x230>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d111      	bne.n	800750c <HAL_TIM_PWM_Start_DMA+0xd4>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d029      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d026      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d023      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b0c      	cmp	r3, #12
 80074fe:	d020      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b10      	cmp	r3, #16
 8007504:	d01d      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b14      	cmp	r3, #20
 800750a:	d01a      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a56      	ldr	r2, [pc, #344]	@ (800766c <HAL_TIM_PWM_Start_DMA+0x234>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d105      	bne.n	8007522 <HAL_TIM_PWM_Start_DMA+0xea>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00f      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a52      	ldr	r2, [pc, #328]	@ (8007670 <HAL_TIM_PWM_Start_DMA+0x238>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d102      	bne.n	8007532 <HAL_TIM_PWM_Start_DMA+0xfa>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a4f      	ldr	r2, [pc, #316]	@ (8007674 <HAL_TIM_PWM_Start_DMA+0x23c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <HAL_TIM_PWM_Start_DMA+0x116>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <HAL_TIM_PWM_Start_DMA+0x116>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b10      	cmp	r3, #16
 8007546:	d002      	beq.n	800754e <HAL_TIM_PWM_Start_DMA+0x116>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b14      	cmp	r3, #20
 800754c:	d104      	bne.n	8007558 <HAL_TIM_PWM_Start_DMA+0x120>
 800754e:	f240 61cf 	movw	r1, #1743	@ 0x6cf
 8007552:	4849      	ldr	r0, [pc, #292]	@ (8007678 <HAL_TIM_PWM_Start_DMA+0x240>)
 8007554:	f7fa faac 	bl	8001ab0 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <HAL_TIM_PWM_Start_DMA+0x13a>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	bf0c      	ite	eq
 800756a:	2301      	moveq	r3, #1
 800756c:	2300      	movne	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	e03c      	b.n	80075ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d109      	bne.n	800758c <HAL_TIM_PWM_Start_DMA+0x154>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	bf0c      	ite	eq
 8007584:	2301      	moveq	r3, #1
 8007586:	2300      	movne	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	e02f      	b.n	80075ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b08      	cmp	r3, #8
 8007590:	d109      	bne.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x16e>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	bf0c      	ite	eq
 800759e:	2301      	moveq	r3, #1
 80075a0:	2300      	movne	r3, #0
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	e022      	b.n	80075ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d109      	bne.n	80075c0 <HAL_TIM_PWM_Start_DMA+0x188>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e015      	b.n	80075ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d109      	bne.n	80075da <HAL_TIM_PWM_Start_DMA+0x1a2>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	bf0c      	ite	eq
 80075d2:	2301      	moveq	r3, #1
 80075d4:	2300      	movne	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	e008      	b.n	80075ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_TIM_PWM_Start_DMA+0x1bc>
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
 80075f2:	e1b5      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <HAL_TIM_PWM_Start_DMA+0x1d6>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b01      	cmp	r3, #1
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	e04c      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x270>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b04      	cmp	r3, #4
 8007612:	d109      	bne.n	8007628 <HAL_TIM_PWM_Start_DMA+0x1f0>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	e03f      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x270>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b08      	cmp	r3, #8
 800762c:	d109      	bne.n	8007642 <HAL_TIM_PWM_Start_DMA+0x20a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b01      	cmp	r3, #1
 8007638:	bf0c      	ite	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	2300      	movne	r3, #0
 800763e:	b2db      	uxtb	r3, r3
 8007640:	e032      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x270>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b0c      	cmp	r3, #12
 8007646:	d119      	bne.n	800767c <HAL_TIM_PWM_Start_DMA+0x244>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	e025      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x270>
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40013400 	.word	0x40013400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	08014230 	.word	0x08014230
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b10      	cmp	r3, #16
 8007680:	d109      	bne.n	8007696 <HAL_TIM_PWM_Start_DMA+0x25e>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e008      	b.n	80076a8 <HAL_TIM_PWM_Start_DMA+0x270>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d034      	beq.n	8007716 <HAL_TIM_PWM_Start_DMA+0x2de>
  {
    if ((pData == NULL) || (Length == 0U))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_TIM_PWM_Start_DMA+0x280>
 80076b2:	887b      	ldrh	r3, [r7, #2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_TIM_PWM_Start_DMA+0x284>
    {
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e151      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_TIM_PWM_Start_DMA+0x294>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ca:	e026      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d104      	bne.n	80076dc <HAL_TIM_PWM_Start_DMA+0x2a4>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2202      	movs	r2, #2
 80076d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076da:	e01e      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d104      	bne.n	80076ec <HAL_TIM_PWM_Start_DMA+0x2b4>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ea:	e016      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d104      	bne.n	80076fc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076fa:	e00e      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b10      	cmp	r3, #16
 8007700:	d104      	bne.n	800770c <HAL_TIM_PWM_Start_DMA+0x2d4>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2202      	movs	r2, #2
 8007706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770a:	e006      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007714:	e001      	b.n	800771a <HAL_TIM_PWM_Start_DMA+0x2e2>
    }
  }
  else
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e122      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
  }

  switch (Channel)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b0c      	cmp	r3, #12
 800771e:	f200 80ad 	bhi.w	800787c <HAL_TIM_PWM_Start_DMA+0x444>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <HAL_TIM_PWM_Start_DMA+0x2f0>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800775d 	.word	0x0800775d
 800772c:	0800787d 	.word	0x0800787d
 8007730:	0800787d 	.word	0x0800787d
 8007734:	0800787d 	.word	0x0800787d
 8007738:	080077a5 	.word	0x080077a5
 800773c:	0800787d 	.word	0x0800787d
 8007740:	0800787d 	.word	0x0800787d
 8007744:	0800787d 	.word	0x0800787d
 8007748:	080077ed 	.word	0x080077ed
 800774c:	0800787d 	.word	0x0800787d
 8007750:	0800787d 	.word	0x0800787d
 8007754:	0800787d 	.word	0x0800787d
 8007758:	08007835 	.word	0x08007835
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	4a81      	ldr	r2, [pc, #516]	@ (8007968 <HAL_TIM_PWM_Start_DMA+0x530>)
 8007762:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	4a80      	ldr	r2, [pc, #512]	@ (800796c <HAL_TIM_PWM_Start_DMA+0x534>)
 800776a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	4a7f      	ldr	r2, [pc, #508]	@ (8007970 <HAL_TIM_PWM_Start_DMA+0x538>)
 8007772:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3334      	adds	r3, #52	@ 0x34
 8007780:	461a      	mov	r2, r3
 8007782:	887b      	ldrh	r3, [r7, #2]
 8007784:	f7fb fb3a 	bl	8002dfc <HAL_DMA_Start_IT>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_TIM_PWM_Start_DMA+0x35a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e0e6      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077a0:	60da      	str	r2, [r3, #12]
      break;
 80077a2:	e06e      	b.n	8007882 <HAL_TIM_PWM_Start_DMA+0x44a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	4a6f      	ldr	r2, [pc, #444]	@ (8007968 <HAL_TIM_PWM_Start_DMA+0x530>)
 80077aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b0:	4a6e      	ldr	r2, [pc, #440]	@ (800796c <HAL_TIM_PWM_Start_DMA+0x534>)
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b8:	4a6d      	ldr	r2, [pc, #436]	@ (8007970 <HAL_TIM_PWM_Start_DMA+0x538>)
 80077ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3338      	adds	r3, #56	@ 0x38
 80077c8:	461a      	mov	r2, r3
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	f7fb fb16 	bl	8002dfc <HAL_DMA_Start_IT>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_TIM_PWM_Start_DMA+0x3a2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e0c2      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077e8:	60da      	str	r2, [r3, #12]
      break;
 80077ea:	e04a      	b.n	8007882 <HAL_TIM_PWM_Start_DMA+0x44a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4a5d      	ldr	r2, [pc, #372]	@ (8007968 <HAL_TIM_PWM_Start_DMA+0x530>)
 80077f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a5c      	ldr	r2, [pc, #368]	@ (800796c <HAL_TIM_PWM_Start_DMA+0x534>)
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	4a5b      	ldr	r2, [pc, #364]	@ (8007970 <HAL_TIM_PWM_Start_DMA+0x538>)
 8007802:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	333c      	adds	r3, #60	@ 0x3c
 8007810:	461a      	mov	r2, r3
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	f7fb faf2 	bl	8002dfc <HAL_DMA_Start_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_TIM_PWM_Start_DMA+0x3ea>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e09e      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007830:	60da      	str	r2, [r3, #12]
      break;
 8007832:	e026      	b.n	8007882 <HAL_TIM_PWM_Start_DMA+0x44a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007838:	4a4b      	ldr	r2, [pc, #300]	@ (8007968 <HAL_TIM_PWM_Start_DMA+0x530>)
 800783a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007840:	4a4a      	ldr	r2, [pc, #296]	@ (800796c <HAL_TIM_PWM_Start_DMA+0x534>)
 8007842:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007848:	4a49      	ldr	r2, [pc, #292]	@ (8007970 <HAL_TIM_PWM_Start_DMA+0x538>)
 800784a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3340      	adds	r3, #64	@ 0x40
 8007858:	461a      	mov	r2, r3
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	f7fb face 	bl	8002dfc <HAL_DMA_Start_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_TIM_PWM_Start_DMA+0x432>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e07a      	b.n	8007960 <HAL_TIM_PWM_Start_DMA+0x528>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007878:	60da      	str	r2, [r3, #12]
      break;
 800787a:	e002      	b.n	8007882 <HAL_TIM_PWM_Start_DMA+0x44a>
    }

    default:
      status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
      break;
 8007880:	bf00      	nop
  }

  if (status == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d16a      	bne.n	800795e <HAL_TIM_PWM_Start_DMA+0x526>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2201      	movs	r2, #1
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	4618      	mov	r0, r3
 8007892:	f002 f86b 	bl	800996c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a36      	ldr	r2, [pc, #216]	@ (8007974 <HAL_TIM_PWM_Start_DMA+0x53c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <HAL_TIM_PWM_Start_DMA+0x490>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a34      	ldr	r2, [pc, #208]	@ (8007978 <HAL_TIM_PWM_Start_DMA+0x540>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00e      	beq.n	80078c8 <HAL_TIM_PWM_Start_DMA+0x490>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a33      	ldr	r2, [pc, #204]	@ (800797c <HAL_TIM_PWM_Start_DMA+0x544>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d009      	beq.n	80078c8 <HAL_TIM_PWM_Start_DMA+0x490>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a31      	ldr	r2, [pc, #196]	@ (8007980 <HAL_TIM_PWM_Start_DMA+0x548>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <HAL_TIM_PWM_Start_DMA+0x490>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a30      	ldr	r2, [pc, #192]	@ (8007984 <HAL_TIM_PWM_Start_DMA+0x54c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_PWM_Start_DMA+0x494>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <HAL_TIM_PWM_Start_DMA+0x496>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d007      	beq.n	80078e2 <HAL_TIM_PWM_Start_DMA+0x4aa>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a23      	ldr	r2, [pc, #140]	@ (8007974 <HAL_TIM_PWM_Start_DMA+0x53c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <HAL_TIM_PWM_Start_DMA+0x4e6>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f4:	d013      	beq.n	800791e <HAL_TIM_PWM_Start_DMA+0x4e6>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a23      	ldr	r2, [pc, #140]	@ (8007988 <HAL_TIM_PWM_Start_DMA+0x550>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_TIM_PWM_Start_DMA+0x4e6>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a21      	ldr	r2, [pc, #132]	@ (800798c <HAL_TIM_PWM_Start_DMA+0x554>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_TIM_PWM_Start_DMA+0x4e6>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1a      	ldr	r2, [pc, #104]	@ (8007978 <HAL_TIM_PWM_Start_DMA+0x540>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_TIM_PWM_Start_DMA+0x4e6>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a18      	ldr	r2, [pc, #96]	@ (800797c <HAL_TIM_PWM_Start_DMA+0x544>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d115      	bne.n	800794a <HAL_TIM_PWM_Start_DMA+0x512>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	4b1a      	ldr	r3, [pc, #104]	@ (8007990 <HAL_TIM_PWM_Start_DMA+0x558>)
 8007926:	4013      	ands	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b06      	cmp	r3, #6
 800792e:	d015      	beq.n	800795c <HAL_TIM_PWM_Start_DMA+0x524>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007936:	d011      	beq.n	800795c <HAL_TIM_PWM_Start_DMA+0x524>
      {
        __HAL_TIM_ENABLE(htim);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007948:	e008      	b.n	800795c <HAL_TIM_PWM_Start_DMA+0x524>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e000      	b.n	800795e <HAL_TIM_PWM_Start_DMA+0x526>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	08008eb7 	.word	0x08008eb7
 800796c:	08008f5f 	.word	0x08008f5f
 8007970:	08008e25 	.word	0x08008e25
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	00010007 	.word	0x00010007

08007994 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a83      	ldr	r2, [pc, #524]	@ (8007bb4 <HAL_TIM_PWM_Stop_DMA+0x220>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d111      	bne.n	80079d0 <HAL_TIM_PWM_Stop_DMA+0x3c>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d073      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d070      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	d06d      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b0c      	cmp	r3, #12
 80079c2:	d06a      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b10      	cmp	r3, #16
 80079c8:	d067      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b14      	cmp	r3, #20
 80079ce:	d064      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d8:	d10b      	bne.n	80079f2 <HAL_TIM_PWM_Stop_DMA+0x5e>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05c      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d059      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d056      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b0c      	cmp	r3, #12
 80079f0:	d053      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a70      	ldr	r2, [pc, #448]	@ (8007bb8 <HAL_TIM_PWM_Stop_DMA+0x224>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d10b      	bne.n	8007a14 <HAL_TIM_PWM_Stop_DMA+0x80>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d04b      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d048      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d045      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b0c      	cmp	r3, #12
 8007a12:	d042      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a68      	ldr	r2, [pc, #416]	@ (8007bbc <HAL_TIM_PWM_Stop_DMA+0x228>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10b      	bne.n	8007a36 <HAL_TIM_PWM_Stop_DMA+0xa2>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d03a      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d037      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d034      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b0c      	cmp	r3, #12
 8007a34:	d031      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a61      	ldr	r2, [pc, #388]	@ (8007bc0 <HAL_TIM_PWM_Stop_DMA+0x22c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d111      	bne.n	8007a64 <HAL_TIM_PWM_Stop_DMA+0xd0>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d029      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d026      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d023      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	d020      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d01d      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b14      	cmp	r3, #20
 8007a62:	d01a      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a56      	ldr	r2, [pc, #344]	@ (8007bc4 <HAL_TIM_PWM_Stop_DMA+0x230>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d105      	bne.n	8007a7a <HAL_TIM_PWM_Stop_DMA+0xe6>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d012      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d00f      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a52      	ldr	r2, [pc, #328]	@ (8007bc8 <HAL_TIM_PWM_Stop_DMA+0x234>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d102      	bne.n	8007a8a <HAL_TIM_PWM_Stop_DMA+0xf6>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a4f      	ldr	r2, [pc, #316]	@ (8007bcc <HAL_TIM_PWM_Stop_DMA+0x238>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d108      	bne.n	8007aa6 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d002      	beq.n	8007aa6 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b14      	cmp	r3, #20
 8007aa4:	d104      	bne.n	8007ab0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8007aa6:	f44f 61ee 	mov.w	r1, #1904	@ 0x770
 8007aaa:	4849      	ldr	r0, [pc, #292]	@ (8007bd0 <HAL_TIM_PWM_Stop_DMA+0x23c>)
 8007aac:	f7fa f800 	bl	8001ab0 <assert_failed>

  switch (Channel)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b0c      	cmp	r3, #12
 8007ab4:	d854      	bhi.n	8007b60 <HAL_TIM_PWM_Stop_DMA+0x1cc>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <HAL_TIM_PWM_Stop_DMA+0x128>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007b61 	.word	0x08007b61
 8007ac4:	08007b61 	.word	0x08007b61
 8007ac8:	08007b61 	.word	0x08007b61
 8007acc:	08007b0d 	.word	0x08007b0d
 8007ad0:	08007b61 	.word	0x08007b61
 8007ad4:	08007b61 	.word	0x08007b61
 8007ad8:	08007b61 	.word	0x08007b61
 8007adc:	08007b29 	.word	0x08007b29
 8007ae0:	08007b61 	.word	0x08007b61
 8007ae4:	08007b61 	.word	0x08007b61
 8007ae8:	08007b61 	.word	0x08007b61
 8007aec:	08007b45 	.word	0x08007b45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb fa03 	bl	8002f10 <HAL_DMA_Abort_IT>
      break;
 8007b0a:	e02c      	b.n	8007b66 <HAL_TIM_PWM_Stop_DMA+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fb f9f5 	bl	8002f10 <HAL_DMA_Abort_IT>
      break;
 8007b26:	e01e      	b.n	8007b66 <HAL_TIM_PWM_Stop_DMA+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fb f9e7 	bl	8002f10 <HAL_DMA_Abort_IT>
      break;
 8007b42:	e010      	b.n	8007b66 <HAL_TIM_PWM_Stop_DMA+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fb f9d9 	bl	8002f10 <HAL_DMA_Abort_IT>
      break;
 8007b5e:	e002      	b.n	8007b66 <HAL_TIM_PWM_Stop_DMA+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
      break;
 8007b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 8092 	bne.w	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fef8 	bl	800996c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb4 <HAL_TIM_PWM_Stop_DMA+0x220>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <HAL_TIM_PWM_Stop_DMA+0x21a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc0 <HAL_TIM_PWM_Stop_DMA+0x22c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIM_PWM_Stop_DMA+0x21a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0b      	ldr	r2, [pc, #44]	@ (8007bc4 <HAL_TIM_PWM_Stop_DMA+0x230>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIM_PWM_Stop_DMA+0x21a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc8 <HAL_TIM_PWM_Stop_DMA+0x234>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_PWM_Stop_DMA+0x21a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a08      	ldr	r2, [pc, #32]	@ (8007bcc <HAL_TIM_PWM_Stop_DMA+0x238>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d112      	bne.n	8007bd4 <HAL_TIM_PWM_Stop_DMA+0x240>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e011      	b.n	8007bd6 <HAL_TIM_PWM_Stop_DMA+0x242>
 8007bb2:	bf00      	nop
 8007bb4:	40012c00 	.word	0x40012c00
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40013400 	.word	0x40013400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	08014230 	.word	0x08014230
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <HAL_TIM_PWM_Stop_DMA+0x276>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a1a      	ldr	r2, [r3, #32]
 8007be0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10f      	bne.n	8007c0a <HAL_TIM_PWM_Stop_DMA+0x276>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <HAL_TIM_PWM_Stop_DMA+0x276>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10f      	bne.n	8007c3a <HAL_TIM_PWM_Stop_DMA+0x2a6>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d107      	bne.n	8007c3a <HAL_TIM_PWM_Stop_DMA+0x2a6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0201 	bic.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_PWM_Stop_DMA+0x2b6>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c48:	e023      	b.n	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d104      	bne.n	8007c5a <HAL_TIM_PWM_Stop_DMA+0x2c6>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c58:	e01b      	b.n	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d104      	bne.n	8007c6a <HAL_TIM_PWM_Stop_DMA+0x2d6>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c68:	e013      	b.n	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b0c      	cmp	r3, #12
 8007c6e:	d104      	bne.n	8007c7a <HAL_TIM_PWM_Stop_DMA+0x2e6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c78:	e00b      	b.n	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b10      	cmp	r3, #16
 8007c7e:	d104      	bne.n	8007c8a <HAL_TIM_PWM_Stop_DMA+0x2f6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c88:	e003      	b.n	8007c92 <HAL_TIM_PWM_Stop_DMA+0x2fe>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d020      	beq.n	8007d00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0202 	mvn.w	r2, #2
 8007cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f874 	bl	8008dd4 <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 f866 	bl	8008dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7f8 fd05 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d020      	beq.n	8007d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01b      	beq.n	8007d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0204 	mvn.w	r2, #4
 8007d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f84e 	bl	8008dd4 <HAL_TIM_IC_CaptureCallback>
 8007d38:	e005      	b.n	8007d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 f840 	bl	8008dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7f8 fcdf 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d020      	beq.n	8007d98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01b      	beq.n	8007d98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0208 	mvn.w	r2, #8
 8007d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 f828 	bl	8008dd4 <HAL_TIM_IC_CaptureCallback>
 8007d84:	e005      	b.n	8007d92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 f81a 	bl	8008dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7f8 fcb9 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d020      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01b      	beq.n	8007de4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0210 	mvn.w	r2, #16
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2208      	movs	r2, #8
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 f802 	bl	8008dd4 <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fff4 	bl	8008dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7f8 fc93 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0201 	mvn.w	r2, #1
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 fe3c 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00c      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f002 f8cf 	bl	8009fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d007      	beq.n	8007e5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f002 f8c7 	bl	8009fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00c      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d007      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 ffbf 	bl	8008dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f003 0320 	and.w	r3, r3, #32
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f06f 0220 	mvn.w	r2, #32
 8007e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f002 f88f 	bl	8009fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f002 f89b 	bl	8009ffc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00c      	beq.n	8007eea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f002 f893 	bl	800a010 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f002 f88b 	bl	800a024 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00c      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f002 f883 	bl	800a038 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d013      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d010      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d00d      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d00a      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b14      	cmp	r3, #20
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b3c      	cmp	r3, #60	@ 0x3c
 8007f74:	d004      	beq.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x44>
 8007f76:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8007f7a:	4886      	ldr	r0, [pc, #536]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007f7c:	f7f9 fd98 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b60      	cmp	r3, #96	@ 0x60
 8007f86:	d01c      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b70      	cmp	r3, #112	@ 0x70
 8007f8e:	d018      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a80      	ldr	r2, [pc, #512]	@ (8008198 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a7f      	ldr	r2, [pc, #508]	@ (800819c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a7d      	ldr	r2, [pc, #500]	@ (80081a0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80081a4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007fb8:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8007fbc:	4875      	ldr	r0, [pc, #468]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007fbe:	f7f9 fd77 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d004      	beq.n	8007fdc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007fd2:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 8007fd6:	486f      	ldr	r0, [pc, #444]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007fd8:	f7f9 fd6a 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d008      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007fec:	f241 01f6 	movw	r1, #4342	@ 0x10f6
 8007ff0:	4868      	ldr	r0, [pc, #416]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007ff2:	f7f9 fd5d 	bl	8001ab0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008000:	2302      	movs	r3, #2
 8008002:	e1c3      	b.n	800838c <HAL_TIM_PWM_ConfigChannel+0x450>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b14      	cmp	r3, #20
 8008010:	f200 81b4 	bhi.w	800837c <HAL_TIM_PWM_ConfigChannel+0x440>
 8008014:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008071 	.word	0x08008071
 8008020:	0800837d 	.word	0x0800837d
 8008024:	0800837d 	.word	0x0800837d
 8008028:	0800837d 	.word	0x0800837d
 800802c:	0800810b 	.word	0x0800810b
 8008030:	0800837d 	.word	0x0800837d
 8008034:	0800837d 	.word	0x0800837d
 8008038:	0800837d 	.word	0x0800837d
 800803c:	080081c5 	.word	0x080081c5
 8008040:	0800837d 	.word	0x0800837d
 8008044:	0800837d 	.word	0x0800837d
 8008048:	0800837d 	.word	0x0800837d
 800804c:	08008241 	.word	0x08008241
 8008050:	0800837d 	.word	0x0800837d
 8008054:	0800837d 	.word	0x0800837d
 8008058:	0800837d 	.word	0x0800837d
 800805c:	080082bf 	.word	0x080082bf
 8008060:	0800837d 	.word	0x0800837d
 8008064:	0800837d 	.word	0x0800837d
 8008068:	0800837d 	.word	0x0800837d
 800806c:	0800831d 	.word	0x0800831d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a4c      	ldr	r2, [pc, #304]	@ (80081a8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d027      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008082:	d022      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a48      	ldr	r2, [pc, #288]	@ (80081ac <HAL_TIM_PWM_ConfigChannel+0x270>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01d      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a47      	ldr	r2, [pc, #284]	@ (80081b0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a45      	ldr	r2, [pc, #276]	@ (80081b4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d013      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a44      	ldr	r2, [pc, #272]	@ (80081b8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00e      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a42      	ldr	r2, [pc, #264]	@ (80081bc <HAL_TIM_PWM_ConfigChannel+0x280>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a41      	ldr	r2, [pc, #260]	@ (80081c0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <HAL_TIM_PWM_ConfigChannel+0x18e>
 80080c0:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80080c4:	4833      	ldr	r0, [pc, #204]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80080c6:	f7f9 fcf3 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 f815 	bl	8009100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0208 	orr.w	r2, r2, #8
 80080e4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0204 	bic.w	r2, r2, #4
 80080f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6999      	ldr	r1, [r3, #24]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	619a      	str	r2, [r3, #24]
      break;
 8008108:	e13b      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a26      	ldr	r2, [pc, #152]	@ (80081a8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d01d      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811c:	d018      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a22      	ldr	r2, [pc, #136]	@ (80081ac <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a20      	ldr	r2, [pc, #128]	@ (80081b0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00e      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1f      	ldr	r2, [pc, #124]	@ (80081b4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d009      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d004      	beq.n	8008150 <HAL_TIM_PWM_ConfigChannel+0x214>
 8008146:	f241 1111 	movw	r1, #4369	@ 0x1111
 800814a:	4812      	ldr	r0, [pc, #72]	@ (8008194 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800814c:	f7f9 fcb0 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	4618      	mov	r0, r3
 8008158:	f001 f88c 	bl	8009274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800816a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800817a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6999      	ldr	r1, [r3, #24]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	021a      	lsls	r2, r3, #8
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	619a      	str	r2, [r3, #24]
      break;
 8008190:	e0f7      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
 8008192:	bf00      	nop
 8008194:	08014230 	.word	0x08014230
 8008198:	00010040 	.word	0x00010040
 800819c:	00010050 	.word	0x00010050
 80081a0:	00010060 	.word	0x00010060
 80081a4:	00010070 	.word	0x00010070
 80081a8:	40012c00 	.word	0x40012c00
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40013400 	.word	0x40013400
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a72      	ldr	r2, [pc, #456]	@ (8008394 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d018      	beq.n	8008200 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d6:	d013      	beq.n	8008200 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a6e      	ldr	r2, [pc, #440]	@ (8008398 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00e      	beq.n	8008200 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a6d      	ldr	r2, [pc, #436]	@ (800839c <HAL_TIM_PWM_ConfigChannel+0x460>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d009      	beq.n	8008200 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a6b      	ldr	r2, [pc, #428]	@ (80083a0 <HAL_TIM_PWM_ConfigChannel+0x464>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 80081f6:	f241 1122 	movw	r1, #4386	@ 0x1122
 80081fa:	486a      	ldr	r0, [pc, #424]	@ (80083a4 <HAL_TIM_PWM_ConfigChannel+0x468>)
 80081fc:	f7f9 fc58 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f8e6 	bl	80093d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69da      	ldr	r2, [r3, #28]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0204 	bic.w	r2, r2, #4
 800822a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69d9      	ldr	r1, [r3, #28]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	61da      	str	r2, [r3, #28]
      break;
 800823e:	e0a0      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a53      	ldr	r2, [pc, #332]	@ (8008394 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_TIM_PWM_ConfigChannel+0x340>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008252:	d013      	beq.n	800827c <HAL_TIM_PWM_ConfigChannel+0x340>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a4f      	ldr	r2, [pc, #316]	@ (8008398 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <HAL_TIM_PWM_ConfigChannel+0x340>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a4e      	ldr	r2, [pc, #312]	@ (800839c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_TIM_PWM_ConfigChannel+0x340>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a4c      	ldr	r2, [pc, #304]	@ (80083a0 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_TIM_PWM_ConfigChannel+0x340>
 8008272:	f241 1133 	movw	r1, #4403	@ 0x1133
 8008276:	484b      	ldr	r0, [pc, #300]	@ (80083a4 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008278:	f7f9 fc1a 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	4618      	mov	r0, r3
 8008284:	f001 f95a 	bl	800953c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69da      	ldr	r2, [r3, #28]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008296:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69d9      	ldr	r1, [r3, #28]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	61da      	str	r2, [r3, #28]
      break;
 80082bc:	e061      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a34      	ldr	r2, [pc, #208]	@ (8008394 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a34      	ldr	r2, [pc, #208]	@ (80083a0 <HAL_TIM_PWM_ConfigChannel+0x464>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80082d2:	f241 1144 	movw	r1, #4420	@ 0x1144
 80082d6:	4833      	ldr	r0, [pc, #204]	@ (80083a4 <HAL_TIM_PWM_ConfigChannel+0x468>)
 80082d8:	f7f9 fbea 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 f9dc 	bl	80096a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0208 	orr.w	r2, r2, #8
 80082f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0204 	bic.w	r2, r2, #4
 8008306:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800831a:	e032      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIM_PWM_ConfigChannel+0x3fe>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1d      	ldr	r2, [pc, #116]	@ (80083a0 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIM_PWM_ConfigChannel+0x3fe>
 8008330:	f241 1155 	movw	r1, #4437	@ 0x1155
 8008334:	481b      	ldr	r0, [pc, #108]	@ (80083a4 <HAL_TIM_PWM_ConfigChannel+0x468>)
 8008336:	f7f9 fbbb 	bl	8001ab0 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fa11 	bl	8009768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008354:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008364:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	021a      	lsls	r2, r3, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800837a:	e002      	b.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    default:
      status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
      break;
 8008380:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40000400 	.word	0x40000400
 800839c:	40000800 	.word	0x40000800
 80083a0:	40013400 	.word	0x40013400
 80083a4:	08014230 	.word	0x08014230

080083a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d102      	bne.n	80083c6 <HAL_TIM_ConfigClockSource+0x1e>
 80083c0:	2302      	movs	r3, #2
 80083c2:	f000 bcee 	b.w	8008da2 <HAL_TIM_ConfigClockSource+0x9fa>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2202      	movs	r2, #2
 80083d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083de:	d042      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b70      	cmp	r3, #112	@ 0x70
 80083e6:	d03e      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083f0:	d039      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d035      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b50      	cmp	r3, #80	@ 0x50
 8008400:	d031      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b60      	cmp	r3, #96	@ 0x60
 8008408:	d02d      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d029      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b10      	cmp	r3, #16
 8008418:	d025      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b20      	cmp	r3, #32
 8008420:	d021      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b30      	cmp	r3, #48	@ 0x30
 8008428:	d01d      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008432:	d018      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a67      	ldr	r2, [pc, #412]	@ (80085d8 <HAL_TIM_ConfigClockSource+0x230>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a66      	ldr	r2, [pc, #408]	@ (80085dc <HAL_TIM_ConfigClockSource+0x234>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a64      	ldr	r2, [pc, #400]	@ (80085e0 <HAL_TIM_ConfigClockSource+0x238>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a63      	ldr	r2, [pc, #396]	@ (80085e4 <HAL_TIM_ConfigClockSource+0x23c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xbe>
 800845c:	f241 51c5 	movw	r1, #5573	@ 0x15c5
 8008460:	4861      	ldr	r0, [pc, #388]	@ (80085e8 <HAL_TIM_ConfigClockSource+0x240>)
 8008462:	f7f9 fb25 	bl	8001ab0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008474:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008478:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008480:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a55      	ldr	r2, [pc, #340]	@ (80085e4 <HAL_TIM_ConfigClockSource+0x23c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	f000 82b1 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 8008496:	4a53      	ldr	r2, [pc, #332]	@ (80085e4 <HAL_TIM_ConfigClockSource+0x23c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f200 8475 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 800849e:	4a50      	ldr	r2, [pc, #320]	@ (80085e0 <HAL_TIM_ConfigClockSource+0x238>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	f000 82a9 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 80084a6:	4a4e      	ldr	r2, [pc, #312]	@ (80085e0 <HAL_TIM_ConfigClockSource+0x238>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	f200 846d 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084ae:	4a4b      	ldr	r2, [pc, #300]	@ (80085dc <HAL_TIM_ConfigClockSource+0x234>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	f000 82a1 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 80084b6:	4a49      	ldr	r2, [pc, #292]	@ (80085dc <HAL_TIM_ConfigClockSource+0x234>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	f200 8465 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084be:	4a46      	ldr	r2, [pc, #280]	@ (80085d8 <HAL_TIM_ConfigClockSource+0x230>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	f000 8299 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 80084c6:	4a44      	ldr	r2, [pc, #272]	@ (80085d8 <HAL_TIM_ConfigClockSource+0x230>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	f200 845d 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084ce:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084d2:	f000 8291 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 80084d6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084da:	f200 8455 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e2:	f000 8105 	beq.w	80086f0 <HAL_TIM_ConfigClockSource+0x348>
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ea:	f200 844d 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f2:	d02f      	beq.n	8008554 <HAL_TIM_ConfigClockSource+0x1ac>
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f8:	f200 8446 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 80084fc:	2b70      	cmp	r3, #112	@ 0x70
 80084fe:	f000 8087 	beq.w	8008610 <HAL_TIM_ConfigClockSource+0x268>
 8008502:	2b70      	cmp	r3, #112	@ 0x70
 8008504:	f200 8440 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 8008508:	2b60      	cmp	r3, #96	@ 0x60
 800850a:	f000 81bd 	beq.w	8008888 <HAL_TIM_ConfigClockSource+0x4e0>
 800850e:	2b60      	cmp	r3, #96	@ 0x60
 8008510:	f200 843a 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 8008514:	2b50      	cmp	r3, #80	@ 0x50
 8008516:	f000 8161 	beq.w	80087dc <HAL_TIM_ConfigClockSource+0x434>
 800851a:	2b50      	cmp	r3, #80	@ 0x50
 800851c:	f200 8434 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 8008520:	2b40      	cmp	r3, #64	@ 0x40
 8008522:	f000 8207 	beq.w	8008934 <HAL_TIM_ConfigClockSource+0x58c>
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	f200 842e 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 800852c:	2b30      	cmp	r3, #48	@ 0x30
 800852e:	f000 8263 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 8008532:	2b30      	cmp	r3, #48	@ 0x30
 8008534:	f200 8428 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 8008538:	2b20      	cmp	r3, #32
 800853a:	f000 825d 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 800853e:	2b20      	cmp	r3, #32
 8008540:	f200 8422 	bhi.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8257 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 800854a:	2b10      	cmp	r3, #16
 800854c:	f000 8254 	beq.w	80089f8 <HAL_TIM_ConfigClockSource+0x650>
 8008550:	f000 bc1a 	b.w	8008d88 <HAL_TIM_ConfigClockSource+0x9e0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a24      	ldr	r2, [pc, #144]	@ (80085ec <HAL_TIM_ConfigClockSource+0x244>)
 800855a:	4293      	cmp	r3, r2
 800855c:	f000 8417 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008568:	f000 8411 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	@ (80085f0 <HAL_TIM_ConfigClockSource+0x248>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 840b 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a1d      	ldr	r2, [pc, #116]	@ (80085f4 <HAL_TIM_ConfigClockSource+0x24c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	f000 8405 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1b      	ldr	r2, [pc, #108]	@ (80085f8 <HAL_TIM_ConfigClockSource+0x250>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f000 83ff 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a19      	ldr	r2, [pc, #100]	@ (80085fc <HAL_TIM_ConfigClockSource+0x254>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f000 83f9 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a17      	ldr	r2, [pc, #92]	@ (8008600 <HAL_TIM_ConfigClockSource+0x258>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f000 83f3 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <HAL_TIM_ConfigClockSource+0x25c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f000 83ed 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a13      	ldr	r2, [pc, #76]	@ (8008608 <HAL_TIM_ConfigClockSource+0x260>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 83e7 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a11      	ldr	r2, [pc, #68]	@ (800860c <HAL_TIM_ConfigClockSource+0x264>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f000 83e1 	beq.w	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 80085cc:	f241 51d1 	movw	r1, #5585	@ 0x15d1
 80085d0:	4805      	ldr	r0, [pc, #20]	@ (80085e8 <HAL_TIM_ConfigClockSource+0x240>)
 80085d2:	f7f9 fa6d 	bl	8001ab0 <assert_failed>
      break;
 80085d6:	e3da      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x9e6>
 80085d8:	00100020 	.word	0x00100020
 80085dc:	00100030 	.word	0x00100030
 80085e0:	00100040 	.word	0x00100040
 80085e4:	00100070 	.word	0x00100070
 80085e8:	08014230 	.word	0x08014230
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40000400 	.word	0x40000400
 80085f4:	40000800 	.word	0x40000800
 80085f8:	40001000 	.word	0x40001000
 80085fc:	40001400 	.word	0x40001400
 8008600:	40013400 	.word	0x40013400
 8008604:	40014000 	.word	0x40014000
 8008608:	40014400 	.word	0x40014400
 800860c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a6c      	ldr	r2, [pc, #432]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x420>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d018      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x2a4>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008622:	d013      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x2a4>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a68      	ldr	r2, [pc, #416]	@ (80087cc <HAL_TIM_ConfigClockSource+0x424>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00e      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x2a4>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a67      	ldr	r2, [pc, #412]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x428>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d009      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x2a4>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a65      	ldr	r2, [pc, #404]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x42c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x2a4>
 8008642:	f241 51d8 	movw	r1, #5592	@ 0x15d8
 8008646:	4864      	ldr	r0, [pc, #400]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 8008648:	f7f9 fa32 	bl	8001ab0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d013      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x2d4>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865c:	d00e      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x2d4>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008666:	d009      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x2d4>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008670:	d004      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x2d4>
 8008672:	f241 51db 	movw	r1, #5595	@ 0x15db
 8008676:	4858      	ldr	r0, [pc, #352]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 8008678:	f7f9 fa1a 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008684:	d014      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x308>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d010      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x308>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x308>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d008      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x308>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b0a      	cmp	r3, #10
 80086a4:	d004      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x308>
 80086a6:	f241 51dc 	movw	r1, #5596	@ 0x15dc
 80086aa:	484b      	ldr	r0, [pc, #300]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 80086ac:	f7f9 fa00 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	2b0f      	cmp	r3, #15
 80086b6:	d904      	bls.n	80086c2 <HAL_TIM_ConfigClockSource+0x31a>
 80086b8:	f241 51dd 	movw	r1, #5597	@ 0x15dd
 80086bc:	4846      	ldr	r0, [pc, #280]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 80086be:	f7f9 f9f7 	bl	8001ab0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086d2:	f001 f92b 	bl	800992c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	609a      	str	r2, [r3, #8]
      break;
 80086ee:	e34f      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a34      	ldr	r2, [pc, #208]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x420>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x384>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008702:	d013      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x384>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a30      	ldr	r2, [pc, #192]	@ (80087cc <HAL_TIM_ConfigClockSource+0x424>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x384>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a2f      	ldr	r2, [pc, #188]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x428>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x384>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2d      	ldr	r2, [pc, #180]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x42c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x384>
 8008722:	f241 51f0 	movw	r1, #5616	@ 0x15f0
 8008726:	482c      	ldr	r0, [pc, #176]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 8008728:	f7f9 f9c2 	bl	8001ab0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d013      	beq.n	800875c <HAL_TIM_ConfigClockSource+0x3b4>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873c:	d00e      	beq.n	800875c <HAL_TIM_ConfigClockSource+0x3b4>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008746:	d009      	beq.n	800875c <HAL_TIM_ConfigClockSource+0x3b4>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008750:	d004      	beq.n	800875c <HAL_TIM_ConfigClockSource+0x3b4>
 8008752:	f241 51f3 	movw	r1, #5619	@ 0x15f3
 8008756:	4820      	ldr	r0, [pc, #128]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 8008758:	f7f9 f9aa 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008764:	d014      	beq.n	8008790 <HAL_TIM_ConfigClockSource+0x3e8>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d010      	beq.n	8008790 <HAL_TIM_ConfigClockSource+0x3e8>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <HAL_TIM_ConfigClockSource+0x3e8>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d008      	beq.n	8008790 <HAL_TIM_ConfigClockSource+0x3e8>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b0a      	cmp	r3, #10
 8008784:	d004      	beq.n	8008790 <HAL_TIM_ConfigClockSource+0x3e8>
 8008786:	f241 51f4 	movw	r1, #5620	@ 0x15f4
 800878a:	4813      	ldr	r0, [pc, #76]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 800878c:	f7f9 f990 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d904      	bls.n	80087a2 <HAL_TIM_ConfigClockSource+0x3fa>
 8008798:	f241 51f5 	movw	r1, #5621	@ 0x15f5
 800879c:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x430>)
 800879e:	f7f9 f987 	bl	8001ab0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087b2:	f001 f8bb 	bl	800992c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087c4:	609a      	str	r2, [r3, #8]
      break;
 80087c6:	e2e3      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40000400 	.word	0x40000400
 80087d0:	40000800 	.word	0x40000800
 80087d4:	40013400 	.word	0x40013400
 80087d8:	08014230 	.word	0x08014230
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a7f      	ldr	r2, [pc, #508]	@ (80089e0 <HAL_TIM_ConfigClockSource+0x638>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d01d      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ee:	d018      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7b      	ldr	r2, [pc, #492]	@ (80089e4 <HAL_TIM_ConfigClockSource+0x63c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7a      	ldr	r2, [pc, #488]	@ (80089e8 <HAL_TIM_ConfigClockSource+0x640>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00e      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a78      	ldr	r2, [pc, #480]	@ (80089ec <HAL_TIM_ConfigClockSource+0x644>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d009      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a77      	ldr	r2, [pc, #476]	@ (80089f0 <HAL_TIM_ConfigClockSource+0x648>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d004      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x47a>
 8008818:	f241 6104 	movw	r1, #5636	@ 0x1604
 800881c:	4875      	ldr	r0, [pc, #468]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 800881e:	f7f9 f947 	bl	8001ab0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800882a:	d014      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x4ae>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d010      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x4ae>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00c      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x4ae>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d008      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x4ae>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b0a      	cmp	r3, #10
 800884a:	d004      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x4ae>
 800884c:	f241 6107 	movw	r1, #5639	@ 0x1607
 8008850:	4868      	ldr	r0, [pc, #416]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 8008852:	f7f9 f92d 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d904      	bls.n	8008868 <HAL_TIM_ConfigClockSource+0x4c0>
 800885e:	f241 6108 	movw	r1, #5640	@ 0x1608
 8008862:	4864      	ldr	r0, [pc, #400]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 8008864:	f7f9 f924 	bl	8001ab0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008874:	461a      	mov	r2, r3
 8008876:	f000 ffdd 	bl	8009834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2150      	movs	r1, #80	@ 0x50
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f836 	bl	80098f2 <TIM_ITRx_SetConfig>
      break;
 8008886:	e283      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a54      	ldr	r2, [pc, #336]	@ (80089e0 <HAL_TIM_ConfigClockSource+0x638>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d01d      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800889a:	d018      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a50      	ldr	r2, [pc, #320]	@ (80089e4 <HAL_TIM_ConfigClockSource+0x63c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d013      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a4f      	ldr	r2, [pc, #316]	@ (80089e8 <HAL_TIM_ConfigClockSource+0x640>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00e      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a4d      	ldr	r2, [pc, #308]	@ (80089ec <HAL_TIM_ConfigClockSource+0x644>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d009      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a4c      	ldr	r2, [pc, #304]	@ (80089f0 <HAL_TIM_ConfigClockSource+0x648>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d004      	beq.n	80088ce <HAL_TIM_ConfigClockSource+0x526>
 80088c4:	f241 6114 	movw	r1, #5652	@ 0x1614
 80088c8:	484a      	ldr	r0, [pc, #296]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 80088ca:	f7f9 f8f1 	bl	8001ab0 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d6:	d014      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x55a>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d010      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x55a>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x55a>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d008      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x55a>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b0a      	cmp	r3, #10
 80088f6:	d004      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x55a>
 80088f8:	f241 6117 	movw	r1, #5655	@ 0x1617
 80088fc:	483d      	ldr	r0, [pc, #244]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 80088fe:	f7f9 f8d7 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d904      	bls.n	8008914 <HAL_TIM_ConfigClockSource+0x56c>
 800890a:	f241 6118 	movw	r1, #5656	@ 0x1618
 800890e:	4839      	ldr	r0, [pc, #228]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 8008910:	f7f9 f8ce 	bl	8001ab0 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008920:	461a      	mov	r2, r3
 8008922:	f000 ffb6 	bl	8009892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2160      	movs	r1, #96	@ 0x60
 800892c:	4618      	mov	r0, r3
 800892e:	f000 ffe0 	bl	80098f2 <TIM_ITRx_SetConfig>
      break;
 8008932:	e22d      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a29      	ldr	r2, [pc, #164]	@ (80089e0 <HAL_TIM_ConfigClockSource+0x638>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d01d      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008946:	d018      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a25      	ldr	r2, [pc, #148]	@ (80089e4 <HAL_TIM_ConfigClockSource+0x63c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d013      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a24      	ldr	r2, [pc, #144]	@ (80089e8 <HAL_TIM_ConfigClockSource+0x640>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00e      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a22      	ldr	r2, [pc, #136]	@ (80089ec <HAL_TIM_ConfigClockSource+0x644>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d009      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a21      	ldr	r2, [pc, #132]	@ (80089f0 <HAL_TIM_ConfigClockSource+0x648>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d004      	beq.n	800897a <HAL_TIM_ConfigClockSource+0x5d2>
 8008970:	f241 6124 	movw	r1, #5668	@ 0x1624
 8008974:	481f      	ldr	r0, [pc, #124]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 8008976:	f7f9 f89b 	bl	8001ab0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008982:	d014      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x606>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d010      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x606>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00c      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x606>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d008      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x606>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b0a      	cmp	r3, #10
 80089a2:	d004      	beq.n	80089ae <HAL_TIM_ConfigClockSource+0x606>
 80089a4:	f241 6127 	movw	r1, #5671	@ 0x1627
 80089a8:	4812      	ldr	r0, [pc, #72]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 80089aa:	f7f9 f881 	bl	8001ab0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b0f      	cmp	r3, #15
 80089b4:	d904      	bls.n	80089c0 <HAL_TIM_ConfigClockSource+0x618>
 80089b6:	f241 6128 	movw	r1, #5672	@ 0x1628
 80089ba:	480e      	ldr	r0, [pc, #56]	@ (80089f4 <HAL_TIM_ConfigClockSource+0x64c>)
 80089bc:	f7f9 f878 	bl	8001ab0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089cc:	461a      	mov	r2, r3
 80089ce:	f000 ff31 	bl	8009834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2140      	movs	r1, #64	@ 0x40
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 ff8a 	bl	80098f2 <TIM_ITRx_SetConfig>
      break;
 80089de:	e1d7      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40013400 	.word	0x40013400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	08014230 	.word	0x08014230
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a9c      	ldr	r2, [pc, #624]	@ (8008c70 <HAL_TIM_ConfigClockSource+0x8c8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d146      	bne.n	8008a90 <HAL_TIM_ConfigClockSource+0x6e8>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	f000 81b4 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b70      	cmp	r3, #112	@ 0x70
 8008a14:	f000 81af 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a20:	f000 81a9 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b40      	cmp	r3, #64	@ 0x40
 8008a2a:	f000 81a4 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b50      	cmp	r3, #80	@ 0x50
 8008a34:	f000 819f 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b60      	cmp	r3, #96	@ 0x60
 8008a3e:	f000 819a 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	f000 8195 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f000 8190 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b30      	cmp	r3, #48	@ 0x30
 8008a5c:	f000 818b 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a68:	f000 8185 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a80      	ldr	r2, [pc, #512]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x8cc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	f000 817f 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a7e      	ldr	r2, [pc, #504]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x8d0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f000 8179 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a7c      	ldr	r2, [pc, #496]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x8d4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	f000 8173 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a98:	d14c      	bne.n	8008b34 <HAL_TIM_ConfigClockSource+0x78c>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa2:	f000 8168 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aae:	f000 8162 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b70      	cmp	r3, #112	@ 0x70
 8008ab8:	f000 815d 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b40      	cmp	r3, #64	@ 0x40
 8008ac2:	f000 8158 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b50      	cmp	r3, #80	@ 0x50
 8008acc:	f000 8153 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b60      	cmp	r3, #96	@ 0x60
 8008ad6:	f000 814e 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8149 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	f000 8144 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b30      	cmp	r3, #48	@ 0x30
 8008af4:	f000 813f 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008b00:	f000 8139 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a5a      	ldr	r2, [pc, #360]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x8cc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	f000 8133 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a58      	ldr	r2, [pc, #352]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x8d0>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f000 812d 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a56      	ldr	r2, [pc, #344]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x8d4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	f000 8127 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a54      	ldr	r2, [pc, #336]	@ (8008c80 <HAL_TIM_ConfigClockSource+0x8d8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	f000 8121 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a52      	ldr	r2, [pc, #328]	@ (8008c84 <HAL_TIM_ConfigClockSource+0x8dc>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d146      	bne.n	8008bcc <HAL_TIM_ConfigClockSource+0x824>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b46:	f000 8116 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b70      	cmp	r3, #112	@ 0x70
 8008b50:	f000 8111 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b5c:	f000 810b 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b40      	cmp	r3, #64	@ 0x40
 8008b66:	f000 8106 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b50      	cmp	r3, #80	@ 0x50
 8008b70:	f000 8101 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b60      	cmp	r3, #96	@ 0x60
 8008b7a:	f000 80fc 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80f7 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	f000 80f2 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b30      	cmp	r3, #48	@ 0x30
 8008b98:	f000 80ed 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ba4:	f000 80e7 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a31      	ldr	r2, [pc, #196]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x8cc>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	f000 80e1 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x8d0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f000 80db 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x8d4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	f000 80d5 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c88 <HAL_TIM_ConfigClockSource+0x8e0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d146      	bne.n	8008c64 <HAL_TIM_ConfigClockSource+0x8bc>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bde:	f000 80ca 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bea:	f000 80c4 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b70      	cmp	r3, #112	@ 0x70
 8008bf4:	f000 80bf 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b40      	cmp	r3, #64	@ 0x40
 8008bfe:	f000 80ba 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b50      	cmp	r3, #80	@ 0x50
 8008c08:	f000 80b5 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b60      	cmp	r3, #96	@ 0x60
 8008c12:	f000 80b0 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80ab 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	f000 80a6 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	f000 80a1 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c3c:	f000 809b 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a0b      	ldr	r2, [pc, #44]	@ (8008c74 <HAL_TIM_ConfigClockSource+0x8cc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	f000 8095 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a09      	ldr	r2, [pc, #36]	@ (8008c78 <HAL_TIM_ConfigClockSource+0x8d0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	f000 808f 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a07      	ldr	r2, [pc, #28]	@ (8008c7c <HAL_TIM_ConfigClockSource+0x8d4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 8089 	beq.w	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a08      	ldr	r2, [pc, #32]	@ (8008c8c <HAL_TIM_ConfigClockSource+0x8e4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d149      	bne.n	8008d02 <HAL_TIM_ConfigClockSource+0x95a>
 8008c6e:	e00f      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x8e8>
 8008c70:	40012c00 	.word	0x40012c00
 8008c74:	00100020 	.word	0x00100020
 8008c78:	00100030 	.word	0x00100030
 8008c7c:	00100040 	.word	0x00100040
 8008c80:	00100070 	.word	0x00100070
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c98:	d06d      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca2:	d068      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b70      	cmp	r3, #112	@ 0x70
 8008caa:	d064      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b40      	cmp	r3, #64	@ 0x40
 8008cb2:	d060      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b50      	cmp	r3, #80	@ 0x50
 8008cba:	d05c      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b60      	cmp	r3, #96	@ 0x60
 8008cc2:	d058      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d054      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b10      	cmp	r3, #16
 8008cd2:	d050      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d04c      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b30      	cmp	r3, #48	@ 0x30
 8008ce2:	d048      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a30      	ldr	r2, [pc, #192]	@ (8008dac <HAL_TIM_ConfigClockSource+0xa04>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d043      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8008db0 <HAL_TIM_ConfigClockSource+0xa08>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d03e      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8008db4 <HAL_TIM_ConfigClockSource+0xa0c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d039      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a2c      	ldr	r2, [pc, #176]	@ (8008db8 <HAL_TIM_ConfigClockSource+0xa10>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d12f      	bne.n	8008d6c <HAL_TIM_ConfigClockSource+0x9c4>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d14:	d02f      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b40      	cmp	r3, #64	@ 0x40
 8008d1c:	d02b      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b50      	cmp	r3, #80	@ 0x50
 8008d24:	d027      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b60      	cmp	r3, #96	@ 0x60
 8008d2c:	d023      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01f      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b10      	cmp	r3, #16
 8008d3c:	d01b      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d017      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b30      	cmp	r3, #48	@ 0x30
 8008d4c:	d013      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d56:	d00e      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a14      	ldr	r2, [pc, #80]	@ (8008db0 <HAL_TIM_ConfigClockSource+0xa08>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d009      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a13      	ldr	r2, [pc, #76]	@ (8008db4 <HAL_TIM_ConfigClockSource+0xa0c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d004      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x9ce>
 8008d6c:	f241 6145 	movw	r1, #5701	@ 0x1645
 8008d70:	4812      	ldr	r0, [pc, #72]	@ (8008dbc <HAL_TIM_ConfigClockSource+0xa14>)
 8008d72:	f7f8 fe9d 	bl	8001ab0 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4610      	mov	r0, r2
 8008d82:	f000 fdb6 	bl	80098f2 <TIM_ITRx_SetConfig>
      break;
 8008d86:	e003      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
    }

    default:
      status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8c:	e000      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x9e8>
      break;
 8008d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	00100020 	.word	0x00100020
 8008db0:	00100030 	.word	0x00100030
 8008db4:	00100040 	.word	0x00100040
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	08014230 	.word	0x08014230

08008dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d107      	bne.n	8008e4c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e4a:	e02a      	b.n	8008ea2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d107      	bne.n	8008e66 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e64:	e01d      	b.n	8008ea2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d107      	bne.n	8008e80 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2204      	movs	r2, #4
 8008e74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e7e:	e010      	b.n	8008ea2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d107      	bne.n	8008e9a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2208      	movs	r2, #8
 8008e8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e98:	e003      	b.n	8008ea2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff ffb4 	bl	8008e10 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	771a      	strb	r2, [r3, #28]
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d10b      	bne.n	8008ee6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d136      	bne.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ee4:	e031      	b.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d10b      	bne.n	8008f08 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d125      	bne.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f06:	e020      	b.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d10b      	bne.n	8008f2a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2204      	movs	r2, #4
 8008f16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d114      	bne.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f28:	e00f      	b.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d10a      	bne.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2208      	movs	r2, #8
 8008f38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d103      	bne.n	8008f4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7f7 fbda 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	771a      	strb	r2, [r3, #28]
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d103      	bne.n	8008f7e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	771a      	strb	r2, [r3, #28]
 8008f7c:	e019      	b.n	8008fb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d103      	bne.n	8008f90 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	771a      	strb	r2, [r3, #28]
 8008f8e:	e010      	b.n	8008fb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d103      	bne.n	8008fa2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	771a      	strb	r2, [r3, #28]
 8008fa0:	e007      	b.n	8008fb2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d102      	bne.n	8008fb2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2208      	movs	r2, #8
 8008fb0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff ff18 	bl	8008de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a42      	ldr	r2, [pc, #264]	@ (80090e4 <TIM_Base_SetConfig+0x11c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00f      	beq.n	8009000 <TIM_Base_SetConfig+0x38>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe6:	d00b      	beq.n	8009000 <TIM_Base_SetConfig+0x38>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3f      	ldr	r2, [pc, #252]	@ (80090e8 <TIM_Base_SetConfig+0x120>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d007      	beq.n	8009000 <TIM_Base_SetConfig+0x38>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80090ec <TIM_Base_SetConfig+0x124>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_Base_SetConfig+0x38>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80090f0 <TIM_Base_SetConfig+0x128>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d108      	bne.n	8009012 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a33      	ldr	r2, [pc, #204]	@ (80090e4 <TIM_Base_SetConfig+0x11c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01b      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009020:	d017      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a30      	ldr	r2, [pc, #192]	@ (80090e8 <TIM_Base_SetConfig+0x120>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d013      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a2f      	ldr	r2, [pc, #188]	@ (80090ec <TIM_Base_SetConfig+0x124>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00f      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2e      	ldr	r2, [pc, #184]	@ (80090f0 <TIM_Base_SetConfig+0x128>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00b      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2d      	ldr	r2, [pc, #180]	@ (80090f4 <TIM_Base_SetConfig+0x12c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2c      	ldr	r2, [pc, #176]	@ (80090f8 <TIM_Base_SetConfig+0x130>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d003      	beq.n	8009052 <TIM_Base_SetConfig+0x8a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2b      	ldr	r2, [pc, #172]	@ (80090fc <TIM_Base_SetConfig+0x134>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d108      	bne.n	8009064 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a16      	ldr	r2, [pc, #88]	@ (80090e4 <TIM_Base_SetConfig+0x11c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00f      	beq.n	80090b0 <TIM_Base_SetConfig+0xe8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a17      	ldr	r2, [pc, #92]	@ (80090f0 <TIM_Base_SetConfig+0x128>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00b      	beq.n	80090b0 <TIM_Base_SetConfig+0xe8>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a16      	ldr	r2, [pc, #88]	@ (80090f4 <TIM_Base_SetConfig+0x12c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d007      	beq.n	80090b0 <TIM_Base_SetConfig+0xe8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a15      	ldr	r2, [pc, #84]	@ (80090f8 <TIM_Base_SetConfig+0x130>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d003      	beq.n	80090b0 <TIM_Base_SetConfig+0xe8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a14      	ldr	r2, [pc, #80]	@ (80090fc <TIM_Base_SetConfig+0x134>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d103      	bne.n	80090b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d105      	bne.n	80090d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	611a      	str	r2, [r3, #16]
  }
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40012c00 	.word	0x40012c00
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40013400 	.word	0x40013400
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40014400 	.word	0x40014400
 80090fc:	40014800 	.word	0x40014800

08009100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f023 0201 	bic.w	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 0302 	bic.w	r3, r3, #2
 800914c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4313      	orrs	r3, r2
 8009156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a40      	ldr	r2, [pc, #256]	@ (800925c <TIM_OC1_SetConfig+0x15c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00f      	beq.n	8009180 <TIM_OC1_SetConfig+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a3f      	ldr	r2, [pc, #252]	@ (8009260 <TIM_OC1_SetConfig+0x160>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00b      	beq.n	8009180 <TIM_OC1_SetConfig+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a3e      	ldr	r2, [pc, #248]	@ (8009264 <TIM_OC1_SetConfig+0x164>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d007      	beq.n	8009180 <TIM_OC1_SetConfig+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a3d      	ldr	r2, [pc, #244]	@ (8009268 <TIM_OC1_SetConfig+0x168>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC1_SetConfig+0x80>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a3c      	ldr	r2, [pc, #240]	@ (800926c <TIM_OC1_SetConfig+0x16c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d119      	bne.n	80091b4 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d008      	beq.n	800919a <TIM_OC1_SetConfig+0x9a>
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	2b08      	cmp	r3, #8
 800918e:	d004      	beq.n	800919a <TIM_OC1_SetConfig+0x9a>
 8009190:	f641 411b 	movw	r1, #7195	@ 0x1c1b
 8009194:	4836      	ldr	r0, [pc, #216]	@ (8009270 <TIM_OC1_SetConfig+0x170>)
 8009196:	f7f8 fc8b 	bl	8001ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f023 0308 	bic.w	r3, r3, #8
 80091a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f023 0304 	bic.w	r3, r3, #4
 80091b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a29      	ldr	r2, [pc, #164]	@ (800925c <TIM_OC1_SetConfig+0x15c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00f      	beq.n	80091dc <TIM_OC1_SetConfig+0xdc>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a28      	ldr	r2, [pc, #160]	@ (8009260 <TIM_OC1_SetConfig+0x160>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00b      	beq.n	80091dc <TIM_OC1_SetConfig+0xdc>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a27      	ldr	r2, [pc, #156]	@ (8009264 <TIM_OC1_SetConfig+0x164>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_OC1_SetConfig+0xdc>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a26      	ldr	r2, [pc, #152]	@ (8009268 <TIM_OC1_SetConfig+0x168>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_OC1_SetConfig+0xdc>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a25      	ldr	r2, [pc, #148]	@ (800926c <TIM_OC1_SetConfig+0x16c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d12d      	bne.n	8009238 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e4:	d008      	beq.n	80091f8 <TIM_OC1_SetConfig+0xf8>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d004      	beq.n	80091f8 <TIM_OC1_SetConfig+0xf8>
 80091ee:	f641 4128 	movw	r1, #7208	@ 0x1c28
 80091f2:	481f      	ldr	r0, [pc, #124]	@ (8009270 <TIM_OC1_SetConfig+0x170>)
 80091f4:	f7f8 fc5c 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009200:	d008      	beq.n	8009214 <TIM_OC1_SetConfig+0x114>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <TIM_OC1_SetConfig+0x114>
 800920a:	f641 4129 	movw	r1, #7209	@ 0x1c29
 800920e:	4818      	ldr	r0, [pc, #96]	@ (8009270 <TIM_OC1_SetConfig+0x170>)
 8009210:	f7f8 fc4e 	bl	8001ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800921a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	621a      	str	r2, [r3, #32]
}
 8009252:	bf00      	nop
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800
 8009270:	08014230 	.word	0x08014230

08009274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	f023 0210 	bic.w	r2, r3, #16
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f023 0320 	bic.w	r3, r3, #32
 80092c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a3b      	ldr	r2, [pc, #236]	@ (80093c0 <TIM_OC2_SetConfig+0x14c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC2_SetConfig+0x6c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a3a      	ldr	r2, [pc, #232]	@ (80093c4 <TIM_OC2_SetConfig+0x150>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d11a      	bne.n	8009316 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <TIM_OC2_SetConfig+0x86>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d004      	beq.n	80092fa <TIM_OC2_SetConfig+0x86>
 80092f0:	f641 4167 	movw	r1, #7271	@ 0x1c67
 80092f4:	4834      	ldr	r0, [pc, #208]	@ (80093c8 <TIM_OC2_SetConfig+0x154>)
 80092f6:	f7f8 fbdb 	bl	8001ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	4313      	orrs	r3, r2
 800930c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a29      	ldr	r2, [pc, #164]	@ (80093c0 <TIM_OC2_SetConfig+0x14c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00f      	beq.n	800933e <TIM_OC2_SetConfig+0xca>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a28      	ldr	r2, [pc, #160]	@ (80093c4 <TIM_OC2_SetConfig+0x150>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00b      	beq.n	800933e <TIM_OC2_SetConfig+0xca>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a28      	ldr	r2, [pc, #160]	@ (80093cc <TIM_OC2_SetConfig+0x158>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d007      	beq.n	800933e <TIM_OC2_SetConfig+0xca>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a27      	ldr	r2, [pc, #156]	@ (80093d0 <TIM_OC2_SetConfig+0x15c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_OC2_SetConfig+0xca>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a26      	ldr	r2, [pc, #152]	@ (80093d4 <TIM_OC2_SetConfig+0x160>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d12f      	bne.n	800939e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009346:	d008      	beq.n	800935a <TIM_OC2_SetConfig+0xe6>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <TIM_OC2_SetConfig+0xe6>
 8009350:	f641 4174 	movw	r1, #7284	@ 0x1c74
 8009354:	481c      	ldr	r0, [pc, #112]	@ (80093c8 <TIM_OC2_SetConfig+0x154>)
 8009356:	f7f8 fbab 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009362:	d008      	beq.n	8009376 <TIM_OC2_SetConfig+0x102>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <TIM_OC2_SetConfig+0x102>
 800936c:	f641 4175 	movw	r1, #7285	@ 0x1c75
 8009370:	4815      	ldr	r0, [pc, #84]	@ (80093c8 <TIM_OC2_SetConfig+0x154>)
 8009372:	f7f8 fb9d 	bl	8001ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800937c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	40012c00 	.word	0x40012c00
 80093c4:	40013400 	.word	0x40013400
 80093c8:	08014230 	.word	0x08014230
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800

080093d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a3b      	ldr	r2, [pc, #236]	@ (8009524 <TIM_OC3_SetConfig+0x14c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_OC3_SetConfig+0x6a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a3a      	ldr	r2, [pc, #232]	@ (8009528 <TIM_OC3_SetConfig+0x150>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d11a      	bne.n	8009478 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d008      	beq.n	800945c <TIM_OC3_SetConfig+0x84>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	2b08      	cmp	r3, #8
 8009450:	d004      	beq.n	800945c <TIM_OC3_SetConfig+0x84>
 8009452:	f641 41b2 	movw	r1, #7346	@ 0x1cb2
 8009456:	4835      	ldr	r0, [pc, #212]	@ (800952c <TIM_OC3_SetConfig+0x154>)
 8009458:	f7f8 fb2a 	bl	8001ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009476:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a2a      	ldr	r2, [pc, #168]	@ (8009524 <TIM_OC3_SetConfig+0x14c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d00f      	beq.n	80094a0 <TIM_OC3_SetConfig+0xc8>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a29      	ldr	r2, [pc, #164]	@ (8009528 <TIM_OC3_SetConfig+0x150>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00b      	beq.n	80094a0 <TIM_OC3_SetConfig+0xc8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a29      	ldr	r2, [pc, #164]	@ (8009530 <TIM_OC3_SetConfig+0x158>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_OC3_SetConfig+0xc8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a28      	ldr	r2, [pc, #160]	@ (8009534 <TIM_OC3_SetConfig+0x15c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC3_SetConfig+0xc8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a27      	ldr	r2, [pc, #156]	@ (8009538 <TIM_OC3_SetConfig+0x160>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d12f      	bne.n	8009500 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a8:	d008      	beq.n	80094bc <TIM_OC3_SetConfig+0xe4>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d004      	beq.n	80094bc <TIM_OC3_SetConfig+0xe4>
 80094b2:	f641 41bf 	movw	r1, #7359	@ 0x1cbf
 80094b6:	481d      	ldr	r0, [pc, #116]	@ (800952c <TIM_OC3_SetConfig+0x154>)
 80094b8:	f7f8 fafa 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c4:	d008      	beq.n	80094d8 <TIM_OC3_SetConfig+0x100>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <TIM_OC3_SetConfig+0x100>
 80094ce:	f44f 51e6 	mov.w	r1, #7360	@ 0x1cc0
 80094d2:	4816      	ldr	r0, [pc, #88]	@ (800952c <TIM_OC3_SetConfig+0x154>)
 80094d4:	f7f8 faec 	bl	8001ab0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	621a      	str	r2, [r3, #32]
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40013400 	.word	0x40013400
 800952c:	08014230 	.word	0x08014230
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800

0800953c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800956a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800958a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	031b      	lsls	r3, r3, #12
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a3b      	ldr	r2, [pc, #236]	@ (8009688 <TIM_OC4_SetConfig+0x14c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d003      	beq.n	80095a8 <TIM_OC4_SetConfig+0x6c>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a3a      	ldr	r2, [pc, #232]	@ (800968c <TIM_OC4_SetConfig+0x150>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d11a      	bne.n	80095de <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d008      	beq.n	80095c2 <TIM_OC4_SetConfig+0x86>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	d004      	beq.n	80095c2 <TIM_OC4_SetConfig+0x86>
 80095b8:	f641 41fe 	movw	r1, #7422	@ 0x1cfe
 80095bc:	4834      	ldr	r0, [pc, #208]	@ (8009690 <TIM_OC4_SetConfig+0x154>)
 80095be:	f7f8 fa77 	bl	8001ab0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	031b      	lsls	r3, r3, #12
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a29      	ldr	r2, [pc, #164]	@ (8009688 <TIM_OC4_SetConfig+0x14c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00f      	beq.n	8009606 <TIM_OC4_SetConfig+0xca>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a28      	ldr	r2, [pc, #160]	@ (800968c <TIM_OC4_SetConfig+0x150>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00b      	beq.n	8009606 <TIM_OC4_SetConfig+0xca>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a28      	ldr	r2, [pc, #160]	@ (8009694 <TIM_OC4_SetConfig+0x158>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d007      	beq.n	8009606 <TIM_OC4_SetConfig+0xca>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a27      	ldr	r2, [pc, #156]	@ (8009698 <TIM_OC4_SetConfig+0x15c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_OC4_SetConfig+0xca>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a26      	ldr	r2, [pc, #152]	@ (800969c <TIM_OC4_SetConfig+0x160>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d12f      	bne.n	8009666 <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800960e:	d008      	beq.n	8009622 <TIM_OC4_SetConfig+0xe6>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <TIM_OC4_SetConfig+0xe6>
 8009618:	f641 510b 	movw	r1, #7435	@ 0x1d0b
 800961c:	481c      	ldr	r0, [pc, #112]	@ (8009690 <TIM_OC4_SetConfig+0x154>)
 800961e:	f7f8 fa47 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800962a:	d008      	beq.n	800963e <TIM_OC4_SetConfig+0x102>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <TIM_OC4_SetConfig+0x102>
 8009634:	f641 510c 	movw	r1, #7436	@ 0x1d0c
 8009638:	4815      	ldr	r0, [pc, #84]	@ (8009690 <TIM_OC4_SetConfig+0x154>)
 800963a:	f7f8 fa39 	bl	8001ab0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009644:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800964c:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	019b      	lsls	r3, r3, #6
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	019b      	lsls	r3, r3, #6
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	621a      	str	r2, [r3, #32]
}
 8009680:	bf00      	nop
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	40012c00 	.word	0x40012c00
 800968c:	40013400 	.word	0x40013400
 8009690:	08014230 	.word	0x08014230
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800

080096a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80096e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a17      	ldr	r2, [pc, #92]	@ (8009754 <TIM_OC5_SetConfig+0xb4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00f      	beq.n	800971a <TIM_OC5_SetConfig+0x7a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a16      	ldr	r2, [pc, #88]	@ (8009758 <TIM_OC5_SetConfig+0xb8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00b      	beq.n	800971a <TIM_OC5_SetConfig+0x7a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a15      	ldr	r2, [pc, #84]	@ (800975c <TIM_OC5_SetConfig+0xbc>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d007      	beq.n	800971a <TIM_OC5_SetConfig+0x7a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a14      	ldr	r2, [pc, #80]	@ (8009760 <TIM_OC5_SetConfig+0xc0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d003      	beq.n	800971a <TIM_OC5_SetConfig+0x7a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a13      	ldr	r2, [pc, #76]	@ (8009764 <TIM_OC5_SetConfig+0xc4>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d109      	bne.n	800972e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	621a      	str	r2, [r3, #32]
}
 8009748:	bf00      	nop
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	40012c00 	.word	0x40012c00
 8009758:	40013400 	.word	0x40013400
 800975c:	40014000 	.word	0x40014000
 8009760:	40014400 	.word	0x40014400
 8009764:	40014800 	.word	0x40014800

08009768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	051b      	lsls	r3, r3, #20
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a18      	ldr	r2, [pc, #96]	@ (8009820 <TIM_OC6_SetConfig+0xb8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00f      	beq.n	80097e4 <TIM_OC6_SetConfig+0x7c>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a17      	ldr	r2, [pc, #92]	@ (8009824 <TIM_OC6_SetConfig+0xbc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00b      	beq.n	80097e4 <TIM_OC6_SetConfig+0x7c>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a16      	ldr	r2, [pc, #88]	@ (8009828 <TIM_OC6_SetConfig+0xc0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d007      	beq.n	80097e4 <TIM_OC6_SetConfig+0x7c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a15      	ldr	r2, [pc, #84]	@ (800982c <TIM_OC6_SetConfig+0xc4>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d003      	beq.n	80097e4 <TIM_OC6_SetConfig+0x7c>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a14      	ldr	r2, [pc, #80]	@ (8009830 <TIM_OC6_SetConfig+0xc8>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d109      	bne.n	80097f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	621a      	str	r2, [r3, #32]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40012c00 	.word	0x40012c00
 8009824:	40013400 	.word	0x40013400
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	40014800 	.word	0x40014800

08009834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f023 0201 	bic.w	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800985e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 030a 	bic.w	r3, r3, #10
 8009870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009892:	b480      	push	{r7}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	f023 0210 	bic.w	r2, r3, #16
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	031b      	lsls	r3, r3, #12
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80098ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800990c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	f043 0307 	orr.w	r3, r3, #7
 8009918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	609a      	str	r2, [r3, #8]
}
 8009920:	bf00      	nop
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	021a      	lsls	r2, r3, #8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	431a      	orrs	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4313      	orrs	r3, r2
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	609a      	str	r2, [r3, #8]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4a2d      	ldr	r2, [pc, #180]	@ (8009a30 <TIM_CCxChannelCmd+0xc4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d020      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009986:	d01c      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4a2a      	ldr	r2, [pc, #168]	@ (8009a34 <TIM_CCxChannelCmd+0xc8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d018      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a29      	ldr	r2, [pc, #164]	@ (8009a38 <TIM_CCxChannelCmd+0xcc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d014      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4a28      	ldr	r2, [pc, #160]	@ (8009a3c <TIM_CCxChannelCmd+0xd0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d010      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a27      	ldr	r2, [pc, #156]	@ (8009a40 <TIM_CCxChannelCmd+0xd4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00c      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4a26      	ldr	r2, [pc, #152]	@ (8009a44 <TIM_CCxChannelCmd+0xd8>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d008      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a25      	ldr	r2, [pc, #148]	@ (8009a48 <TIM_CCxChannelCmd+0xdc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d004      	beq.n	80099c2 <TIM_CCxChannelCmd+0x56>
 80099b8:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80099bc:	4823      	ldr	r0, [pc, #140]	@ (8009a4c <TIM_CCxChannelCmd+0xe0>)
 80099be:	f7f8 f877 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d016      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d013      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d010      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b0c      	cmp	r3, #12
 80099d8:	d00d      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b10      	cmp	r3, #16
 80099de:	d00a      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b14      	cmp	r3, #20
 80099e4:	d007      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b3c      	cmp	r3, #60	@ 0x3c
 80099ea:	d004      	beq.n	80099f6 <TIM_CCxChannelCmd+0x8a>
 80099ec:	f641 7185 	movw	r1, #8069	@ 0x1f85
 80099f0:	4816      	ldr	r0, [pc, #88]	@ (8009a4c <TIM_CCxChannelCmd+0xe0>)
 80099f2:	f7f8 f85d 	bl	8001ab0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f003 031f 	and.w	r3, r3, #31
 80099fc:	2201      	movs	r2, #1
 80099fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009a02:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	43db      	mvns	r3, r3
 8009a0c:	401a      	ands	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a1a      	ldr	r2, [r3, #32]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a22:	431a      	orrs	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	621a      	str	r2, [r3, #32]
}
 8009a28:	bf00      	nop
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	40012c00 	.word	0x40012c00
 8009a34:	40000400 	.word	0x40000400
 8009a38:	40000800 	.word	0x40000800
 8009a3c:	40013400 	.word	0x40013400
 8009a40:	40014000 	.word	0x40014000
 8009a44:	40014400 	.word	0x40014400
 8009a48:	40014800 	.word	0x40014800
 8009a4c:	08014230 	.word	0x08014230

08009a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a34      	ldr	r2, [pc, #208]	@ (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d027      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6c:	d022      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a30      	ldr	r2, [pc, #192]	@ (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d01d      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d018      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a2d      	ldr	r2, [pc, #180]	@ (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d013      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a2b      	ldr	r2, [pc, #172]	@ (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d00e      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d009      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a28      	ldr	r2, [pc, #160]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009aaa:	f640 018b 	movw	r1, #2187	@ 0x88b
 8009aae:	4827      	ldr	r0, [pc, #156]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ab0:	f7f7 fffe 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d025      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	d021      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	d01d      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b30      	cmp	r3, #48	@ 0x30
 8009ad2:	d019      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b40      	cmp	r3, #64	@ 0x40
 8009ada:	d015      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b50      	cmp	r3, #80	@ 0x50
 8009ae2:	d011      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b60      	cmp	r3, #96	@ 0x60
 8009aea:	d00d      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b70      	cmp	r3, #112	@ 0x70
 8009af2:	d009      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009afc:	d004      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009afe:	f640 018c 	movw	r1, #2188	@ 0x88c
 8009b02:	4812      	ldr	r0, [pc, #72]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b04:	f7f7 ffd4 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2b80      	cmp	r3, #128	@ 0x80
 8009b0e:	d008      	beq.n	8009b22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009b18:	f640 018d 	movw	r1, #2189	@ 0x88d
 8009b1c:	480b      	ldr	r0, [pc, #44]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b1e:	f7f7 ffc7 	bl	8001ab0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d111      	bne.n	8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x100>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e0ce      	b.n	8009cce <HAL_TIMEx_MasterConfigSynchronization+0x27e>
 8009b30:	40012c00 	.word	0x40012c00
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40001000 	.word	0x40001000
 8009b40:	40001400 	.word	0x40001400
 8009b44:	40013400 	.word	0x40013400
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	08014268 	.word	0x08014268
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a58      	ldr	r2, [pc, #352]	@ (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d004      	beq.n	8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x134>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a57      	ldr	r2, [pc, #348]	@ (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d161      	bne.n	8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d054      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b94:	d04f      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b9e:	d04a      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba8:	d045      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bb2:	d040      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009bbc:	d03b      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009bc6:	d036      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009bd0:	d031      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8009bda:	d02c      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009be4:	d027      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009bee:	d022      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009bf8:	d01d      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8009c02:	d018      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009c0c:	d013      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8009c16:	d00e      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009c20:	d009      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009c2a:	d004      	beq.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x1e6>
 8009c2c:	f640 019f 	movw	r1, #2207	@ 0x89f
 8009c30:	482b      	ldr	r0, [pc, #172]	@ (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009c32:	f7f7 ff3d 	bl	8001ab0 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d018      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x252>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c78:	d013      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x252>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a19      	ldr	r2, [pc, #100]	@ (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00e      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x252>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a17      	ldr	r2, [pc, #92]	@ (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d009      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x252>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a12      	ldr	r2, [pc, #72]	@ (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0x252>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a13      	ldr	r2, [pc, #76]	@ (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d10c      	bne.n	8009cbc <HAL_TIMEx_MasterConfigSynchronization+0x26c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40012c00 	.word	0x40012c00
 8009cdc:	40013400 	.word	0x40013400
 8009ce0:	08014268 	.word	0x08014268
 8009ce4:	40000400 	.word	0x40000400
 8009ce8:	40000800 	.word	0x40000800
 8009cec:	40014000 	.word	0x40014000

08009cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a50      	ldr	r2, [pc, #320]	@ (8009e44 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d018      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8009e48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a4d      	ldr	r2, [pc, #308]	@ (8009e4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00e      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a4b      	ldr	r2, [pc, #300]	@ (8009e50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d009      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8009e54 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d004      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009d30:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8009d34:	4848      	ldr	r0, [pc, #288]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009d36:	f7f7 febb 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d42:	d008      	beq.n	8009d56 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009d4c:	f640 01d5 	movw	r1, #2261	@ 0x8d5
 8009d50:	4841      	ldr	r0, [pc, #260]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009d52:	f7f7 fead 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d5e:	d008      	beq.n	8009d72 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009d68:	f640 01d6 	movw	r1, #2262	@ 0x8d6
 8009d6c:	483a      	ldr	r0, [pc, #232]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009d6e:	f7f7 fe9f 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d013      	beq.n	8009da2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d96:	d004      	beq.n	8009da2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009d98:	f640 01d7 	movw	r1, #2263	@ 0x8d7
 8009d9c:	482e      	ldr	r0, [pc, #184]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009d9e:	f7f7 fe87 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2bff      	cmp	r3, #255	@ 0xff
 8009da8:	d904      	bls.n	8009db4 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8009daa:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 8009dae:	482a      	ldr	r0, [pc, #168]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009db0:	f7f7 fe7e 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dbc:	d008      	beq.n	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009dc6:	f640 01d9 	movw	r1, #2265	@ 0x8d9
 8009dca:	4823      	ldr	r0, [pc, #140]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009dcc:	f7f7 fe70 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d009      	beq.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de0:	d004      	beq.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009de2:	f640 01da 	movw	r1, #2266	@ 0x8da
 8009de6:	481c      	ldr	r0, [pc, #112]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009de8:	f7f7 fe62 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	d904      	bls.n	8009dfe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009df4:	f640 01db 	movw	r1, #2267	@ 0x8db
 8009df8:	4817      	ldr	r0, [pc, #92]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009dfa:	f7f7 fe59 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e06:	d008      	beq.n	8009e1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009e10:	f640 01dc 	movw	r1, #2268	@ 0x8dc
 8009e14:	4810      	ldr	r0, [pc, #64]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009e16:	f7f7 fe4b 	bl	8001ab0 <assert_failed>
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <HAL_TIMEx_ConfigBreakDeadTime+0x146>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e2a:	d004      	beq.n	8009e36 <HAL_TIMEx_ConfigBreakDeadTime+0x146>
 8009e2c:	f640 01dd 	movw	r1, #2269	@ 0x8dd
 8009e30:	4809      	ldr	r0, [pc, #36]	@ (8009e58 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 8009e32:	f7f7 fe3d 	bl	8001ab0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d10d      	bne.n	8009e5c <HAL_TIMEx_ConfigBreakDeadTime+0x16c>
 8009e40:	2302      	movs	r3, #2
 8009e42:	e0b2      	b.n	8009faa <HAL_TIMEx_ConfigBreakDeadTime+0x2ba>
 8009e44:	40012c00 	.word	0x40012c00
 8009e48:	40013400 	.word	0x40013400
 8009e4c:	40014000 	.word	0x40014000
 8009e50:	40014400 	.word	0x40014400
 8009e54:	40014800 	.word	0x40014800
 8009e58:	08014268 	.word	0x08014268
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	041b      	lsls	r3, r3, #16
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a32      	ldr	r2, [pc, #200]	@ (8009fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a31      	ldr	r2, [pc, #196]	@ (8009fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c8>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d14f      	bne.n	8009f98 <HAL_TIMEx_ConfigBreakDeadTime+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f00:	d008      	beq.n	8009f14 <HAL_TIMEx_ConfigBreakDeadTime+0x224>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d004      	beq.n	8009f14 <HAL_TIMEx_ConfigBreakDeadTime+0x224>
 8009f0a:	f640 01f3 	movw	r1, #2291	@ 0x8f3
 8009f0e:	482b      	ldr	r0, [pc, #172]	@ (8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0x2cc>)
 8009f10:	f7f7 fdce 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f24:	d004      	beq.n	8009f30 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 8009f26:	f640 01f4 	movw	r1, #2292	@ 0x8f4
 8009f2a:	4824      	ldr	r0, [pc, #144]	@ (8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0x2cc>)
 8009f2c:	f7f7 fdc0 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f34:	2b0f      	cmp	r3, #15
 8009f36:	d904      	bls.n	8009f42 <HAL_TIMEx_ConfigBreakDeadTime+0x252>
 8009f38:	f640 01f5 	movw	r1, #2293	@ 0x8f5
 8009f3c:	481f      	ldr	r0, [pc, #124]	@ (8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0x2cc>)
 8009f3e:	f7f7 fdb7 	bl	8001ab0 <assert_failed>
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <HAL_TIMEx_ConfigBreakDeadTime+0x26e>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f52:	d004      	beq.n	8009f5e <HAL_TIMEx_ConfigBreakDeadTime+0x26e>
 8009f54:	f640 01f6 	movw	r1, #2294	@ 0x8f6
 8009f58:	4818      	ldr	r0, [pc, #96]	@ (8009fbc <HAL_TIMEx_ConfigBreakDeadTime+0x2cc>)
 8009f5a:	f7f7 fda9 	bl	8001ab0 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f68:	051b      	lsls	r3, r3, #20
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	6a1b      	ldr	r3, [r3, #32]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40012c00 	.word	0x40012c00
 8009fb8:	40013400 	.word	0x40013400
 8009fbc:	08014268 	.word	0x08014268

08009fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e083      	b.n	800a166 <HAL_UART_Init+0x11a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01e      	beq.n	800a0a4 <HAL_UART_Init+0x58>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a41      	ldr	r2, [pc, #260]	@ (800a170 <HAL_UART_Init+0x124>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d037      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a3f      	ldr	r2, [pc, #252]	@ (800a174 <HAL_UART_Init+0x128>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d032      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a3e      	ldr	r2, [pc, #248]	@ (800a178 <HAL_UART_Init+0x12c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d02d      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a3c      	ldr	r2, [pc, #240]	@ (800a17c <HAL_UART_Init+0x130>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d028      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a3b      	ldr	r2, [pc, #236]	@ (800a180 <HAL_UART_Init+0x134>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d023      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a098:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 800a09c:	4839      	ldr	r0, [pc, #228]	@ (800a184 <HAL_UART_Init+0x138>)
 800a09e:	f7f7 fd07 	bl	8001ab0 <assert_failed>
 800a0a2:	e01d      	b.n	800a0e0 <HAL_UART_Init+0x94>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a31      	ldr	r2, [pc, #196]	@ (800a170 <HAL_UART_Init+0x124>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d018      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a30      	ldr	r2, [pc, #192]	@ (800a174 <HAL_UART_Init+0x128>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d013      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a2e      	ldr	r2, [pc, #184]	@ (800a178 <HAL_UART_Init+0x12c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00e      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a2d      	ldr	r2, [pc, #180]	@ (800a17c <HAL_UART_Init+0x130>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d009      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2b      	ldr	r2, [pc, #172]	@ (800a180 <HAL_UART_Init+0x134>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d004      	beq.n	800a0e0 <HAL_UART_Init+0x94>
 800a0d6:	f240 1143 	movw	r1, #323	@ 0x143
 800a0da:	482a      	ldr	r0, [pc, #168]	@ (800a184 <HAL_UART_Init+0x138>)
 800a0dc:	f7f7 fce8 	bl	8001ab0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <HAL_UART_Init+0xac>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7f8 fa1e 	bl	8002534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2224      	movs	r2, #36	@ 0x24
 800a0fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0201 	bic.w	r2, r2, #1
 800a10e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <HAL_UART_Init+0xd2>
  {
    UART_AdvFeatureConfig(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fc71 	bl	800aa00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f8c0 	bl	800a2a4 <UART_SetConfig>
 800a124:	4603      	mov	r3, r0
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e01b      	b.n	800a166 <HAL_UART_Init+0x11a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a13c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a14c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0201 	orr.w	r2, r2, #1
 800a15c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fda6 	bl	800acb0 <UART_CheckIdleState>
 800a164:	4603      	mov	r3, r0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	40013800 	.word	0x40013800
 800a174:	40004400 	.word	0x40004400
 800a178:	40004800 	.word	0x40004800
 800a17c:	40004c00 	.word	0x40004c00
 800a180:	40008000 	.word	0x40008000
 800a184:	080142a4 	.word	0x080142a4

0800a188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	@ 0x28
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	d17b      	bne.n	800a29a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <HAL_UART_Transmit+0x26>
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e074      	b.n	800a29c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2221      	movs	r2, #33	@ 0x21
 800a1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1c2:	f7f8 fb85 	bl	80028d0 <HAL_GetTick>
 800a1c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	88fa      	ldrh	r2, [r7, #6]
 800a1d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1e0:	d108      	bne.n	800a1f4 <HAL_UART_Transmit+0x6c>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d104      	bne.n	800a1f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	61bb      	str	r3, [r7, #24]
 800a1f2:	e003      	b.n	800a1fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1fc:	e030      	b.n	800a260 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2200      	movs	r2, #0
 800a206:	2180      	movs	r1, #128	@ 0x80
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 fdfb 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2220      	movs	r2, #32
 800a218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e03d      	b.n	800a29c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a234:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	3302      	adds	r3, #2
 800a23a:	61bb      	str	r3, [r7, #24]
 800a23c:	e007      	b.n	800a24e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	3301      	adds	r3, #1
 800a24c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1c8      	bne.n	800a1fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2200      	movs	r2, #0
 800a274:	2140      	movs	r1, #64	@ 0x40
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fdc4 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e006      	b.n	800a29c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	e000      	b.n	800a29c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a29a:	2302      	movs	r3, #2
  }
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2a8:	b08c      	sub	sp, #48	@ 0x30
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	4a17      	ldr	r2, [pc, #92]	@ (800a318 <UART_SetConfig+0x74>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d904      	bls.n	800a2c8 <UART_SetConfig+0x24>
 800a2be:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 800a2c2:	4816      	ldr	r0, [pc, #88]	@ (800a31c <UART_SetConfig+0x78>)
 800a2c4:	f7f7 fbf4 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d0:	d00d      	beq.n	800a2ee <UART_SetConfig+0x4a>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <UART_SetConfig+0x4a>
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2e2:	d004      	beq.n	800a2ee <UART_SetConfig+0x4a>
 800a2e4:	f640 31c8 	movw	r1, #3016	@ 0xbc8
 800a2e8:	480c      	ldr	r0, [pc, #48]	@ (800a31c <UART_SetConfig+0x78>)
 800a2ea:	f7f7 fbe1 	bl	8001ab0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a320 <UART_SetConfig+0x7c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d115      	bne.n	800a324 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d037      	beq.n	800a370 <UART_SetConfig+0xcc>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a308:	d032      	beq.n	800a370 <UART_SetConfig+0xcc>
 800a30a:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 800a30e:	4803      	ldr	r0, [pc, #12]	@ (800a31c <UART_SetConfig+0x78>)
 800a310:	f7f7 fbce 	bl	8001ab0 <assert_failed>
 800a314:	e02c      	b.n	800a370 <UART_SetConfig+0xcc>
 800a316:	bf00      	nop
 800a318:	011e1a30 	.word	0x011e1a30
 800a31c:	080142a4 	.word	0x080142a4
 800a320:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a32c:	d012      	beq.n	800a354 <UART_SetConfig+0xb0>
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00e      	beq.n	800a354 <UART_SetConfig+0xb0>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a33e:	d009      	beq.n	800a354 <UART_SetConfig+0xb0>
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a348:	d004      	beq.n	800a354 <UART_SetConfig+0xb0>
 800a34a:	f640 31cf 	movw	r1, #3023	@ 0xbcf
 800a34e:	489e      	ldr	r0, [pc, #632]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a350:	f7f7 fbae 	bl	8001ab0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d009      	beq.n	800a370 <UART_SetConfig+0xcc>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a364:	d004      	beq.n	800a370 <UART_SetConfig+0xcc>
 800a366:	f44f 613d 	mov.w	r1, #3024	@ 0xbd0
 800a36a:	4897      	ldr	r0, [pc, #604]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a36c:	f7f7 fba0 	bl	8001ab0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00e      	beq.n	800a396 <UART_SetConfig+0xf2>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a380:	d009      	beq.n	800a396 <UART_SetConfig+0xf2>
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a38a:	d004      	beq.n	800a396 <UART_SetConfig+0xf2>
 800a38c:	f640 31d3 	movw	r1, #3027	@ 0xbd3
 800a390:	488d      	ldr	r0, [pc, #564]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a392:	f7f7 fb8d 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	f023 030c 	bic.w	r3, r3, #12
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d103      	bne.n	800a3aa <UART_SetConfig+0x106>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d104      	bne.n	800a3b4 <UART_SetConfig+0x110>
 800a3aa:	f640 31d4 	movw	r1, #3028	@ 0xbd4
 800a3ae:	4886      	ldr	r0, [pc, #536]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a3b0:	f7f7 fb7e 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d013      	beq.n	800a3e4 <UART_SetConfig+0x140>
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c4:	d00e      	beq.n	800a3e4 <UART_SetConfig+0x140>
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ce:	d009      	beq.n	800a3e4 <UART_SetConfig+0x140>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3d8:	d004      	beq.n	800a3e4 <UART_SetConfig+0x140>
 800a3da:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 800a3de:	487a      	ldr	r0, [pc, #488]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a3e0:	f7f7 fb66 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d009      	beq.n	800a400 <UART_SetConfig+0x15c>
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f4:	d004      	beq.n	800a400 <UART_SetConfig+0x15c>
 800a3f6:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 800a3fa:	4873      	ldr	r0, [pc, #460]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a3fc:	f7f7 fb58 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d030      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d02c      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a414:	2b02      	cmp	r3, #2
 800a416:	d028      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d024      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a424:	2b04      	cmp	r3, #4
 800a426:	d020      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	2b05      	cmp	r3, #5
 800a42e:	d01c      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a434:	2b06      	cmp	r3, #6
 800a436:	d018      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43c:	2b07      	cmp	r3, #7
 800a43e:	d014      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a444:	2b08      	cmp	r3, #8
 800a446:	d010      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d00c      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a454:	2b0a      	cmp	r3, #10
 800a456:	d008      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45c:	2b0b      	cmp	r3, #11
 800a45e:	d004      	beq.n	800a46a <UART_SetConfig+0x1c6>
 800a460:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 800a464:	4858      	ldr	r0, [pc, #352]	@ (800a5c8 <UART_SetConfig+0x324>)
 800a466:	f7f7 fb23 	bl	8001ab0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	431a      	orrs	r2, r3
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	431a      	orrs	r2, r3
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	4313      	orrs	r3, r2
 800a480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4b50      	ldr	r3, [pc, #320]	@ (800a5cc <UART_SetConfig+0x328>)
 800a48a:	4013      	ands	r3, r2
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a492:	430b      	orrs	r3, r1
 800a494:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a46      	ldr	r2, [pc, #280]	@ (800a5d0 <UART_SetConfig+0x32c>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d004      	beq.n	800a4c6 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a4d0:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e4:	f023 010f 	bic.w	r1, r3, #15
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a36      	ldr	r2, [pc, #216]	@ (800a5d4 <UART_SetConfig+0x330>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d126      	bne.n	800a54c <UART_SetConfig+0x2a8>
 800a4fe:	4b36      	ldr	r3, [pc, #216]	@ (800a5d8 <UART_SetConfig+0x334>)
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a504:	f003 0303 	and.w	r3, r3, #3
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d81b      	bhi.n	800a544 <UART_SetConfig+0x2a0>
 800a50c:	a201      	add	r2, pc, #4	@ (adr r2, 800a514 <UART_SetConfig+0x270>)
 800a50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a512:	bf00      	nop
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a535 	.word	0x0800a535
 800a51c:	0800a52d 	.word	0x0800a52d
 800a520:	0800a53d 	.word	0x0800a53d
 800a524:	2301      	movs	r3, #1
 800a526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a52a:	e0e2      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a52c:	2302      	movs	r3, #2
 800a52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a532:	e0de      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a534:	2304      	movs	r3, #4
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53a:	e0da      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a53c:	2308      	movs	r3, #8
 800a53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a542:	e0d6      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a544:	2310      	movs	r3, #16
 800a546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a54a:	e0d2      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a22      	ldr	r2, [pc, #136]	@ (800a5dc <UART_SetConfig+0x338>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d144      	bne.n	800a5e0 <UART_SetConfig+0x33c>
 800a556:	4b20      	ldr	r3, [pc, #128]	@ (800a5d8 <UART_SetConfig+0x334>)
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a55c:	f003 030c 	and.w	r3, r3, #12
 800a560:	2b0c      	cmp	r3, #12
 800a562:	d82d      	bhi.n	800a5c0 <UART_SetConfig+0x31c>
 800a564:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <UART_SetConfig+0x2c8>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a5a1 	.word	0x0800a5a1
 800a570:	0800a5c1 	.word	0x0800a5c1
 800a574:	0800a5c1 	.word	0x0800a5c1
 800a578:	0800a5c1 	.word	0x0800a5c1
 800a57c:	0800a5b1 	.word	0x0800a5b1
 800a580:	0800a5c1 	.word	0x0800a5c1
 800a584:	0800a5c1 	.word	0x0800a5c1
 800a588:	0800a5c1 	.word	0x0800a5c1
 800a58c:	0800a5a9 	.word	0x0800a5a9
 800a590:	0800a5c1 	.word	0x0800a5c1
 800a594:	0800a5c1 	.word	0x0800a5c1
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5b9 	.word	0x0800a5b9
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a6:	e0a4      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ae:	e0a0      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5b6:	e09c      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a5b8:	2308      	movs	r3, #8
 800a5ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5be:	e098      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5c6:	e094      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a5c8:	080142a4 	.word	0x080142a4
 800a5cc:	cfff69f3 	.word	0xcfff69f3
 800a5d0:	40008000 	.word	0x40008000
 800a5d4:	40013800 	.word	0x40013800
 800a5d8:	40021000 	.word	0x40021000
 800a5dc:	40004400 	.word	0x40004400
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4aaa      	ldr	r2, [pc, #680]	@ (800a890 <UART_SetConfig+0x5ec>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d125      	bne.n	800a636 <UART_SetConfig+0x392>
 800a5ea:	4baa      	ldr	r3, [pc, #680]	@ (800a894 <UART_SetConfig+0x5f0>)
 800a5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a5f4:	2b30      	cmp	r3, #48	@ 0x30
 800a5f6:	d016      	beq.n	800a626 <UART_SetConfig+0x382>
 800a5f8:	2b30      	cmp	r3, #48	@ 0x30
 800a5fa:	d818      	bhi.n	800a62e <UART_SetConfig+0x38a>
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d00a      	beq.n	800a616 <UART_SetConfig+0x372>
 800a600:	2b20      	cmp	r3, #32
 800a602:	d814      	bhi.n	800a62e <UART_SetConfig+0x38a>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <UART_SetConfig+0x36a>
 800a608:	2b10      	cmp	r3, #16
 800a60a:	d008      	beq.n	800a61e <UART_SetConfig+0x37a>
 800a60c:	e00f      	b.n	800a62e <UART_SetConfig+0x38a>
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a614:	e06d      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a616:	2302      	movs	r3, #2
 800a618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a61c:	e069      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a61e:	2304      	movs	r3, #4
 800a620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a624:	e065      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a626:	2308      	movs	r3, #8
 800a628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a62c:	e061      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a62e:	2310      	movs	r3, #16
 800a630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a634:	e05d      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a97      	ldr	r2, [pc, #604]	@ (800a898 <UART_SetConfig+0x5f4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d125      	bne.n	800a68c <UART_SetConfig+0x3e8>
 800a640:	4b94      	ldr	r3, [pc, #592]	@ (800a894 <UART_SetConfig+0x5f0>)
 800a642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a64a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a64c:	d016      	beq.n	800a67c <UART_SetConfig+0x3d8>
 800a64e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a650:	d818      	bhi.n	800a684 <UART_SetConfig+0x3e0>
 800a652:	2b80      	cmp	r3, #128	@ 0x80
 800a654:	d00a      	beq.n	800a66c <UART_SetConfig+0x3c8>
 800a656:	2b80      	cmp	r3, #128	@ 0x80
 800a658:	d814      	bhi.n	800a684 <UART_SetConfig+0x3e0>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <UART_SetConfig+0x3c0>
 800a65e:	2b40      	cmp	r3, #64	@ 0x40
 800a660:	d008      	beq.n	800a674 <UART_SetConfig+0x3d0>
 800a662:	e00f      	b.n	800a684 <UART_SetConfig+0x3e0>
 800a664:	2300      	movs	r3, #0
 800a666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66a:	e042      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a66c:	2302      	movs	r3, #2
 800a66e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a672:	e03e      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a674:	2304      	movs	r3, #4
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67a:	e03a      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a67c:	2308      	movs	r3, #8
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a682:	e036      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a684:	2310      	movs	r3, #16
 800a686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68a:	e032      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a82      	ldr	r2, [pc, #520]	@ (800a89c <UART_SetConfig+0x5f8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d12a      	bne.n	800a6ec <UART_SetConfig+0x448>
 800a696:	4b7f      	ldr	r3, [pc, #508]	@ (800a894 <UART_SetConfig+0x5f0>)
 800a698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a69c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a6a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6a4:	d01a      	beq.n	800a6dc <UART_SetConfig+0x438>
 800a6a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6aa:	d81b      	bhi.n	800a6e4 <UART_SetConfig+0x440>
 800a6ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6b0:	d00c      	beq.n	800a6cc <UART_SetConfig+0x428>
 800a6b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6b6:	d815      	bhi.n	800a6e4 <UART_SetConfig+0x440>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <UART_SetConfig+0x420>
 800a6bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6c0:	d008      	beq.n	800a6d4 <UART_SetConfig+0x430>
 800a6c2:	e00f      	b.n	800a6e4 <UART_SetConfig+0x440>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e012      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	e00e      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6da:	e00a      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e2:	e006      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ea:	e002      	b.n	800a6f2 <UART_SetConfig+0x44e>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a69      	ldr	r2, [pc, #420]	@ (800a89c <UART_SetConfig+0x5f8>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f040 8097 	bne.w	800a82c <UART_SetConfig+0x588>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a702:	2b08      	cmp	r3, #8
 800a704:	d823      	bhi.n	800a74e <UART_SetConfig+0x4aa>
 800a706:	a201      	add	r2, pc, #4	@ (adr r2, 800a70c <UART_SetConfig+0x468>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a731 	.word	0x0800a731
 800a710:	0800a74f 	.word	0x0800a74f
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a74f 	.word	0x0800a74f
 800a71c:	0800a73f 	.word	0x0800a73f
 800a720:	0800a74f 	.word	0x0800a74f
 800a724:	0800a74f 	.word	0x0800a74f
 800a728:	0800a74f 	.word	0x0800a74f
 800a72c:	0800a747 	.word	0x0800a747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a730:	f7fb fd94 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 800a734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a736:	e010      	b.n	800a75a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a738:	4b59      	ldr	r3, [pc, #356]	@ (800a8a0 <UART_SetConfig+0x5fc>)
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a73c:	e00d      	b.n	800a75a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a73e:	f7fb fd1f 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 800a742:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a744:	e009      	b.n	800a75a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a74c:	e005      	b.n	800a75a <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 8135 	beq.w	800a9cc <UART_SetConfig+0x728>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	4a4f      	ldr	r2, [pc, #316]	@ (800a8a4 <UART_SetConfig+0x600>)
 800a768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	fbb3 f3f2 	udiv	r3, r3, r2
 800a774:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	4413      	add	r3, r2
 800a780:	69ba      	ldr	r2, [r7, #24]
 800a782:	429a      	cmp	r2, r3
 800a784:	d305      	bcc.n	800a792 <UART_SetConfig+0x4ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d903      	bls.n	800a79a <UART_SetConfig+0x4f6>
      {
        ret = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a798:	e118      	b.n	800a9cc <UART_SetConfig+0x728>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	2200      	movs	r2, #0
 800a79e:	60bb      	str	r3, [r7, #8]
 800a7a0:	60fa      	str	r2, [r7, #12]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8a4 <UART_SetConfig+0x600>)
 800a7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	603b      	str	r3, [r7, #0]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7bc:	f7f5 fd30 	bl	8000220 <__aeabi_uldivmod>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	f04f 0200 	mov.w	r2, #0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	020b      	lsls	r3, r1, #8
 800a7d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7d6:	0202      	lsls	r2, r0, #8
 800a7d8:	6979      	ldr	r1, [r7, #20]
 800a7da:	6849      	ldr	r1, [r1, #4]
 800a7dc:	0849      	lsrs	r1, r1, #1
 800a7de:	2000      	movs	r0, #0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	eb12 0804 	adds.w	r8, r2, r4
 800a7e8:	eb43 0905 	adc.w	r9, r3, r5
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	469a      	mov	sl, r3
 800a7f4:	4693      	mov	fp, r2
 800a7f6:	4652      	mov	r2, sl
 800a7f8:	465b      	mov	r3, fp
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	4649      	mov	r1, r9
 800a7fe:	f7f5 fd0f 	bl	8000220 <__aeabi_uldivmod>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4613      	mov	r3, r2
 800a808:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a810:	d308      	bcc.n	800a824 <UART_SetConfig+0x580>
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a818:	d204      	bcs.n	800a824 <UART_SetConfig+0x580>
        {
          huart->Instance->BRR = usartdiv;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6a3a      	ldr	r2, [r7, #32]
 800a820:	60da      	str	r2, [r3, #12]
 800a822:	e0d3      	b.n	800a9cc <UART_SetConfig+0x728>
        }
        else
        {
          ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a82a:	e0cf      	b.n	800a9cc <UART_SetConfig+0x728>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a834:	d173      	bne.n	800a91e <UART_SetConfig+0x67a>
  {
    switch (clocksource)
 800a836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d834      	bhi.n	800a8a8 <UART_SetConfig+0x604>
 800a83e:	a201      	add	r2, pc, #4	@ (adr r2, 800a844 <UART_SetConfig+0x5a0>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	0800a8a9 	.word	0x0800a8a9
 800a854:	0800a87f 	.word	0x0800a87f
 800a858:	0800a8a9 	.word	0x0800a8a9
 800a85c:	0800a8a9 	.word	0x0800a8a9
 800a860:	0800a8a9 	.word	0x0800a8a9
 800a864:	0800a887 	.word	0x0800a887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a868:	f7fb fcf8 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 800a86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86e:	e021      	b.n	800a8b4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a870:	f7fb fd0a 	bl	8006288 <HAL_RCC_GetPCLK2Freq>
 800a874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a876:	e01d      	b.n	800a8b4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a878:	4b09      	ldr	r3, [pc, #36]	@ (800a8a0 <UART_SetConfig+0x5fc>)
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a87c:	e01a      	b.n	800a8b4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87e:	f7fb fc7f 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 800a882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a884:	e016      	b.n	800a8b4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a88c:	e012      	b.n	800a8b4 <UART_SetConfig+0x610>
 800a88e:	bf00      	nop
 800a890:	40004800 	.word	0x40004800
 800a894:	40021000 	.word	0x40021000
 800a898:	40004c00 	.word	0x40004c00
 800a89c:	40008000 	.word	0x40008000
 800a8a0:	00f42400 	.word	0x00f42400
 800a8a4:	08014494 	.word	0x08014494
      default:
        pclk = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a8b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 8088 	beq.w	800a9cc <UART_SetConfig+0x728>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c0:	4a4d      	ldr	r2, [pc, #308]	@ (800a9f8 <UART_SetConfig+0x754>)
 800a8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ce:	005a      	lsls	r2, r3, #1
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	085b      	lsrs	r3, r3, #1
 800a8d6:	441a      	add	r2, r3
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2b0f      	cmp	r3, #15
 800a8e6:	d916      	bls.n	800a916 <UART_SetConfig+0x672>
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ee:	d212      	bcs.n	800a916 <UART_SetConfig+0x672>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	f023 030f 	bic.w	r3, r3, #15
 800a8f8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8fa:	6a3b      	ldr	r3, [r7, #32]
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	b29a      	uxth	r2, r3
 800a906:	8bfb      	ldrh	r3, [r7, #30]
 800a908:	4313      	orrs	r3, r2
 800a90a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	8bfa      	ldrh	r2, [r7, #30]
 800a912:	60da      	str	r2, [r3, #12]
 800a914:	e05a      	b.n	800a9cc <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a91c:	e056      	b.n	800a9cc <UART_SetConfig+0x728>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a91e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a922:	2b08      	cmp	r3, #8
 800a924:	d827      	bhi.n	800a976 <UART_SetConfig+0x6d2>
 800a926:	a201      	add	r2, pc, #4	@ (adr r2, 800a92c <UART_SetConfig+0x688>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a951 	.word	0x0800a951
 800a930:	0800a959 	.word	0x0800a959
 800a934:	0800a961 	.word	0x0800a961
 800a938:	0800a977 	.word	0x0800a977
 800a93c:	0800a967 	.word	0x0800a967
 800a940:	0800a977 	.word	0x0800a977
 800a944:	0800a977 	.word	0x0800a977
 800a948:	0800a977 	.word	0x0800a977
 800a94c:	0800a96f 	.word	0x0800a96f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a950:	f7fb fc84 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 800a954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a956:	e014      	b.n	800a982 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a958:	f7fb fc96 	bl	8006288 <HAL_RCC_GetPCLK2Freq>
 800a95c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a95e:	e010      	b.n	800a982 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a960:	4b26      	ldr	r3, [pc, #152]	@ (800a9fc <UART_SetConfig+0x758>)
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a964:	e00d      	b.n	800a982 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a966:	f7fb fc0b 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 800a96a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a96c:	e009      	b.n	800a982 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a974:	e005      	b.n	800a982 <UART_SetConfig+0x6de>
      default:
        pclk = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a980:	bf00      	nop
    }

    if (pclk != 0U)
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a984:	2b00      	cmp	r3, #0
 800a986:	d021      	beq.n	800a9cc <UART_SetConfig+0x728>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f8 <UART_SetConfig+0x754>)
 800a98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a992:	461a      	mov	r2, r3
 800a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a996:	fbb3 f2f2 	udiv	r2, r3, r2
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	441a      	add	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	d909      	bls.n	800a9c6 <UART_SetConfig+0x722>
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9b8:	d205      	bcs.n	800a9c6 <UART_SetConfig+0x722>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60da      	str	r2, [r3, #12]
 800a9c4:	e002      	b.n	800a9cc <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a9e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3730      	adds	r7, #48	@ 0x30
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9f6:	bf00      	nop
 800a9f8:	08014494 	.word	0x08014494
 800a9fc:	00f42400 	.word	0x00f42400

0800aa00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0c:	2bff      	cmp	r3, #255	@ 0xff
 800aa0e:	d904      	bls.n	800aa1a <UART_AdvFeatureConfig+0x1a>
 800aa10:	f640 4198 	movw	r1, #3224	@ 0xc98
 800aa14:	488e      	ldr	r0, [pc, #568]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800aa16:	f7f7 f84b 	bl	8001ab0 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d018      	beq.n	800aa58 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d009      	beq.n	800aa42 <UART_AdvFeatureConfig+0x42>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa36:	d004      	beq.n	800aa42 <UART_AdvFeatureConfig+0x42>
 800aa38:	f640 419d 	movw	r1, #3229	@ 0xc9d
 800aa3c:	4884      	ldr	r0, [pc, #528]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800aa3e:	f7f7 f837 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d018      	beq.n	800aa96 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d009      	beq.n	800aa80 <UART_AdvFeatureConfig+0x80>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa74:	d004      	beq.n	800aa80 <UART_AdvFeatureConfig+0x80>
 800aa76:	f640 41a4 	movw	r1, #3236	@ 0xca4
 800aa7a:	4875      	ldr	r0, [pc, #468]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800aa7c:	f7f7 f818 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d018      	beq.n	800aad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <UART_AdvFeatureConfig+0xbe>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab2:	d004      	beq.n	800aabe <UART_AdvFeatureConfig+0xbe>
 800aab4:	f640 41ab 	movw	r1, #3243	@ 0xcab
 800aab8:	4865      	ldr	r0, [pc, #404]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800aaba:	f7f6 fff9 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d018      	beq.n	800ab12 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <UART_AdvFeatureConfig+0xfc>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aaf0:	d004      	beq.n	800aafc <UART_AdvFeatureConfig+0xfc>
 800aaf2:	f640 41b2 	movw	r1, #3250	@ 0xcb2
 800aaf6:	4856      	ldr	r0, [pc, #344]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800aaf8:	f7f6 ffda 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab16:	f003 0310 	and.w	r3, r3, #16
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d018      	beq.n	800ab50 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <UART_AdvFeatureConfig+0x13a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab2e:	d004      	beq.n	800ab3a <UART_AdvFeatureConfig+0x13a>
 800ab30:	f640 41b9 	movw	r1, #3257	@ 0xcb9
 800ab34:	4846      	ldr	r0, [pc, #280]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800ab36:	f7f6 ffbb 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab54:	f003 0320 	and.w	r3, r3, #32
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d018      	beq.n	800ab8e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d009      	beq.n	800ab78 <UART_AdvFeatureConfig+0x178>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab6c:	d004      	beq.n	800ab78 <UART_AdvFeatureConfig+0x178>
 800ab6e:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 800ab72:	4837      	ldr	r0, [pc, #220]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800ab74:	f7f6 ff9c 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d064      	beq.n	800ac64 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ac54 <UART_AdvFeatureConfig+0x254>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d013      	beq.n	800abcc <UART_AdvFeatureConfig+0x1cc>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a2b      	ldr	r2, [pc, #172]	@ (800ac58 <UART_AdvFeatureConfig+0x258>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d00e      	beq.n	800abcc <UART_AdvFeatureConfig+0x1cc>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ac5c <UART_AdvFeatureConfig+0x25c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d009      	beq.n	800abcc <UART_AdvFeatureConfig+0x1cc>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a28      	ldr	r2, [pc, #160]	@ (800ac60 <UART_AdvFeatureConfig+0x260>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d004      	beq.n	800abcc <UART_AdvFeatureConfig+0x1cc>
 800abc2:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 800abc6:	4822      	ldr	r0, [pc, #136]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800abc8:	f7f6 ff72 	bl	8001ab0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d009      	beq.n	800abe8 <UART_AdvFeatureConfig+0x1e8>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abdc:	d004      	beq.n	800abe8 <UART_AdvFeatureConfig+0x1e8>
 800abde:	f640 41c8 	movw	r1, #3272	@ 0xcc8
 800abe2:	481b      	ldr	r0, [pc, #108]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800abe4:	f7f6 ff64 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac06:	d12d      	bne.n	800ac64 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d013      	beq.n	800ac38 <UART_AdvFeatureConfig+0x238>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac18:	d00e      	beq.n	800ac38 <UART_AdvFeatureConfig+0x238>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac22:	d009      	beq.n	800ac38 <UART_AdvFeatureConfig+0x238>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac2c:	d004      	beq.n	800ac38 <UART_AdvFeatureConfig+0x238>
 800ac2e:	f640 41cd 	movw	r1, #3277	@ 0xccd
 800ac32:	4807      	ldr	r0, [pc, #28]	@ (800ac50 <UART_AdvFeatureConfig+0x250>)
 800ac34:	f7f6 ff3c 	bl	8001ab0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
 800ac4e:	e009      	b.n	800ac64 <UART_AdvFeatureConfig+0x264>
 800ac50:	080142a4 	.word	0x080142a4
 800ac54:	40013800 	.word	0x40013800
 800ac58:	40004400 	.word	0x40004400
 800ac5c:	40004800 	.word	0x40004800
 800ac60:	40004c00 	.word	0x40004c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d018      	beq.n	800aca2 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d009      	beq.n	800ac8c <UART_AdvFeatureConfig+0x28c>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ac80:	d004      	beq.n	800ac8c <UART_AdvFeatureConfig+0x28c>
 800ac82:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 800ac86:	4809      	ldr	r0, [pc, #36]	@ (800acac <UART_AdvFeatureConfig+0x2ac>)
 800ac88:	f7f6 ff12 	bl	8001ab0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	080142a4 	.word	0x080142a4

0800acb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b098      	sub	sp, #96	@ 0x60
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acc0:	f7f7 fe06 	bl	80028d0 <HAL_GetTick>
 800acc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0308 	and.w	r3, r3, #8
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d12f      	bne.n	800ad34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acdc:	2200      	movs	r2, #0
 800acde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f88e 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d022      	beq.n	800ad34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e6      	bne.n	800acee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e063      	b.n	800adfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 0304 	and.w	r3, r3, #4
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d149      	bne.n	800add6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f857 	bl	800ae04 <UART_WaitOnFlagUntilTimeout>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d03c      	beq.n	800add6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	e853 3f00 	ldrex	r3, [r3]
 800ad68:	623b      	str	r3, [r7, #32]
   return(result);
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e6      	bne.n	800ad5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3308      	adds	r3, #8
 800ad94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	e853 3f00 	ldrex	r3, [r3]
 800ad9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f023 0301 	bic.w	r3, r3, #1
 800ada4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3308      	adds	r3, #8
 800adac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adae:	61fa      	str	r2, [r7, #28]
 800adb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	69b9      	ldr	r1, [r7, #24]
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	e841 2300 	strex	r3, r2, [r1]
 800adba:	617b      	str	r3, [r7, #20]
   return(result);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e5      	bne.n	800ad8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2220      	movs	r2, #32
 800adc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e012      	b.n	800adfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3758      	adds	r7, #88	@ 0x58
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	4613      	mov	r3, r2
 800ae12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae14:	e04f      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1c:	d04b      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1e:	f7f7 fd57 	bl	80028d0 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e04e      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d037      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b80      	cmp	r3, #128	@ 0x80
 800ae4a:	d034      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b40      	cmp	r3, #64	@ 0x40
 800ae50:	d031      	beq.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d110      	bne.n	800ae82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2208      	movs	r2, #8
 800ae66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f838 	bl	800aede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2208      	movs	r2, #8
 800ae72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e029      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae90:	d111      	bne.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 f81e 	bl	800aede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e00f      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	69da      	ldr	r2, [r3, #28]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4013      	ands	r3, r2
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	bf0c      	ite	eq
 800aec6:	2301      	moveq	r3, #1
 800aec8:	2300      	movne	r3, #0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d0a0      	beq.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aede:	b480      	push	{r7}
 800aee0:	b095      	sub	sp, #84	@ 0x54
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aefa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af04:	643b      	str	r3, [r7, #64]	@ 0x40
 800af06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af0c:	e841 2300 	strex	r3, r2, [r1]
 800af10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e6      	bne.n	800aee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3308      	adds	r3, #8
 800af1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	e853 3f00 	ldrex	r3, [r3]
 800af26:	61fb      	str	r3, [r7, #28]
   return(result);
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e3      	bne.n	800af18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af54:	2b01      	cmp	r3, #1
 800af56:	d118      	bne.n	800af8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	60bb      	str	r3, [r7, #8]
   return(result);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f023 0310 	bic.w	r3, r3, #16
 800af6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af76:	61bb      	str	r3, [r7, #24]
 800af78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	6979      	ldr	r1, [r7, #20]
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	613b      	str	r3, [r7, #16]
   return(result);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e6      	bne.n	800af58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af9e:	bf00      	nop
 800afa0:	3754      	adds	r7, #84	@ 0x54
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a27      	ldr	r2, [pc, #156]	@ (800b058 <HAL_UARTEx_DisableFifoMode+0xac>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d018      	beq.n	800aff0 <HAL_UARTEx_DisableFifoMode+0x44>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a26      	ldr	r2, [pc, #152]	@ (800b05c <HAL_UARTEx_DisableFifoMode+0xb0>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d013      	beq.n	800aff0 <HAL_UARTEx_DisableFifoMode+0x44>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a24      	ldr	r2, [pc, #144]	@ (800b060 <HAL_UARTEx_DisableFifoMode+0xb4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00e      	beq.n	800aff0 <HAL_UARTEx_DisableFifoMode+0x44>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a23      	ldr	r2, [pc, #140]	@ (800b064 <HAL_UARTEx_DisableFifoMode+0xb8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d009      	beq.n	800aff0 <HAL_UARTEx_DisableFifoMode+0x44>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a21      	ldr	r2, [pc, #132]	@ (800b068 <HAL_UARTEx_DisableFifoMode+0xbc>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d004      	beq.n	800aff0 <HAL_UARTEx_DisableFifoMode+0x44>
 800afe6:	f240 2136 	movw	r1, #566	@ 0x236
 800afea:	4820      	ldr	r0, [pc, #128]	@ (800b06c <HAL_UARTEx_DisableFifoMode+0xc0>)
 800afec:	f7f6 fd60 	bl	8001ab0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_UARTEx_DisableFifoMode+0x52>
 800affa:	2302      	movs	r3, #2
 800affc:	e027      	b.n	800b04e <HAL_UARTEx_DisableFifoMode+0xa2>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2224      	movs	r2, #36	@ 0x24
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b02c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	40013800 	.word	0x40013800
 800b05c:	40004400 	.word	0x40004400
 800b060:	40004800 	.word	0x40004800
 800b064:	40004c00 	.word	0x40004c00
 800b068:	40008000 	.word	0x40008000
 800b06c:	080142e0 	.word	0x080142e0

0800b070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a38      	ldr	r2, [pc, #224]	@ (800b160 <HAL_UARTEx_SetTxFifoThreshold+0xf0>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d018      	beq.n	800b0b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a36      	ldr	r2, [pc, #216]	@ (800b164 <HAL_UARTEx_SetTxFifoThreshold+0xf4>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a35      	ldr	r2, [pc, #212]	@ (800b168 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00e      	beq.n	800b0b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a33      	ldr	r2, [pc, #204]	@ (800b16c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d009      	beq.n	800b0b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a32      	ldr	r2, [pc, #200]	@ (800b170 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d004      	beq.n	800b0b6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b0ac:	f44f 7119 	mov.w	r1, #612	@ 0x264
 800b0b0:	4830      	ldr	r0, [pc, #192]	@ (800b174 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800b0b2:	f7f6 fcfd 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d018      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0c2:	d014      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ca:	d010      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b0d2:	d00c      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0da:	d008      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800b0e2:	d004      	beq.n	800b0ee <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 800b0e4:	f240 2165 	movw	r1, #613	@ 0x265
 800b0e8:	4822      	ldr	r0, [pc, #136]	@ (800b174 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800b0ea:	f7f6 fce1 	bl	8001ab0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e02d      	b.n	800b158 <HAL_UARTEx_SetTxFifoThreshold+0xe8>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2224      	movs	r2, #36	@ 0x24
 800b108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 0201 	bic.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f8a1 	bl	800b280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	40013800 	.word	0x40013800
 800b164:	40004400 	.word	0x40004400
 800b168:	40004800 	.word	0x40004800
 800b16c:	40004c00 	.word	0x40004c00
 800b170:	40008000 	.word	0x40008000
 800b174:	080142e0 	.word	0x080142e0

0800b178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a38      	ldr	r2, [pc, #224]	@ (800b268 <HAL_UARTEx_SetRxFifoThreshold+0xf0>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d018      	beq.n	800b1be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a36      	ldr	r2, [pc, #216]	@ (800b26c <HAL_UARTEx_SetRxFifoThreshold+0xf4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a35      	ldr	r2, [pc, #212]	@ (800b270 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00e      	beq.n	800b1be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a33      	ldr	r2, [pc, #204]	@ (800b274 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d009      	beq.n	800b1be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a32      	ldr	r2, [pc, #200]	@ (800b278 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d004      	beq.n	800b1be <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b1b4:	f240 2195 	movw	r1, #661	@ 0x295
 800b1b8:	4830      	ldr	r0, [pc, #192]	@ (800b27c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800b1ba:	f7f6 fc79 	bl	8001ab0 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d018      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1ca:	d014      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1d2:	d010      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800b1da:	d00c      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1e2:	d008      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800b1ea:	d004      	beq.n	800b1f6 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800b1ec:	f240 2196 	movw	r1, #662	@ 0x296
 800b1f0:	4822      	ldr	r0, [pc, #136]	@ (800b27c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800b1f2:	f7f6 fc5d 	bl	8001ab0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d101      	bne.n	800b204 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800b200:	2302      	movs	r3, #2
 800b202:	e02d      	b.n	800b260 <HAL_UARTEx_SetRxFifoThreshold+0xe8>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2224      	movs	r2, #36	@ 0x24
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0201 	bic.w	r2, r2, #1
 800b22a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f81d 	bl	800b280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2220      	movs	r2, #32
 800b252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	40013800 	.word	0x40013800
 800b26c:	40004400 	.word	0x40004400
 800b270:	40004800 	.word	0x40004800
 800b274:	40004c00 	.word	0x40004c00
 800b278:	40008000 	.word	0x40008000
 800b27c:	080142e0 	.word	0x080142e0

0800b280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d108      	bne.n	800b2a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2a0:	e031      	b.n	800b306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2a2:	2308      	movs	r3, #8
 800b2a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	0e5b      	lsrs	r3, r3, #25
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	0f5b      	lsrs	r3, r3, #29
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ca:	7bbb      	ldrb	r3, [r7, #14]
 800b2cc:	7b3a      	ldrb	r2, [r7, #12]
 800b2ce:	4911      	ldr	r1, [pc, #68]	@ (800b314 <UARTEx_SetNbDataToProcess+0x94>)
 800b2d0:	5c8a      	ldrb	r2, [r1, r2]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2d6:	7b3a      	ldrb	r2, [r7, #12]
 800b2d8:	490f      	ldr	r1, [pc, #60]	@ (800b318 <UARTEx_SetNbDataToProcess+0x98>)
 800b2da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	7b7a      	ldrb	r2, [r7, #13]
 800b2ec:	4909      	ldr	r1, [pc, #36]	@ (800b314 <UARTEx_SetNbDataToProcess+0x94>)
 800b2ee:	5c8a      	ldrb	r2, [r1, r2]
 800b2f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2f4:	7b7a      	ldrb	r2, [r7, #13]
 800b2f6:	4908      	ldr	r1, [pc, #32]	@ (800b318 <UARTEx_SetNbDataToProcess+0x98>)
 800b2f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	080144ac 	.word	0x080144ac
 800b318:	080144b4 	.word	0x080144b4

0800b31c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b32c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b330:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	b29a      	uxth	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b352:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b356:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b35e:	b29a      	uxth	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	b29b      	uxth	r3, r3
 800b364:	43db      	mvns	r3, r3
 800b366:	b29b      	uxth	r3, r3
 800b368:	4013      	ands	r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	1d3b      	adds	r3, r7, #4
 800b38a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b09d      	sub	sp, #116	@ 0x74
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	78db      	ldrb	r3, [r3, #3]
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d81f      	bhi.n	800b42e <USB_ActivateEndpoint+0x72>
 800b3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <USB_ActivateEndpoint+0x38>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b421 	.word	0x0800b421
 800b3fc:	0800b437 	.word	0x0800b437
 800b400:	0800b413 	.word	0x0800b413
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b40c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b410:	e012      	b.n	800b438 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b412:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b416:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b41a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b41e:	e00b      	b.n	800b438 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b420:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b424:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b428:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b42c:	e004      	b.n	800b438 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800b434:	e000      	b.n	800b438 <USB_ActivateEndpoint+0x7c>
      break;
 800b436:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	441a      	add	r2, r3
 800b442:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b44a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b44e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b456:	b29b      	uxth	r3, r3
 800b458:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	b21b      	sxth	r3, r3
 800b46a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b472:	b21a      	sxth	r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b21b      	sxth	r3, r3
 800b47a:	4313      	orrs	r3, r2
 800b47c:	b21b      	sxth	r3, r3
 800b47e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	441a      	add	r2, r3
 800b48c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b49c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	7b1b      	ldrb	r3, [r3, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f040 8178 	bne.w	800b79e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	785b      	ldrb	r3, [r3, #1]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 8084 	beq.w	800b5c0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	61bb      	str	r3, [r7, #24]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	61bb      	str	r3, [r7, #24]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	00da      	lsls	r2, r3, #3
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b4da:	617b      	str	r3, [r7, #20]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	88db      	ldrh	r3, [r3, #6]
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	005b      	lsls	r3, r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	827b      	strh	r3, [r7, #18]
 800b4fa:	8a7b      	ldrh	r3, [r7, #18]
 800b4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01b      	beq.n	800b53c <USB_ActivateEndpoint+0x180>
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b29b      	uxth	r3, r3
 800b512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b51a:	823b      	strh	r3, [r7, #16]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	441a      	add	r2, r3
 800b526:	8a3b      	ldrh	r3, [r7, #16]
 800b528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b52c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b534:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b538:	b29b      	uxth	r3, r3
 800b53a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	78db      	ldrb	r3, [r3, #3]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d020      	beq.n	800b586 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	b29b      	uxth	r3, r3
 800b552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55a:	81bb      	strh	r3, [r7, #12]
 800b55c:	89bb      	ldrh	r3, [r7, #12]
 800b55e:	f083 0320 	eor.w	r3, r3, #32
 800b562:	81bb      	strh	r3, [r7, #12]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	441a      	add	r2, r3
 800b56e:	89bb      	ldrh	r3, [r7, #12]
 800b570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b57c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b580:	b29b      	uxth	r3, r3
 800b582:	8013      	strh	r3, [r2, #0]
 800b584:	e2d5      	b.n	800bb32 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	b29b      	uxth	r3, r3
 800b594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b59c:	81fb      	strh	r3, [r7, #14]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	441a      	add	r2, r3
 800b5a8:	89fb      	ldrh	r3, [r7, #14]
 800b5aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	8013      	strh	r3, [r2, #0]
 800b5be:	e2b8      	b.n	800bb32 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d0:	4413      	add	r3, r2
 800b5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	00da      	lsls	r2, r3, #3
 800b5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5dc:	4413      	add	r3, r2
 800b5de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	88db      	ldrh	r3, [r3, #6]
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	461a      	mov	r2, r3
 800b602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b604:	4413      	add	r3, r2
 800b606:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	00da      	lsls	r2, r3, #3
 800b60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b610:	4413      	add	r3, r2
 800b612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b616:	627b      	str	r3, [r7, #36]	@ 0x24
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b622:	b29a      	uxth	r2, r3
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	801a      	strh	r2, [r3, #0]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b62e:	d91d      	bls.n	800b66c <USB_ActivateEndpoint+0x2b0>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	095b      	lsrs	r3, r3, #5
 800b636:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	f003 031f 	and.w	r3, r3, #31
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <USB_ActivateEndpoint+0x28e>
 800b644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b646:	3b01      	subs	r3, #1
 800b648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	b29a      	uxth	r2, r3
 800b650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b652:	b29b      	uxth	r3, r3
 800b654:	029b      	lsls	r3, r3, #10
 800b656:	b29b      	uxth	r3, r3
 800b658:	4313      	orrs	r3, r2
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b664:	b29a      	uxth	r2, r3
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	e026      	b.n	800b6ba <USB_ActivateEndpoint+0x2fe>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <USB_ActivateEndpoint+0x2ce>
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b682:	b29a      	uxth	r2, r3
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	801a      	strh	r2, [r3, #0]
 800b688:	e017      	b.n	800b6ba <USB_ActivateEndpoint+0x2fe>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	085b      	lsrs	r3, r3, #1
 800b690:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <USB_ActivateEndpoint+0x2e8>
 800b69e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	029b      	lsls	r3, r3, #10
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b6c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01b      	beq.n	800b70a <USB_ActivateEndpoint+0x34e>
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6e8:	843b      	strh	r3, [r7, #32]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	441a      	add	r2, r3
 800b6f4:	8c3b      	ldrh	r3, [r7, #32]
 800b6f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b706:	b29b      	uxth	r3, r3
 800b708:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d124      	bne.n	800b75c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	881b      	ldrh	r3, [r3, #0]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b728:	83bb      	strh	r3, [r7, #28]
 800b72a:	8bbb      	ldrh	r3, [r7, #28]
 800b72c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b730:	83bb      	strh	r3, [r7, #28]
 800b732:	8bbb      	ldrh	r3, [r7, #28]
 800b734:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b738:	83bb      	strh	r3, [r7, #28]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	441a      	add	r2, r3
 800b744:	8bbb      	ldrh	r3, [r7, #28]
 800b746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b74a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b74e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b756:	b29b      	uxth	r3, r3
 800b758:	8013      	strh	r3, [r2, #0]
 800b75a:	e1ea      	b.n	800bb32 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b772:	83fb      	strh	r3, [r7, #30]
 800b774:	8bfb      	ldrh	r3, [r7, #30]
 800b776:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b77a:	83fb      	strh	r3, [r7, #30]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	441a      	add	r2, r3
 800b786:	8bfb      	ldrh	r3, [r7, #30]
 800b788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b798:	b29b      	uxth	r3, r3
 800b79a:	8013      	strh	r3, [r2, #0]
 800b79c:	e1c9      	b.n	800bb32 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	78db      	ldrb	r3, [r3, #3]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d11e      	bne.n	800b7e4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	441a      	add	r2, r3
 800b7ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b7ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	8013      	strh	r3, [r2, #0]
 800b7e2:	e01d      	b.n	800b820 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	441a      	add	r2, r3
 800b808:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b80c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b830:	4413      	add	r3, r2
 800b832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	00da      	lsls	r2, r3, #3
 800b83a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b83c:	4413      	add	r3, r2
 800b83e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b842:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	891b      	ldrh	r3, [r3, #8]
 800b848:	085b      	lsrs	r3, r3, #1
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	657b      	str	r3, [r7, #84]	@ 0x54
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b85e:	b29b      	uxth	r3, r3
 800b860:	461a      	mov	r2, r3
 800b862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b864:	4413      	add	r3, r2
 800b866:	657b      	str	r3, [r7, #84]	@ 0x54
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	00da      	lsls	r2, r3, #3
 800b86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b870:	4413      	add	r3, r2
 800b872:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b876:	653b      	str	r3, [r7, #80]	@ 0x50
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	085b      	lsrs	r3, r3, #1
 800b87e:	b29b      	uxth	r3, r3
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	b29a      	uxth	r2, r3
 800b884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b886:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8093 	bne.w	800b9b8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b8a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b8a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01b      	beq.n	800b8e6 <USB_ActivateEndpoint+0x52a>
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	441a      	add	r2, r3
 800b8d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b8f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01b      	beq.n	800b936 <USB_ActivateEndpoint+0x57a>
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b914:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	441a      	add	r2, r3
 800b920:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b92a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b92e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b932:	b29b      	uxth	r3, r3
 800b934:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b94c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b94e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b950:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b954:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b956:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b958:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b95c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	441a      	add	r2, r3
 800b968:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b96a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b96e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b994:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	441a      	add	r2, r3
 800b9a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	8013      	strh	r3, [r2, #0]
 800b9b6:	e0bc      	b.n	800bb32 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b9c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b9cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01d      	beq.n	800ba10 <USB_ActivateEndpoint+0x654>
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	441a      	add	r2, r3
 800b9f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b9fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ba20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ba24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01d      	beq.n	800ba68 <USB_ActivateEndpoint+0x6ac>
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba42:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	441a      	add	r2, r3
 800ba50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ba54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	78db      	ldrb	r3, [r3, #3]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d024      	beq.n	800baba <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ba8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ba8e:	f083 0320 	eor.w	r3, r3, #32
 800ba92:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	441a      	add	r2, r3
 800baa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800baa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	8013      	strh	r3, [r2, #0]
 800bab8:	e01d      	b.n	800baf6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bacc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bad0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	441a      	add	r2, r3
 800bade:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	441a      	add	r2, r3
 800bb1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bb1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bb32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3774      	adds	r7, #116	@ 0x74
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop

0800bb44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b08d      	sub	sp, #52	@ 0x34
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	7b1b      	ldrb	r3, [r3, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f040 808e 	bne.w	800bc74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	785b      	ldrb	r3, [r3, #1]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d044      	beq.n	800bbea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	81bb      	strh	r3, [r7, #12]
 800bb6e:	89bb      	ldrh	r3, [r7, #12]
 800bb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01b      	beq.n	800bbb0 <USB_DeactivateEndpoint+0x6c>
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb8e:	817b      	strh	r3, [r7, #10]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	441a      	add	r2, r3
 800bb9a:	897b      	ldrh	r3, [r7, #10]
 800bb9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbc6:	813b      	strh	r3, [r7, #8]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	441a      	add	r2, r3
 800bbd2:	893b      	ldrh	r3, [r7, #8]
 800bbd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	8013      	strh	r3, [r2, #0]
 800bbe8:	e192      	b.n	800bf10 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	827b      	strh	r3, [r7, #18]
 800bbf8:	8a7b      	ldrh	r3, [r7, #18]
 800bbfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d01b      	beq.n	800bc3a <USB_DeactivateEndpoint+0xf6>
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc18:	823b      	strh	r3, [r7, #16]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	441a      	add	r2, r3
 800bc24:	8a3b      	ldrh	r3, [r7, #16]
 800bc26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc50:	81fb      	strh	r3, [r7, #14]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	441a      	add	r2, r3
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	8013      	strh	r3, [r2, #0]
 800bc72:	e14d      	b.n	800bf10 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	785b      	ldrb	r3, [r3, #1]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f040 80a5 	bne.w	800bdc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	843b      	strh	r3, [r7, #32]
 800bc8c:	8c3b      	ldrh	r3, [r7, #32]
 800bc8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d01b      	beq.n	800bcce <USB_DeactivateEndpoint+0x18a>
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcac:	83fb      	strh	r3, [r7, #30]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	441a      	add	r2, r3
 800bcb8:	8bfb      	ldrh	r3, [r7, #30]
 800bcba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	83bb      	strh	r3, [r7, #28]
 800bcdc:	8bbb      	ldrh	r3, [r7, #28]
 800bcde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01b      	beq.n	800bd1e <USB_DeactivateEndpoint+0x1da>
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcfc:	837b      	strh	r3, [r7, #26]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	441a      	add	r2, r3
 800bd08:	8b7b      	ldrh	r3, [r7, #26]
 800bd0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd34:	833b      	strh	r3, [r7, #24]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	441a      	add	r2, r3
 800bd40:	8b3b      	ldrh	r3, [r7, #24]
 800bd42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd6c:	82fb      	strh	r3, [r7, #22]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	441a      	add	r2, r3
 800bd78:	8afb      	ldrh	r3, [r7, #22]
 800bd7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bda0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bda4:	82bb      	strh	r3, [r7, #20]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	441a      	add	r2, r3
 800bdb0:	8abb      	ldrh	r3, [r7, #20]
 800bdb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8013      	strh	r3, [r2, #0]
 800bdc6:	e0a3      	b.n	800bf10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bdd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bdd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01b      	beq.n	800be18 <USB_DeactivateEndpoint+0x2d4>
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdf6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	441a      	add	r2, r3
 800be02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800be04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be14:	b29b      	uxth	r3, r3
 800be16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800be26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d01b      	beq.n	800be68 <USB_DeactivateEndpoint+0x324>
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be46:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	441a      	add	r2, r3
 800be52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be64:	b29b      	uxth	r3, r3
 800be66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	441a      	add	r2, r3
 800be8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800be8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	b29b      	uxth	r3, r3
 800beae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800beb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	441a      	add	r2, r3
 800bec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800becc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800beea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beee:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	441a      	add	r2, r3
 800befa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800befc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3734      	adds	r7, #52	@ 0x34
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b0c2      	sub	sp, #264	@ 0x108
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf2c:	6018      	str	r0, [r3, #0]
 800bf2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf36:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	f040 86b7 	bne.w	800ccb8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bf4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699a      	ldr	r2, [r3, #24]
 800bf56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d908      	bls.n	800bf78 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bf66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bf76:	e007      	b.n	800bf88 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bf78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	7b1b      	ldrb	r3, [r3, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d13a      	bne.n	800c00e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bf98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6959      	ldr	r1, [r3, #20]
 800bfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	88da      	ldrh	r2, [r3, #6]
 800bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bfba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bfbe:	6800      	ldr	r0, [r0, #0]
 800bfc0:	f001 fc98 	bl	800d8f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bfc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	613b      	str	r3, [r7, #16]
 800bfd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	00da      	lsls	r2, r3, #3
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	4413      	add	r3, r2
 800bffa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c004:	b29a      	uxth	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	f000 be1f 	b.w	800cc4c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	78db      	ldrb	r3, [r3, #3]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	f040 8462 	bne.w	800c8e4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6a1a      	ldr	r2, [r3, #32]
 800c02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	429a      	cmp	r2, r3
 800c03a:	f240 83df 	bls.w	800c7fc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c064:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	441a      	add	r2, r3
 800c082:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c08a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c08e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c096:	b29b      	uxth	r3, r3
 800c098:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c09a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6a1a      	ldr	r2, [r3, #32]
 800c0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0aa:	1ad2      	subs	r2, r2, r3
 800c0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 81c7 	beq.w	800c46e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d177      	bne.n	800c1ec <USB_EPStartXfer+0x2ce>
 800c0fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c10c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c116:	b29b      	uxth	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	4413      	add	r3, r2
 800c11e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	00da      	lsls	r2, r3, #3
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	4413      	add	r3, r2
 800c132:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c136:	627b      	str	r3, [r7, #36]	@ 0x24
 800c138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c142:	b29a      	uxth	r2, r3
 800c144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c14c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c14e:	d921      	bls.n	800c194 <USB_EPStartXfer+0x276>
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c154:	095b      	lsrs	r3, r3, #5
 800c156:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15e:	f003 031f 	and.w	r3, r3, #31
 800c162:	2b00      	cmp	r3, #0
 800c164:	d104      	bne.n	800c170 <USB_EPStartXfer+0x252>
 800c166:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c16a:	3b01      	subs	r3, #1
 800c16c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	b29a      	uxth	r2, r3
 800c176:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	029b      	lsls	r3, r3, #10
 800c17e:	b29b      	uxth	r3, r3
 800c180:	4313      	orrs	r3, r2
 800c182:	b29b      	uxth	r3, r3
 800c184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c190:	801a      	strh	r2, [r3, #0]
 800c192:	e050      	b.n	800c236 <USB_EPStartXfer+0x318>
 800c194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <USB_EPStartXfer+0x294>
 800c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ae:	801a      	strh	r2, [r3, #0]
 800c1b0:	e041      	b.n	800c236 <USB_EPStartXfer+0x318>
 800c1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <USB_EPStartXfer+0x2b4>
 800c1c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	029b      	lsls	r3, r3, #10
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	801a      	strh	r2, [r3, #0]
 800c1ea:	e024      	b.n	800c236 <USB_EPStartXfer+0x318>
 800c1ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d11c      	bne.n	800c236 <USB_EPStartXfer+0x318>
 800c1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	461a      	mov	r2, r3
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	4413      	add	r3, r2
 800c212:	633b      	str	r3, [r7, #48]	@ 0x30
 800c214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	00da      	lsls	r2, r3, #3
 800c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c224:	4413      	add	r3, r2
 800c226:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c230:	b29a      	uxth	r2, r3
 800c232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c234:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	895b      	ldrh	r3, [r3, #10]
 800c242:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6959      	ldr	r1, [r3, #20]
 800c252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c256:	b29b      	uxth	r3, r3
 800c258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c25c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c260:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c264:	6800      	ldr	r0, [r0, #0]
 800c266:	f001 fb45 	bl	800d8f4 <USB_WritePMA>
            ep->xfer_buff += len;
 800c26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695a      	ldr	r2, [r3, #20]
 800c276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c27a:	441a      	add	r2, r3
 800c27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c28c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6a1a      	ldr	r2, [r3, #32]
 800c294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d90f      	bls.n	800c2c4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6a1a      	ldr	r2, [r3, #32]
 800c2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b4:	1ad2      	subs	r2, r2, r3
 800c2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	621a      	str	r2, [r3, #32]
 800c2c2:	e00e      	b.n	800c2e2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	785b      	ldrb	r3, [r3, #1]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d177      	bne.n	800c3e2 <USB_EPStartXfer+0x4c4>
 800c2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	61bb      	str	r3, [r7, #24]
 800c2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	461a      	mov	r2, r3
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	4413      	add	r3, r2
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	00da      	lsls	r2, r3, #3
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	4413      	add	r3, r2
 800c328:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	b29b      	uxth	r3, r3
 800c334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c338:	b29a      	uxth	r2, r3
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	801a      	strh	r2, [r3, #0]
 800c33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c342:	2b3e      	cmp	r3, #62	@ 0x3e
 800c344:	d921      	bls.n	800c38a <USB_EPStartXfer+0x46c>
 800c346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c354:	f003 031f 	and.w	r3, r3, #31
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d104      	bne.n	800c366 <USB_EPStartXfer+0x448>
 800c35c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c360:	3b01      	subs	r3, #1
 800c362:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c370:	b29b      	uxth	r3, r3
 800c372:	029b      	lsls	r3, r3, #10
 800c374:	b29b      	uxth	r3, r3
 800c376:	4313      	orrs	r3, r2
 800c378:	b29b      	uxth	r3, r3
 800c37a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c37e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c382:	b29a      	uxth	r2, r3
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	801a      	strh	r2, [r3, #0]
 800c388:	e056      	b.n	800c438 <USB_EPStartXfer+0x51a>
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <USB_EPStartXfer+0x48a>
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	b29b      	uxth	r3, r3
 800c398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c39c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	801a      	strh	r2, [r3, #0]
 800c3a6:	e047      	b.n	800c438 <USB_EPStartXfer+0x51a>
 800c3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <USB_EPStartXfer+0x4aa>
 800c3be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	029b      	lsls	r3, r3, #10
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	801a      	strh	r2, [r3, #0]
 800c3e0:	e02a      	b.n	800c438 <USB_EPStartXfer+0x51a>
 800c3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d122      	bne.n	800c438 <USB_EPStartXfer+0x51a>
 800c3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	623b      	str	r3, [r7, #32]
 800c3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	461a      	mov	r2, r3
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	4413      	add	r3, r2
 800c414:	623b      	str	r3, [r7, #32]
 800c416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c41a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	00da      	lsls	r2, r3, #3
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	4413      	add	r3, r2
 800c428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c42c:	61fb      	str	r3, [r7, #28]
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c432:	b29a      	uxth	r2, r3
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c43c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	891b      	ldrh	r3, [r3, #8]
 800c444:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6959      	ldr	r1, [r3, #20]
 800c454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c458:	b29b      	uxth	r3, r3
 800c45a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c45e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c462:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c466:	6800      	ldr	r0, [r0, #0]
 800c468:	f001 fa44 	bl	800d8f4 <USB_WritePMA>
 800c46c:	e3ee      	b.n	800cc4c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	785b      	ldrb	r3, [r3, #1]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d177      	bne.n	800c56e <USB_EPStartXfer+0x650>
 800c47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c48e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c498:	b29b      	uxth	r3, r3
 800c49a:	461a      	mov	r2, r3
 800c49c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c49e:	4413      	add	r3, r2
 800c4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	00da      	lsls	r2, r3, #3
 800c4b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4bc:	881b      	ldrh	r3, [r3, #0]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4c8:	801a      	strh	r2, [r3, #0]
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4d0:	d921      	bls.n	800c516 <USB_EPStartXfer+0x5f8>
 800c4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d6:	095b      	lsrs	r3, r3, #5
 800c4d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e0:	f003 031f 	and.w	r3, r3, #31
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <USB_EPStartXfer+0x5d4>
 800c4e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	029b      	lsls	r3, r3, #10
 800c500:	b29b      	uxth	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	b29b      	uxth	r3, r3
 800c506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c50a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c50e:	b29a      	uxth	r2, r3
 800c510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c512:	801a      	strh	r2, [r3, #0]
 800c514:	e056      	b.n	800c5c4 <USB_EPStartXfer+0x6a6>
 800c516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <USB_EPStartXfer+0x616>
 800c51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	b29b      	uxth	r3, r3
 800c524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	e047      	b.n	800c5c4 <USB_EPStartXfer+0x6a6>
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c538:	085b      	lsrs	r3, r3, #1
 800c53a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <USB_EPStartXfer+0x636>
 800c54a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c54e:	3301      	adds	r3, #1
 800c550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c556:	881b      	ldrh	r3, [r3, #0]
 800c558:	b29a      	uxth	r2, r3
 800c55a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c55e:	b29b      	uxth	r3, r3
 800c560:	029b      	lsls	r3, r3, #10
 800c562:	b29b      	uxth	r3, r3
 800c564:	4313      	orrs	r3, r2
 800c566:	b29a      	uxth	r2, r3
 800c568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c56a:	801a      	strh	r2, [r3, #0]
 800c56c:	e02a      	b.n	800c5c4 <USB_EPStartXfer+0x6a6>
 800c56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d122      	bne.n	800c5c4 <USB_EPStartXfer+0x6a6>
 800c57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	653b      	str	r3, [r7, #80]	@ 0x50
 800c58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c58e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c598:	b29b      	uxth	r3, r3
 800c59a:	461a      	mov	r2, r3
 800c59c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c59e:	4413      	add	r3, r2
 800c5a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	00da      	lsls	r2, r3, #3
 800c5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	891b      	ldrh	r3, [r3, #8]
 800c5d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6959      	ldr	r1, [r3, #20]
 800c5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c5ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c5f2:	6800      	ldr	r0, [r0, #0]
 800c5f4:	f001 f97e 	bl	800d8f4 <USB_WritePMA>
            ep->xfer_buff += len;
 800c5f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	695a      	ldr	r2, [r3, #20]
 800c604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c608:	441a      	add	r2, r3
 800c60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a1a      	ldr	r2, [r3, #32]
 800c622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d90f      	bls.n	800c652 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6a1a      	ldr	r2, [r3, #32]
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c642:	1ad2      	subs	r2, r2, r3
 800c644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	621a      	str	r2, [r3, #32]
 800c650:	e00e      	b.n	800c670 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2200      	movs	r2, #0
 800c66e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d177      	bne.n	800c77c <USB_EPStartXfer+0x85e>
 800c68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c69c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ac:	4413      	add	r3, r2
 800c6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	00da      	lsls	r2, r3, #3
 800c6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d6:	801a      	strh	r2, [r3, #0]
 800c6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6de:	d921      	bls.n	800c724 <USB_EPStartXfer+0x806>
 800c6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e4:	095b      	lsrs	r3, r3, #5
 800c6e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ee:	f003 031f 	and.w	r3, r3, #31
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d104      	bne.n	800c700 <USB_EPStartXfer+0x7e2>
 800c6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	b29a      	uxth	r2, r3
 800c706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	029b      	lsls	r3, r3, #10
 800c70e:	b29b      	uxth	r3, r3
 800c710:	4313      	orrs	r3, r2
 800c712:	b29b      	uxth	r3, r3
 800c714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c720:	801a      	strh	r2, [r3, #0]
 800c722:	e050      	b.n	800c7c6 <USB_EPStartXfer+0x8a8>
 800c724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10a      	bne.n	800c742 <USB_EPStartXfer+0x824>
 800c72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73e:	801a      	strh	r2, [r3, #0]
 800c740:	e041      	b.n	800c7c6 <USB_EPStartXfer+0x8a8>
 800c742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c746:	085b      	lsrs	r3, r3, #1
 800c748:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <USB_EPStartXfer+0x844>
 800c758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c75c:	3301      	adds	r3, #1
 800c75e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	b29a      	uxth	r2, r3
 800c768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	029b      	lsls	r3, r3, #10
 800c770:	b29b      	uxth	r3, r3
 800c772:	4313      	orrs	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c778:	801a      	strh	r2, [r3, #0]
 800c77a:	e024      	b.n	800c7c6 <USB_EPStartXfer+0x8a8>
 800c77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	785b      	ldrb	r3, [r3, #1]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d11c      	bne.n	800c7c6 <USB_EPStartXfer+0x8a8>
 800c78c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	461a      	mov	r2, r3
 800c79e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7a0:	4413      	add	r3, r2
 800c7a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	00da      	lsls	r2, r3, #3
 800c7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	895b      	ldrh	r3, [r3, #10]
 800c7d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6959      	ldr	r1, [r3, #20]
 800c7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c7ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c7f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c7f4:	6800      	ldr	r0, [r0, #0]
 800c7f6:	f001 f87d 	bl	800d8f4 <USB_WritePMA>
 800c7fa:	e227      	b.n	800cc4c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c81a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c832:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c83a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	441a      	add	r2, r3
 800c850:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c85c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c864:	b29b      	uxth	r3, r3
 800c866:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c86c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c882:	b29b      	uxth	r3, r3
 800c884:	461a      	mov	r2, r3
 800c886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c888:	4413      	add	r3, r2
 800c88a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	00da      	lsls	r2, r3, #3
 800c89a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c89c:	4413      	add	r3, r2
 800c89e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	891b      	ldrh	r3, [r3, #8]
 800c8ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6959      	ldr	r1, [r3, #20]
 800c8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c8d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c8d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c8dc:	6800      	ldr	r0, [r0, #0]
 800c8de:	f001 f809 	bl	800d8f4 <USB_WritePMA>
 800c8e2:	e1b3      	b.n	800cc4c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c8e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6a1a      	ldr	r2, [r3, #32]
 800c8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f4:	1ad2      	subs	r2, r2, r3
 800c8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 80c6 	beq.w	800cab6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c92e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	673b      	str	r3, [r7, #112]	@ 0x70
 800c936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d177      	bne.n	800ca36 <USB_EPStartXfer+0xb18>
 800c946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c94a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c960:	b29b      	uxth	r3, r3
 800c962:	461a      	mov	r2, r3
 800c964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c966:	4413      	add	r3, r2
 800c968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c96e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	00da      	lsls	r2, r3, #3
 800c978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c97a:	4413      	add	r3, r2
 800c97c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c980:	667b      	str	r3, [r7, #100]	@ 0x64
 800c982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c990:	801a      	strh	r2, [r3, #0]
 800c992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c996:	2b3e      	cmp	r3, #62	@ 0x3e
 800c998:	d921      	bls.n	800c9de <USB_EPStartXfer+0xac0>
 800c99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c99e:	095b      	lsrs	r3, r3, #5
 800c9a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a8:	f003 031f 	and.w	r3, r3, #31
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <USB_EPStartXfer+0xa9c>
 800c9b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c9ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	029b      	lsls	r3, r3, #10
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	e050      	b.n	800ca80 <USB_EPStartXfer+0xb62>
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10a      	bne.n	800c9fc <USB_EPStartXfer+0xade>
 800c9e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9f8:	801a      	strh	r2, [r3, #0]
 800c9fa:	e041      	b.n	800ca80 <USB_EPStartXfer+0xb62>
 800c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca00:	085b      	lsrs	r3, r3, #1
 800ca02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca0a:	f003 0301 	and.w	r3, r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d004      	beq.n	800ca1c <USB_EPStartXfer+0xafe>
 800ca12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ca16:	3301      	adds	r3, #1
 800ca18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	029b      	lsls	r3, r3, #10
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca32:	801a      	strh	r2, [r3, #0]
 800ca34:	e024      	b.n	800ca80 <USB_EPStartXfer+0xb62>
 800ca36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	785b      	ldrb	r3, [r3, #1]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d11c      	bne.n	800ca80 <USB_EPStartXfer+0xb62>
 800ca46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	461a      	mov	r2, r3
 800ca58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca5a:	4413      	add	r3, r2
 800ca5c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	00da      	lsls	r2, r3, #3
 800ca6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca6e:	4413      	add	r3, r2
 800ca70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ca80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6959      	ldr	r1, [r3, #20]
 800ca9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800caa6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800caaa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800caae:	6800      	ldr	r0, [r0, #0]
 800cab0:	f000 ff20 	bl	800d8f4 <USB_WritePMA>
 800cab4:	e0ca      	b.n	800cc4c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	785b      	ldrb	r3, [r3, #1]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d177      	bne.n	800cbb6 <USB_EPStartXfer+0xc98>
 800cac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cae6:	4413      	add	r3, r2
 800cae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800caea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	00da      	lsls	r2, r3, #3
 800caf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cafa:	4413      	add	r3, r2
 800cafc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb00:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cb02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb10:	801a      	strh	r2, [r3, #0]
 800cb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb16:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb18:	d921      	bls.n	800cb5e <USB_EPStartXfer+0xc40>
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1e:	095b      	lsrs	r3, r3, #5
 800cb20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb28:	f003 031f 	and.w	r3, r3, #31
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d104      	bne.n	800cb3a <USB_EPStartXfer+0xc1c>
 800cb30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb34:	3b01      	subs	r3, #1
 800cb36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	029b      	lsls	r3, r3, #10
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb5a:	801a      	strh	r2, [r3, #0]
 800cb5c:	e05c      	b.n	800cc18 <USB_EPStartXfer+0xcfa>
 800cb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10a      	bne.n	800cb7c <USB_EPStartXfer+0xc5e>
 800cb66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb78:	801a      	strh	r2, [r3, #0]
 800cb7a:	e04d      	b.n	800cc18 <USB_EPStartXfer+0xcfa>
 800cb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb80:	085b      	lsrs	r3, r3, #1
 800cb82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8a:	f003 0301 	and.w	r3, r3, #1
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d004      	beq.n	800cb9c <USB_EPStartXfer+0xc7e>
 800cb92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb96:	3301      	adds	r3, #1
 800cb98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	029b      	lsls	r3, r3, #10
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4313      	orrs	r3, r2
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbb2:	801a      	strh	r2, [r3, #0]
 800cbb4:	e030      	b.n	800cc18 <USB_EPStartXfer+0xcfa>
 800cbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d128      	bne.n	800cc18 <USB_EPStartXfer+0xcfa>
 800cbc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cbea:	4413      	add	r3, r2
 800cbec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	00da      	lsls	r2, r3, #3
 800cbfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc02:	4413      	add	r3, r2
 800cc04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cc18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	891b      	ldrh	r3, [r3, #8]
 800cc24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6959      	ldr	r1, [r3, #20]
 800cc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cc46:	6800      	ldr	r0, [r0, #0]
 800cc48:	f000 fe54 	bl	800d8f4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc72:	817b      	strh	r3, [r7, #10]
 800cc74:	897b      	ldrh	r3, [r7, #10]
 800cc76:	f083 0310 	eor.w	r3, r3, #16
 800cc7a:	817b      	strh	r3, [r7, #10]
 800cc7c:	897b      	ldrh	r3, [r7, #10]
 800cc7e:	f083 0320 	eor.w	r3, r3, #32
 800cc82:	817b      	strh	r3, [r7, #10]
 800cc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	441a      	add	r2, r3
 800cc9e:	897b      	ldrh	r3, [r7, #10]
 800cca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	8013      	strh	r3, [r2, #0]
 800ccb4:	f000 bcde 	b.w	800d674 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ccb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	7b1b      	ldrb	r3, [r3, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f040 80bb 	bne.w	800ce40 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ccca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	699a      	ldr	r2, [r3, #24]
 800ccd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d917      	bls.n	800cd16 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800cce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ccf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	699a      	ldr	r2, [r3, #24]
 800cd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	619a      	str	r2, [r3, #24]
 800cd14:	e00e      	b.n	800cd34 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800cd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800cd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2200      	movs	r2, #0
 800cd32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cd34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	461a      	mov	r2, r3
 800cd54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd58:	4413      	add	r3, r2
 800cd5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	00da      	lsls	r2, r3, #3
 800cd6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd8c:	801a      	strh	r2, [r3, #0]
 800cd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd92:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd94:	d924      	bls.n	800cde0 <USB_EPStartXfer+0xec2>
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda4:	f003 031f 	and.w	r3, r3, #31
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d104      	bne.n	800cdb6 <USB_EPStartXfer+0xe98>
 800cdac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cdb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	029b      	lsls	r3, r3, #10
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdda:	801a      	strh	r2, [r3, #0]
 800cddc:	f000 bc10 	b.w	800d600 <USB_EPStartXfer+0x16e2>
 800cde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10c      	bne.n	800ce02 <USB_EPStartXfer+0xee4>
 800cde8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdec:	881b      	ldrh	r3, [r3, #0]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdfe:	801a      	strh	r2, [r3, #0]
 800ce00:	e3fe      	b.n	800d600 <USB_EPStartXfer+0x16e2>
 800ce02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce06:	085b      	lsrs	r3, r3, #1
 800ce08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <USB_EPStartXfer+0xf04>
 800ce18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	029b      	lsls	r3, r3, #10
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4313      	orrs	r3, r2
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce3c:	801a      	strh	r2, [r3, #0]
 800ce3e:	e3df      	b.n	800d600 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ce40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	78db      	ldrb	r3, [r3, #3]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	f040 8218 	bne.w	800d282 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ce52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	785b      	ldrb	r3, [r3, #1]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f040 809d 	bne.w	800cf9e <USB_EPStartXfer+0x1080>
 800ce64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	461a      	mov	r2, r3
 800ce84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce88:	4413      	add	r3, r2
 800ce8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	00da      	lsls	r2, r3, #3
 800ce9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cea0:	4413      	add	r3, r2
 800cea2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ceaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cebc:	801a      	strh	r2, [r3, #0]
 800cebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	2b3e      	cmp	r3, #62	@ 0x3e
 800cecc:	d92b      	bls.n	800cf26 <USB_EPStartXfer+0x1008>
 800cece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	095b      	lsrs	r3, r3, #5
 800cedc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	f003 031f 	and.w	r3, r3, #31
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d104      	bne.n	800cefe <USB_EPStartXfer+0xfe0>
 800cef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cef8:	3b01      	subs	r3, #1
 800cefa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cefe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	029b      	lsls	r3, r3, #10
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf22:	801a      	strh	r2, [r3, #0]
 800cf24:	e070      	b.n	800d008 <USB_EPStartXfer+0x10ea>
 800cf26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10c      	bne.n	800cf50 <USB_EPStartXfer+0x1032>
 800cf36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf4c:	801a      	strh	r2, [r3, #0]
 800cf4e:	e05b      	b.n	800d008 <USB_EPStartXfer+0x10ea>
 800cf50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	085b      	lsrs	r3, r3, #1
 800cf5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d004      	beq.n	800cf80 <USB_EPStartXfer+0x1062>
 800cf76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	029b      	lsls	r3, r3, #10
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4313      	orrs	r3, r2
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf9a:	801a      	strh	r2, [r3, #0]
 800cf9c:	e034      	b.n	800d008 <USB_EPStartXfer+0x10ea>
 800cf9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	785b      	ldrb	r3, [r3, #1]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d12c      	bne.n	800d008 <USB_EPStartXfer+0x10ea>
 800cfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cfd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	00da      	lsls	r2, r3, #3
 800cfe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfea:	4413      	add	r3, r2
 800cfec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	b29a      	uxth	r2, r3
 800d002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d006:	801a      	strh	r2, [r3, #0]
 800d008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	785b      	ldrb	r3, [r3, #1]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 809d 	bne.w	800d162 <USB_EPStartXfer+0x1244>
 800d028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d044:	b29b      	uxth	r3, r3
 800d046:	461a      	mov	r2, r3
 800d048:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d04c:	4413      	add	r3, r2
 800d04e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	00da      	lsls	r2, r3, #3
 800d060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d064:	4413      	add	r3, r2
 800d066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d06a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d06e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	b29b      	uxth	r3, r3
 800d076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d080:	801a      	strh	r2, [r3, #0]
 800d082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d090:	d92b      	bls.n	800d0ea <USB_EPStartXfer+0x11cc>
 800d092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	095b      	lsrs	r3, r3, #5
 800d0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	f003 031f 	and.w	r3, r3, #31
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d104      	bne.n	800d0c2 <USB_EPStartXfer+0x11a4>
 800d0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d0c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	029b      	lsls	r3, r3, #10
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0e6:	801a      	strh	r2, [r3, #0]
 800d0e8:	e069      	b.n	800d1be <USB_EPStartXfer+0x12a0>
 800d0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10c      	bne.n	800d114 <USB_EPStartXfer+0x11f6>
 800d0fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	b29b      	uxth	r3, r3
 800d102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d110:	801a      	strh	r2, [r3, #0]
 800d112:	e054      	b.n	800d1be <USB_EPStartXfer+0x12a0>
 800d114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	085b      	lsrs	r3, r3, #1
 800d122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d004      	beq.n	800d144 <USB_EPStartXfer+0x1226>
 800d13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d13e:	3301      	adds	r3, #1
 800d140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d150:	b29b      	uxth	r3, r3
 800d152:	029b      	lsls	r3, r3, #10
 800d154:	b29b      	uxth	r3, r3
 800d156:	4313      	orrs	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d15e:	801a      	strh	r2, [r3, #0]
 800d160:	e02d      	b.n	800d1be <USB_EPStartXfer+0x12a0>
 800d162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	785b      	ldrb	r3, [r3, #1]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d125      	bne.n	800d1be <USB_EPStartXfer+0x12a0>
 800d172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d180:	b29b      	uxth	r3, r3
 800d182:	461a      	mov	r2, r3
 800d184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d188:	4413      	add	r3, r2
 800d18a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	00da      	lsls	r2, r3, #3
 800d19c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d1bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 8218 	beq.w	800d600 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d1f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d1f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d005      	beq.n	800d208 <USB_EPStartXfer+0x12ea>
 800d1fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10d      	bne.n	800d224 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d208:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d20c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d210:	2b00      	cmp	r3, #0
 800d212:	f040 81f5 	bne.w	800d600 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d216:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f040 81ee 	bne.w	800d600 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29b      	uxth	r3, r3
 800d242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d24a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800d24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	441a      	add	r2, r3
 800d268:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d26c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d270:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d278:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	8013      	strh	r3, [r2, #0]
 800d280:	e1be      	b.n	800d600 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	78db      	ldrb	r3, [r3, #3]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	f040 81b4 	bne.w	800d5fc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	699a      	ldr	r2, [r3, #24]
 800d2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d917      	bls.n	800d2e0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800d2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800d2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	699a      	ldr	r2, [r3, #24]
 800d2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d0:	1ad2      	subs	r2, r2, r3
 800d2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	619a      	str	r2, [r3, #24]
 800d2de:	e00e      	b.n	800d2fe <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800d2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	699b      	ldr	r3, [r3, #24]
 800d2ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800d2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f040 8085 	bne.w	800d41a <USB_EPStartXfer+0x14fc>
 800d310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	461a      	mov	r2, r3
 800d330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d334:	4413      	add	r3, r2
 800d336:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	00da      	lsls	r2, r3, #3
 800d348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d34c:	4413      	add	r3, r2
 800d34e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d362:	b29a      	uxth	r2, r3
 800d364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d368:	801a      	strh	r2, [r3, #0]
 800d36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d36e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d370:	d923      	bls.n	800d3ba <USB_EPStartXfer+0x149c>
 800d372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d376:	095b      	lsrs	r3, r3, #5
 800d378:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d380:	f003 031f 	and.w	r3, r3, #31
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <USB_EPStartXfer+0x1474>
 800d388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d38c:	3b01      	subs	r3, #1
 800d38e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	b29a      	uxth	r2, r3
 800d39a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	029b      	lsls	r3, r3, #10
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3b6:	801a      	strh	r2, [r3, #0]
 800d3b8:	e060      	b.n	800d47c <USB_EPStartXfer+0x155e>
 800d3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10c      	bne.n	800d3dc <USB_EPStartXfer+0x14be>
 800d3c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3c6:	881b      	ldrh	r3, [r3, #0]
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3d8:	801a      	strh	r2, [r3, #0]
 800d3da:	e04f      	b.n	800d47c <USB_EPStartXfer+0x155e>
 800d3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e0:	085b      	lsrs	r3, r3, #1
 800d3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <USB_EPStartXfer+0x14de>
 800d3f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d3fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	b29a      	uxth	r2, r3
 800d404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d408:	b29b      	uxth	r3, r3
 800d40a:	029b      	lsls	r3, r3, #10
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	4313      	orrs	r3, r2
 800d410:	b29a      	uxth	r2, r3
 800d412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	e030      	b.n	800d47c <USB_EPStartXfer+0x155e>
 800d41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d128      	bne.n	800d47c <USB_EPStartXfer+0x155e>
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d446:	b29b      	uxth	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d44e:	4413      	add	r3, r2
 800d450:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	00da      	lsls	r2, r3, #3
 800d462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d466:	4413      	add	r3, r2
 800d468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d46c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d474:	b29a      	uxth	r2, r3
 800d476:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d47a:	801a      	strh	r2, [r3, #0]
 800d47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	785b      	ldrb	r3, [r3, #1]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f040 8085 	bne.w	800d5a6 <USB_EPStartXfer+0x1688>
 800d49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	00da      	lsls	r2, r3, #3
 800d4d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d4d8:	4413      	add	r3, r2
 800d4da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4f4:	801a      	strh	r2, [r3, #0]
 800d4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4fc:	d923      	bls.n	800d546 <USB_EPStartXfer+0x1628>
 800d4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d502:	095b      	lsrs	r3, r3, #5
 800d504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50c:	f003 031f 	and.w	r3, r3, #31
 800d510:	2b00      	cmp	r3, #0
 800d512:	d104      	bne.n	800d51e <USB_EPStartXfer+0x1600>
 800d514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d518:	3b01      	subs	r3, #1
 800d51a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d51e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	b29a      	uxth	r2, r3
 800d526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	029b      	lsls	r3, r3, #10
 800d52e:	b29b      	uxth	r3, r3
 800d530:	4313      	orrs	r3, r2
 800d532:	b29b      	uxth	r3, r3
 800d534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d542:	801a      	strh	r2, [r3, #0]
 800d544:	e05c      	b.n	800d600 <USB_EPStartXfer+0x16e2>
 800d546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10c      	bne.n	800d568 <USB_EPStartXfer+0x164a>
 800d54e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d552:	881b      	ldrh	r3, [r3, #0]
 800d554:	b29b      	uxth	r3, r3
 800d556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d55a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d55e:	b29a      	uxth	r2, r3
 800d560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d564:	801a      	strh	r2, [r3, #0]
 800d566:	e04b      	b.n	800d600 <USB_EPStartXfer+0x16e2>
 800d568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d56c:	085b      	lsrs	r3, r3, #1
 800d56e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d004      	beq.n	800d588 <USB_EPStartXfer+0x166a>
 800d57e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d582:	3301      	adds	r3, #1
 800d584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	b29a      	uxth	r2, r3
 800d590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d594:	b29b      	uxth	r3, r3
 800d596:	029b      	lsls	r3, r3, #10
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4313      	orrs	r3, r2
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d5a2:	801a      	strh	r2, [r3, #0]
 800d5a4:	e02c      	b.n	800d600 <USB_EPStartXfer+0x16e2>
 800d5a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	785b      	ldrb	r3, [r3, #1]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d124      	bne.n	800d600 <USB_EPStartXfer+0x16e2>
 800d5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d5cc:	4413      	add	r3, r2
 800d5ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	00da      	lsls	r2, r3, #3
 800d5e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d5e4:	4413      	add	r3, r2
 800d5e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d5f8:	801a      	strh	r2, [r3, #0]
 800d5fa:	e001      	b.n	800d600 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e03a      	b.n	800d676 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d626:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d62a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d62e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d632:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d636:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d63a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d63e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	441a      	add	r2, r3
 800d65c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d66c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d670:	b29b      	uxth	r3, r3
 800d672:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	785b      	ldrb	r3, [r3, #1]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d020      	beq.n	800d6d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6a8:	81bb      	strh	r3, [r7, #12]
 800d6aa:	89bb      	ldrh	r3, [r7, #12]
 800d6ac:	f083 0310 	eor.w	r3, r3, #16
 800d6b0:	81bb      	strh	r3, [r7, #12]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	441a      	add	r2, r3
 800d6bc:	89bb      	ldrh	r3, [r7, #12]
 800d6be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	8013      	strh	r3, [r2, #0]
 800d6d2:	e01f      	b.n	800d714 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4413      	add	r3, r2
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ea:	81fb      	strh	r3, [r7, #14]
 800d6ec:	89fb      	ldrh	r3, [r7, #14]
 800d6ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6f2:	81fb      	strh	r3, [r7, #14]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	441a      	add	r2, r3
 800d6fe:	89fb      	ldrh	r3, [r7, #14]
 800d700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d70c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d710:	b29b      	uxth	r3, r3
 800d712:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d722:	b480      	push	{r7}
 800d724:	b087      	sub	sp, #28
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	7b1b      	ldrb	r3, [r3, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 809d 	bne.w	800d870 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d04c      	beq.n	800d7d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	823b      	strh	r3, [r7, #16]
 800d74c:	8a3b      	ldrh	r3, [r7, #16]
 800d74e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d752:	2b00      	cmp	r3, #0
 800d754:	d01b      	beq.n	800d78e <USB_EPClearStall+0x6c>
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	b29b      	uxth	r3, r3
 800d764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d76c:	81fb      	strh	r3, [r7, #14]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	441a      	add	r2, r3
 800d778:	89fb      	ldrh	r3, [r7, #14]
 800d77a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d77e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d786:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	78db      	ldrb	r3, [r3, #3]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d06c      	beq.n	800d870 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ac:	81bb      	strh	r3, [r7, #12]
 800d7ae:	89bb      	ldrh	r3, [r7, #12]
 800d7b0:	f083 0320 	eor.w	r3, r3, #32
 800d7b4:	81bb      	strh	r3, [r7, #12]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	441a      	add	r2, r3
 800d7c0:	89bb      	ldrh	r3, [r7, #12]
 800d7c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	8013      	strh	r3, [r2, #0]
 800d7d6:	e04b      	b.n	800d870 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	82fb      	strh	r3, [r7, #22]
 800d7e6:	8afb      	ldrh	r3, [r7, #22]
 800d7e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01b      	beq.n	800d828 <USB_EPClearStall+0x106>
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d806:	82bb      	strh	r3, [r7, #20]
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	441a      	add	r2, r3
 800d812:	8abb      	ldrh	r3, [r7, #20]
 800d814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d81c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d824:	b29b      	uxth	r3, r3
 800d826:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	b29b      	uxth	r3, r3
 800d836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d83a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d83e:	827b      	strh	r3, [r7, #18]
 800d840:	8a7b      	ldrh	r3, [r7, #18]
 800d842:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d846:	827b      	strh	r3, [r7, #18]
 800d848:	8a7b      	ldrh	r3, [r7, #18]
 800d84a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d84e:	827b      	strh	r3, [r7, #18]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	441a      	add	r2, r3
 800d85a:	8a7b      	ldrh	r3, [r7, #18]
 800d85c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	371c      	adds	r7, #28
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d87e:	b480      	push	{r7}
 800d880:	b083      	sub	sp, #12
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	460b      	mov	r3, r1
 800d888:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d88a:	78fb      	ldrb	r3, [r7, #3]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d103      	bne.n	800d898 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2280      	movs	r2, #128	@ 0x80
 800d894:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b083      	sub	sp, #12
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b08b      	sub	sp, #44	@ 0x2c
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4611      	mov	r1, r2
 800d900:	461a      	mov	r2, r3
 800d902:	460b      	mov	r3, r1
 800d904:	80fb      	strh	r3, [r7, #6]
 800d906:	4613      	mov	r3, r2
 800d908:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d90a:	88bb      	ldrh	r3, [r7, #4]
 800d90c:	3301      	adds	r3, #1
 800d90e:	085b      	lsrs	r3, r3, #1
 800d910:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d91a:	88fa      	ldrh	r2, [r7, #6]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	4413      	add	r3, r2
 800d920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d924:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	627b      	str	r3, [r7, #36]	@ 0x24
 800d92a:	e01b      	b.n	800d964 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	3301      	adds	r3, #1
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	021b      	lsls	r3, r3, #8
 800d93a:	b21a      	sxth	r2, r3
 800d93c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d940:	4313      	orrs	r3, r2
 800d942:	b21b      	sxth	r3, r3
 800d944:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	8a7a      	ldrh	r2, [r7, #18]
 800d94a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	3302      	adds	r3, #2
 800d950:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	3301      	adds	r3, #1
 800d956:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	3301      	adds	r3, #1
 800d95c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	3b01      	subs	r3, #1
 800d962:	627b      	str	r3, [r7, #36]	@ 0x24
 800d964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1e0      	bne.n	800d92c <USB_WritePMA+0x38>
  }
}
 800d96a:	bf00      	nop
 800d96c:	bf00      	nop
 800d96e:	372c      	adds	r7, #44	@ 0x2c
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d978:	b480      	push	{r7}
 800d97a:	b08b      	sub	sp, #44	@ 0x2c
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	4611      	mov	r1, r2
 800d984:	461a      	mov	r2, r3
 800d986:	460b      	mov	r3, r1
 800d988:	80fb      	strh	r3, [r7, #6]
 800d98a:	4613      	mov	r3, r2
 800d98c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d98e:	88bb      	ldrh	r3, [r7, #4]
 800d990:	085b      	lsrs	r3, r3, #1
 800d992:	b29b      	uxth	r3, r3
 800d994:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d99e:	88fa      	ldrh	r2, [r7, #6]
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9ae:	e018      	b.n	800d9e2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
 800d9ba:	3302      	adds	r3, #2
 800d9bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	0a1b      	lsrs	r3, r3, #8
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1e3      	bne.n	800d9b0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d9e8:	88bb      	ldrh	r3, [r7, #4]
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d007      	beq.n	800da04 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	881b      	ldrh	r3, [r3, #0]
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	701a      	strb	r2, [r3, #0]
  }
}
 800da04:	bf00      	nop
 800da06:	372c      	adds	r7, #44	@ 0x2c
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da1c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800da20:	f005 fce4 	bl	80133ec <USBD_static_malloc>
 800da24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d105      	bne.n	800da38 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800da34:	2302      	movs	r3, #2
 800da36:	e066      	b.n	800db06 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	7c1b      	ldrb	r3, [r3, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d119      	bne.n	800da7c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da4c:	2202      	movs	r2, #2
 800da4e:	2181      	movs	r1, #129	@ 0x81
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f005 fb72 	bl	801313a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da60:	2202      	movs	r2, #2
 800da62:	2101      	movs	r1, #1
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f005 fb68 	bl	801313a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2210      	movs	r2, #16
 800da76:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800da7a:	e016      	b.n	800daaa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da7c:	2340      	movs	r3, #64	@ 0x40
 800da7e:	2202      	movs	r2, #2
 800da80:	2181      	movs	r1, #129	@ 0x81
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f005 fb59 	bl	801313a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da8e:	2340      	movs	r3, #64	@ 0x40
 800da90:	2202      	movs	r2, #2
 800da92:	2101      	movs	r1, #1
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f005 fb50 	bl	801313a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2210      	movs	r2, #16
 800daa6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800daaa:	2308      	movs	r3, #8
 800daac:	2203      	movs	r2, #3
 800daae:	2182      	movs	r1, #130	@ 0x82
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f005 fb42 	bl	801313a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7c1b      	ldrb	r3, [r3, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d109      	bne.n	800daf4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800daea:	2101      	movs	r1, #1
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f005 fc13 	bl	8013318 <USBD_LL_PrepareReceive>
 800daf2:	e007      	b.n	800db04 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dafa:	2340      	movs	r3, #64	@ 0x40
 800dafc:	2101      	movs	r1, #1
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f005 fc0a 	bl	8013318 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b082      	sub	sp, #8
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800db1a:	2181      	movs	r1, #129	@ 0x81
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f005 fb32 	bl	8013186 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800db28:	2101      	movs	r1, #1
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f005 fb2b 	bl	8013186 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800db38:	2182      	movs	r1, #130	@ 0x82
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f005 fb23 	bl	8013186 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00e      	beq.n	800db78 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db6a:	4618      	mov	r0, r3
 800db6c:	f005 fc4c 	bl	8013408 <USBD_static_free>
    pdev->pClassData = NULL;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
	...

0800db84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800db96:	2300      	movs	r3, #0
 800db98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800db9a:	2300      	movs	r3, #0
 800db9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e0af      	b.n	800dd0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d03f      	beq.n	800dc38 <USBD_CDC_Setup+0xb4>
 800dbb8:	2b20      	cmp	r3, #32
 800dbba:	f040 809f 	bne.w	800dcfc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	88db      	ldrh	r3, [r3, #6]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d02e      	beq.n	800dc24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	b25b      	sxtb	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	da16      	bge.n	800dbfe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800dbdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	88d2      	ldrh	r2, [r2, #6]
 800dbe2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	88db      	ldrh	r3, [r3, #6]
 800dbe8:	2b07      	cmp	r3, #7
 800dbea:	bf28      	it	cs
 800dbec:	2307      	movcs	r3, #7
 800dbee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	89fa      	ldrh	r2, [r7, #14]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f001 fa9d 	bl	800f136 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dbfc:	e085      	b.n	800dd0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	785a      	ldrb	r2, [r3, #1]
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	88db      	ldrh	r3, [r3, #6]
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800dc14:	6939      	ldr	r1, [r7, #16]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	88db      	ldrh	r3, [r3, #6]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f001 fab6 	bl	800f18e <USBD_CtlPrepareRx>
      break;
 800dc22:	e072      	b.n	800dd0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	7850      	ldrb	r0, [r2, #1]
 800dc30:	2200      	movs	r2, #0
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	4798      	blx	r3
      break;
 800dc36:	e068      	b.n	800dd0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	2b0b      	cmp	r3, #11
 800dc3e:	d852      	bhi.n	800dce6 <USBD_CDC_Setup+0x162>
 800dc40:	a201      	add	r2, pc, #4	@ (adr r2, 800dc48 <USBD_CDC_Setup+0xc4>)
 800dc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc46:	bf00      	nop
 800dc48:	0800dc79 	.word	0x0800dc79
 800dc4c:	0800dcf5 	.word	0x0800dcf5
 800dc50:	0800dce7 	.word	0x0800dce7
 800dc54:	0800dce7 	.word	0x0800dce7
 800dc58:	0800dce7 	.word	0x0800dce7
 800dc5c:	0800dce7 	.word	0x0800dce7
 800dc60:	0800dce7 	.word	0x0800dce7
 800dc64:	0800dce7 	.word	0x0800dce7
 800dc68:	0800dce7 	.word	0x0800dce7
 800dc6c:	0800dce7 	.word	0x0800dce7
 800dc70:	0800dca3 	.word	0x0800dca3
 800dc74:	0800dccd 	.word	0x0800dccd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d107      	bne.n	800dc94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dc84:	f107 030a 	add.w	r3, r7, #10
 800dc88:	2202      	movs	r2, #2
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f001 fa52 	bl	800f136 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc92:	e032      	b.n	800dcfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f001 f9dc 	bl	800f054 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc9c:	2303      	movs	r3, #3
 800dc9e:	75fb      	strb	r3, [r7, #23]
          break;
 800dca0:	e02b      	b.n	800dcfa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d107      	bne.n	800dcbe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dcae:	f107 030d 	add.w	r3, r7, #13
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f001 fa3d 	bl	800f136 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dcbc:	e01d      	b.n	800dcfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f001 f9c7 	bl	800f054 <USBD_CtlError>
            ret = USBD_FAIL;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	75fb      	strb	r3, [r7, #23]
          break;
 800dcca:	e016      	b.n	800dcfa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d00f      	beq.n	800dcf8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 f9ba 	bl	800f054 <USBD_CtlError>
            ret = USBD_FAIL;
 800dce0:	2303      	movs	r3, #3
 800dce2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dce4:	e008      	b.n	800dcf8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f001 f9b3 	bl	800f054 <USBD_CtlError>
          ret = USBD_FAIL;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	75fb      	strb	r3, [r7, #23]
          break;
 800dcf2:	e002      	b.n	800dcfa <USBD_CDC_Setup+0x176>
          break;
 800dcf4:	bf00      	nop
 800dcf6:	e008      	b.n	800dd0a <USBD_CDC_Setup+0x186>
          break;
 800dcf8:	bf00      	nop
      }
      break;
 800dcfa:	e006      	b.n	800dd0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dcfc:	6839      	ldr	r1, [r7, #0]
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f001 f9a8 	bl	800f054 <USBD_CtlError>
      ret = USBD_FAIL;
 800dd04:	2303      	movs	r3, #3
 800dd06:	75fb      	strb	r3, [r7, #23]
      break;
 800dd08:	bf00      	nop
  }

  return (uint8_t)ret;
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dd26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd32:	2303      	movs	r3, #3
 800dd34:	e04f      	b.n	800ddd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dd3e:	78fa      	ldrb	r2, [r7, #3]
 800dd40:	6879      	ldr	r1, [r7, #4]
 800dd42:	4613      	mov	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	440b      	add	r3, r1
 800dd4c:	3318      	adds	r3, #24
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d029      	beq.n	800dda8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dd54:	78fa      	ldrb	r2, [r7, #3]
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4413      	add	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	440b      	add	r3, r1
 800dd62:	3318      	adds	r3, #24
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	78f9      	ldrb	r1, [r7, #3]
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	440b      	add	r3, r1
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	4403      	add	r3, r0
 800dd74:	3320      	adds	r3, #32
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd7c:	fb01 f303 	mul.w	r3, r1, r3
 800dd80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d110      	bne.n	800dda8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dd86:	78fa      	ldrb	r2, [r7, #3]
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4413      	add	r3, r2
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	440b      	add	r3, r1
 800dd94:	3318      	adds	r3, #24
 800dd96:	2200      	movs	r2, #0
 800dd98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd9a:	78f9      	ldrb	r1, [r7, #3]
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	2200      	movs	r2, #0
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f005 fa98 	bl	80132d6 <USBD_LL_Transmit>
 800dda6:	e015      	b.n	800ddd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00b      	beq.n	800ddd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ddd0:	78fa      	ldrb	r2, [r7, #3]
 800ddd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e015      	b.n	800de2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f005 faa8 	bl	801335a <USBD_LL_GetRxDataSize>
 800de0a:	4602      	mov	r2, r0
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800de26:	4611      	mov	r1, r2
 800de28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e01a      	b.n	800de84 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d014      	beq.n	800de82 <USBD_CDC_EP0_RxReady+0x4e>
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de5e:	2bff      	cmp	r3, #255	@ 0xff
 800de60:	d00f      	beq.n	800de82 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800de70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800de78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	22ff      	movs	r2, #255	@ 0xff
 800de7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2243      	movs	r2, #67	@ 0x43
 800de98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800de9a:	4b03      	ldr	r3, [pc, #12]	@ (800dea8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	20000094 	.word	0x20000094

0800deac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2243      	movs	r2, #67	@ 0x43
 800deb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800deba:	4b03      	ldr	r3, [pc, #12]	@ (800dec8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	20000050 	.word	0x20000050

0800decc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2243      	movs	r2, #67	@ 0x43
 800ded8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800deda:	4b03      	ldr	r3, [pc, #12]	@ (800dee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dedc:	4618      	mov	r0, r3
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	200000d8 	.word	0x200000d8

0800deec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	220a      	movs	r2, #10
 800def8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800defa:	4b03      	ldr	r3, [pc, #12]	@ (800df08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	2000000c 	.word	0x2000000c

0800df0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e004      	b.n	800df2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	370c      	adds	r7, #12
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800df36:	b480      	push	{r7}
 800df38:	b087      	sub	sp, #28
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d101      	bne.n	800df54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df50:	2303      	movs	r3, #3
 800df52:	e008      	b.n	800df66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	371c      	adds	r7, #28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800df72:	b480      	push	{r7}
 800df74:	b085      	sub	sp, #20
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e004      	b.n	800df98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dfb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	e016      	b.n	800dff0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7c1b      	ldrb	r3, [r3, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d109      	bne.n	800dfde <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f005 f99e 	bl	8013318 <USBD_LL_PrepareReceive>
 800dfdc:	e007      	b.n	800dfee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfe4:	2340      	movs	r3, #64	@ 0x40
 800dfe6:	2101      	movs	r1, #1
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f005 f995 	bl	8013318 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4613      	mov	r3, r2
 800e004:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e00c:	2303      	movs	r3, #3
 800e00e:	e01f      	b.n	800e050 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d003      	beq.n	800e036 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2201      	movs	r2, #1
 800e03a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	79fa      	ldrb	r2, [r7, #7]
 800e042:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f004 fffd 	bl	8013044 <USBD_LL_Init>
 800e04a:	4603      	mov	r3, r0
 800e04c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e06c:	2303      	movs	r3, #3
 800e06e:	e016      	b.n	800e09e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00b      	beq.n	800e09c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08c:	f107 020e 	add.w	r2, r7, #14
 800e090:	4610      	mov	r0, r2
 800e092:	4798      	blx	r3
 800e094:	4602      	mov	r2, r0
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f005 f828 	bl	8013104 <USBD_LL_Start>
 800e0b4:	4603      	mov	r3, r0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d009      	beq.n	800e102 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	78fa      	ldrb	r2, [r7, #3]
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e102:	7bfb      	ldrb	r3, [r7, #15]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b082      	sub	sp, #8
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d007      	beq.n	800e132 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	78fa      	ldrb	r2, [r7, #3]
 800e12c:	4611      	mov	r1, r2
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	4798      	blx	r3
  }

  return USBD_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 ff46 	bl	800efe0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e162:	461a      	mov	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e170:	f003 031f 	and.w	r3, r3, #31
 800e174:	2b02      	cmp	r3, #2
 800e176:	d01a      	beq.n	800e1ae <USBD_LL_SetupStage+0x72>
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d822      	bhi.n	800e1c2 <USBD_LL_SetupStage+0x86>
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <USBD_LL_SetupStage+0x4a>
 800e180:	2b01      	cmp	r3, #1
 800e182:	d00a      	beq.n	800e19a <USBD_LL_SetupStage+0x5e>
 800e184:	e01d      	b.n	800e1c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f9ee 	bl	800e570 <USBD_StdDevReq>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]
      break;
 800e198:	e020      	b.n	800e1dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa52 	bl	800e64c <USBD_StdItfReq>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e1ac:	e016      	b.n	800e1dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fa91 	bl	800e6de <USBD_StdEPReq>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73fb      	strb	r3, [r7, #15]
      break;
 800e1c0:	e00c      	b.n	800e1dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e1c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f004 fff7 	bl	80131c4 <USBD_LL_StallEP>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e1da:	bf00      	nop
  }

  return ret;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b086      	sub	sp, #24
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1f4:	7afb      	ldrb	r3, [r7, #11]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d138      	bne.n	800e26c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e200:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d14a      	bne.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	429a      	cmp	r2, r3
 800e216:	d913      	bls.n	800e240 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	689a      	ldr	r2, [r3, #8]
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	1ad2      	subs	r2, r2, r3
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	68da      	ldr	r2, [r3, #12]
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	4293      	cmp	r3, r2
 800e230:	bf28      	it	cs
 800e232:	4613      	movcs	r3, r2
 800e234:	461a      	mov	r2, r3
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 ffc5 	bl	800f1c8 <USBD_CtlContinueRx>
 800e23e:	e030      	b.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b03      	cmp	r3, #3
 800e24a:	d10b      	bne.n	800e264 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 ffc0 	bl	800f1ea <USBD_CtlSendStatus>
 800e26a:	e01a      	b.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b03      	cmp	r3, #3
 800e276:	d114      	bne.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00e      	beq.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	7afa      	ldrb	r2, [r7, #11]
 800e28e:	4611      	mov	r1, r2
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	4798      	blx	r3
 800e294:	4603      	mov	r3, r0
 800e296:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e298:	7dfb      	ldrb	r3, [r7, #23]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	e000      	b.n	800e2a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e2ba:	7afb      	ldrb	r3, [r7, #11]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d16b      	bne.n	800e398 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3314      	adds	r3, #20
 800e2c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d156      	bne.n	800e37e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d914      	bls.n	800e306 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	689a      	ldr	r2, [r3, #8]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	1ad2      	subs	r2, r2, r3
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f000 ff3a 	bl	800f16c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f005 f80a 	bl	8013318 <USBD_LL_PrepareReceive>
 800e304:	e03b      	b.n	800e37e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d11c      	bne.n	800e34c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d316      	bcc.n	800e34c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e328:	429a      	cmp	r2, r3
 800e32a:	d20f      	bcs.n	800e34c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e32c:	2200      	movs	r2, #0
 800e32e:	2100      	movs	r1, #0
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 ff1b 	bl	800f16c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e33e:	2300      	movs	r3, #0
 800e340:	2200      	movs	r2, #0
 800e342:	2100      	movs	r1, #0
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f004 ffe7 	bl	8013318 <USBD_LL_PrepareReceive>
 800e34a:	e018      	b.n	800e37e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b03      	cmp	r3, #3
 800e356:	d10b      	bne.n	800e370 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d005      	beq.n	800e370 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e370:	2180      	movs	r1, #128	@ 0x80
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f004 ff26 	bl	80131c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f000 ff49 	bl	800f210 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e384:	2b01      	cmp	r3, #1
 800e386:	d122      	bne.n	800e3ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff fe98 	bl	800e0be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e396:	e01a      	b.n	800e3ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d114      	bne.n	800e3ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00e      	beq.n	800e3ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3b6:	695b      	ldr	r3, [r3, #20]
 800e3b8:	7afa      	ldrb	r2, [r7, #11]
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	4798      	blx	r3
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
 800e3cc:	e000      	b.n	800e3d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e408:	2303      	movs	r3, #3
 800e40a:	e02f      	b.n	800e46c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00f      	beq.n	800e436 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d009      	beq.n	800e436 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	6852      	ldr	r2, [r2, #4]
 800e42e:	b2d2      	uxtb	r2, r2
 800e430:	4611      	mov	r1, r2
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e436:	2340      	movs	r3, #64	@ 0x40
 800e438:	2200      	movs	r2, #0
 800e43a:	2100      	movs	r1, #0
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f004 fe7c 	bl	801313a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2240      	movs	r2, #64	@ 0x40
 800e44e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e452:	2340      	movs	r3, #64	@ 0x40
 800e454:	2200      	movs	r2, #0
 800e456:	2180      	movs	r1, #128	@ 0x80
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f004 fe6e 	bl	801313a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2201      	movs	r2, #1
 800e462:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2240      	movs	r2, #64	@ 0x40
 800e468:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	78fa      	ldrb	r2, [r7, #3]
 800e484:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	370c      	adds	r7, #12
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2204      	movs	r2, #4
 800e4ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	d106      	bne.n	800e4e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e502:	2303      	movs	r3, #3
 800e504:	e012      	b.n	800e52c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b03      	cmp	r3, #3
 800e510:	d10b      	bne.n	800e52a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e518:	69db      	ldr	r3, [r3, #28]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d005      	beq.n	800e52a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	3301      	adds	r3, #1
 800e54a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e552:	8a3b      	ldrh	r3, [r7, #16]
 800e554:	021b      	lsls	r3, r3, #8
 800e556:	b21a      	sxth	r2, r3
 800e558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b21b      	sxth	r3, r3
 800e560:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e562:	89fb      	ldrh	r3, [r7, #14]
}
 800e564:	4618      	mov	r0, r3
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e586:	2b40      	cmp	r3, #64	@ 0x40
 800e588:	d005      	beq.n	800e596 <USBD_StdDevReq+0x26>
 800e58a:	2b40      	cmp	r3, #64	@ 0x40
 800e58c:	d853      	bhi.n	800e636 <USBD_StdDevReq+0xc6>
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00b      	beq.n	800e5aa <USBD_StdDevReq+0x3a>
 800e592:	2b20      	cmp	r3, #32
 800e594:	d14f      	bne.n	800e636 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	4798      	blx	r3
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a8:	e04a      	b.n	800e640 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	785b      	ldrb	r3, [r3, #1]
 800e5ae:	2b09      	cmp	r3, #9
 800e5b0:	d83b      	bhi.n	800e62a <USBD_StdDevReq+0xba>
 800e5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5b8 <USBD_StdDevReq+0x48>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e60d 	.word	0x0800e60d
 800e5bc:	0800e621 	.word	0x0800e621
 800e5c0:	0800e62b 	.word	0x0800e62b
 800e5c4:	0800e617 	.word	0x0800e617
 800e5c8:	0800e62b 	.word	0x0800e62b
 800e5cc:	0800e5eb 	.word	0x0800e5eb
 800e5d0:	0800e5e1 	.word	0x0800e5e1
 800e5d4:	0800e62b 	.word	0x0800e62b
 800e5d8:	0800e603 	.word	0x0800e603
 800e5dc:	0800e5f5 	.word	0x0800e5f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f9de 	bl	800e9a4 <USBD_GetDescriptor>
          break;
 800e5e8:	e024      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5ea:	6839      	ldr	r1, [r7, #0]
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fb6d 	bl	800eccc <USBD_SetAddress>
          break;
 800e5f2:	e01f      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fbac 	bl	800ed54 <USBD_SetConfig>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73fb      	strb	r3, [r7, #15]
          break;
 800e600:	e018      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fc4b 	bl	800eea0 <USBD_GetConfig>
          break;
 800e60a:	e013      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fc7c 	bl	800ef0c <USBD_GetStatus>
          break;
 800e614:	e00e      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fcab 	bl	800ef74 <USBD_SetFeature>
          break;
 800e61e:	e009      	b.n	800e634 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fcba 	bl	800ef9c <USBD_ClrFeature>
          break;
 800e628:	e004      	b.n	800e634 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 fd11 	bl	800f054 <USBD_CtlError>
          break;
 800e632:	bf00      	nop
      }
      break;
 800e634:	e004      	b.n	800e640 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e636:	6839      	ldr	r1, [r7, #0]
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 fd0b 	bl	800f054 <USBD_CtlError>
      break;
 800e63e:	bf00      	nop
  }

  return ret;
 800e640:	7bfb      	ldrb	r3, [r7, #15]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop

0800e64c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e662:	2b40      	cmp	r3, #64	@ 0x40
 800e664:	d005      	beq.n	800e672 <USBD_StdItfReq+0x26>
 800e666:	2b40      	cmp	r3, #64	@ 0x40
 800e668:	d82f      	bhi.n	800e6ca <USBD_StdItfReq+0x7e>
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <USBD_StdItfReq+0x26>
 800e66e:	2b20      	cmp	r3, #32
 800e670:	d12b      	bne.n	800e6ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	3b01      	subs	r3, #1
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d81d      	bhi.n	800e6bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	889b      	ldrh	r3, [r3, #4]
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b01      	cmp	r3, #1
 800e688:	d813      	bhi.n	800e6b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	88db      	ldrh	r3, [r3, #6]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d110      	bne.n	800e6c6 <USBD_StdItfReq+0x7a>
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10d      	bne.n	800e6c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fd9d 	bl	800f1ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e6b0:	e009      	b.n	800e6c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fccd 	bl	800f054 <USBD_CtlError>
          break;
 800e6ba:	e004      	b.n	800e6c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fcc8 	bl	800f054 <USBD_CtlError>
          break;
 800e6c4:	e000      	b.n	800e6c8 <USBD_StdItfReq+0x7c>
          break;
 800e6c6:	bf00      	nop
      }
      break;
 800e6c8:	e004      	b.n	800e6d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fcc1 	bl	800f054 <USBD_CtlError>
      break;
 800e6d2:	bf00      	nop
  }

  return ret;
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	889b      	ldrh	r3, [r3, #4]
 800e6f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6fa:	2b40      	cmp	r3, #64	@ 0x40
 800e6fc:	d007      	beq.n	800e70e <USBD_StdEPReq+0x30>
 800e6fe:	2b40      	cmp	r3, #64	@ 0x40
 800e700:	f200 8145 	bhi.w	800e98e <USBD_StdEPReq+0x2b0>
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00c      	beq.n	800e722 <USBD_StdEPReq+0x44>
 800e708:	2b20      	cmp	r3, #32
 800e70a:	f040 8140 	bne.w	800e98e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	4798      	blx	r3
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]
      break;
 800e720:	e13a      	b.n	800e998 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	785b      	ldrb	r3, [r3, #1]
 800e726:	2b03      	cmp	r3, #3
 800e728:	d007      	beq.n	800e73a <USBD_StdEPReq+0x5c>
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	f300 8129 	bgt.w	800e982 <USBD_StdEPReq+0x2a4>
 800e730:	2b00      	cmp	r3, #0
 800e732:	d07f      	beq.n	800e834 <USBD_StdEPReq+0x156>
 800e734:	2b01      	cmp	r3, #1
 800e736:	d03c      	beq.n	800e7b2 <USBD_StdEPReq+0xd4>
 800e738:	e123      	b.n	800e982 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b02      	cmp	r3, #2
 800e744:	d002      	beq.n	800e74c <USBD_StdEPReq+0x6e>
 800e746:	2b03      	cmp	r3, #3
 800e748:	d016      	beq.n	800e778 <USBD_StdEPReq+0x9a>
 800e74a:	e02c      	b.n	800e7a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00d      	beq.n	800e76e <USBD_StdEPReq+0x90>
 800e752:	7bbb      	ldrb	r3, [r7, #14]
 800e754:	2b80      	cmp	r3, #128	@ 0x80
 800e756:	d00a      	beq.n	800e76e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f004 fd31 	bl	80131c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e762:	2180      	movs	r1, #128	@ 0x80
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f004 fd2d 	bl	80131c4 <USBD_LL_StallEP>
 800e76a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e76c:	e020      	b.n	800e7b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fc6f 	bl	800f054 <USBD_CtlError>
              break;
 800e776:	e01b      	b.n	800e7b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	885b      	ldrh	r3, [r3, #2]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10e      	bne.n	800e79e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00b      	beq.n	800e79e <USBD_StdEPReq+0xc0>
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	2b80      	cmp	r3, #128	@ 0x80
 800e78a:	d008      	beq.n	800e79e <USBD_StdEPReq+0xc0>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	88db      	ldrh	r3, [r3, #6]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e794:	7bbb      	ldrb	r3, [r7, #14]
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f004 fd13 	bl	80131c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fd23 	bl	800f1ea <USBD_CtlSendStatus>

              break;
 800e7a4:	e004      	b.n	800e7b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fc53 	bl	800f054 <USBD_CtlError>
              break;
 800e7ae:	bf00      	nop
          }
          break;
 800e7b0:	e0ec      	b.n	800e98c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d002      	beq.n	800e7c4 <USBD_StdEPReq+0xe6>
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	d016      	beq.n	800e7f0 <USBD_StdEPReq+0x112>
 800e7c2:	e030      	b.n	800e826 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00d      	beq.n	800e7e6 <USBD_StdEPReq+0x108>
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
 800e7cc:	2b80      	cmp	r3, #128	@ 0x80
 800e7ce:	d00a      	beq.n	800e7e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f004 fcf5 	bl	80131c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7da:	2180      	movs	r1, #128	@ 0x80
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f004 fcf1 	bl	80131c4 <USBD_LL_StallEP>
 800e7e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7e4:	e025      	b.n	800e832 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fc33 	bl	800f054 <USBD_CtlError>
              break;
 800e7ee:	e020      	b.n	800e832 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	885b      	ldrh	r3, [r3, #2]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d11b      	bne.n	800e830 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d004      	beq.n	800e80c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e802:	7bbb      	ldrb	r3, [r7, #14]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f004 fcfb 	bl	8013202 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fcec 	bl	800f1ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	4798      	blx	r3
 800e820:	4603      	mov	r3, r0
 800e822:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e824:	e004      	b.n	800e830 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fc13 	bl	800f054 <USBD_CtlError>
              break;
 800e82e:	e000      	b.n	800e832 <USBD_StdEPReq+0x154>
              break;
 800e830:	bf00      	nop
          }
          break;
 800e832:	e0ab      	b.n	800e98c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d002      	beq.n	800e846 <USBD_StdEPReq+0x168>
 800e840:	2b03      	cmp	r3, #3
 800e842:	d032      	beq.n	800e8aa <USBD_StdEPReq+0x1cc>
 800e844:	e097      	b.n	800e976 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e846:	7bbb      	ldrb	r3, [r7, #14]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d007      	beq.n	800e85c <USBD_StdEPReq+0x17e>
 800e84c:	7bbb      	ldrb	r3, [r7, #14]
 800e84e:	2b80      	cmp	r3, #128	@ 0x80
 800e850:	d004      	beq.n	800e85c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fbfd 	bl	800f054 <USBD_CtlError>
                break;
 800e85a:	e091      	b.n	800e980 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e85c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e860:	2b00      	cmp	r3, #0
 800e862:	da0b      	bge.n	800e87c <USBD_StdEPReq+0x19e>
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e86a:	4613      	mov	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4413      	add	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	3310      	adds	r3, #16
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	4413      	add	r3, r2
 800e878:	3304      	adds	r3, #4
 800e87a:	e00b      	b.n	800e894 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e87c:	7bbb      	ldrb	r3, [r7, #14]
 800e87e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	4413      	add	r3, r2
 800e892:	3304      	adds	r3, #4
 800e894:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2202      	movs	r2, #2
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fc47 	bl	800f136 <USBD_CtlSendData>
              break;
 800e8a8:	e06a      	b.n	800e980 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e8aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da11      	bge.n	800e8d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e8b2:	7bbb      	ldrb	r3, [r7, #14]
 800e8b4:	f003 020f 	and.w	r2, r3, #15
 800e8b8:	6879      	ldr	r1, [r7, #4]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	4413      	add	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	440b      	add	r3, r1
 800e8c4:	3324      	adds	r3, #36	@ 0x24
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d117      	bne.n	800e8fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8cc:	6839      	ldr	r1, [r7, #0]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 fbc0 	bl	800f054 <USBD_CtlError>
                  break;
 800e8d4:	e054      	b.n	800e980 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8d6:	7bbb      	ldrb	r3, [r7, #14]
 800e8d8:	f003 020f 	and.w	r2, r3, #15
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	440b      	add	r3, r1
 800e8e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d104      	bne.n	800e8fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fbad 	bl	800f054 <USBD_CtlError>
                  break;
 800e8fa:	e041      	b.n	800e980 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e900:	2b00      	cmp	r3, #0
 800e902:	da0b      	bge.n	800e91c <USBD_StdEPReq+0x23e>
 800e904:	7bbb      	ldrb	r3, [r7, #14]
 800e906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e90a:	4613      	mov	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	3310      	adds	r3, #16
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	4413      	add	r3, r2
 800e918:	3304      	adds	r3, #4
 800e91a:	e00b      	b.n	800e934 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e922:	4613      	mov	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	4413      	add	r3, r2
 800e932:	3304      	adds	r3, #4
 800e934:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e936:	7bbb      	ldrb	r3, [r7, #14]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <USBD_StdEPReq+0x264>
 800e93c:	7bbb      	ldrb	r3, [r7, #14]
 800e93e:	2b80      	cmp	r3, #128	@ 0x80
 800e940:	d103      	bne.n	800e94a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2200      	movs	r2, #0
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	e00e      	b.n	800e968 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e94a:	7bbb      	ldrb	r3, [r7, #14]
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f004 fc76 	bl	8013240 <USBD_LL_IsStallEP>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2201      	movs	r2, #1
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e002      	b.n	800e968 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2202      	movs	r2, #2
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 fbe1 	bl	800f136 <USBD_CtlSendData>
              break;
 800e974:	e004      	b.n	800e980 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fb6b 	bl	800f054 <USBD_CtlError>
              break;
 800e97e:	bf00      	nop
          }
          break;
 800e980:	e004      	b.n	800e98c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 fb65 	bl	800f054 <USBD_CtlError>
          break;
 800e98a:	bf00      	nop
      }
      break;
 800e98c:	e004      	b.n	800e998 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fb5f 	bl	800f054 <USBD_CtlError>
      break;
 800e996:	bf00      	nop
  }

  return ret;
 800e998:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	885b      	ldrh	r3, [r3, #2]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	2b0e      	cmp	r3, #14
 800e9c6:	f200 8152 	bhi.w	800ec6e <USBD_GetDescriptor+0x2ca>
 800e9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d0 <USBD_GetDescriptor+0x2c>)
 800e9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d0:	0800ea41 	.word	0x0800ea41
 800e9d4:	0800ea59 	.word	0x0800ea59
 800e9d8:	0800ea99 	.word	0x0800ea99
 800e9dc:	0800ec6f 	.word	0x0800ec6f
 800e9e0:	0800ec6f 	.word	0x0800ec6f
 800e9e4:	0800ec0f 	.word	0x0800ec0f
 800e9e8:	0800ec3b 	.word	0x0800ec3b
 800e9ec:	0800ec6f 	.word	0x0800ec6f
 800e9f0:	0800ec6f 	.word	0x0800ec6f
 800e9f4:	0800ec6f 	.word	0x0800ec6f
 800e9f8:	0800ec6f 	.word	0x0800ec6f
 800e9fc:	0800ec6f 	.word	0x0800ec6f
 800ea00:	0800ec6f 	.word	0x0800ec6f
 800ea04:	0800ec6f 	.word	0x0800ec6f
 800ea08:	0800ea0d 	.word	0x0800ea0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea12:	69db      	ldr	r3, [r3, #28]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00b      	beq.n	800ea30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	7c12      	ldrb	r2, [r2, #16]
 800ea24:	f107 0108 	add.w	r1, r7, #8
 800ea28:	4610      	mov	r0, r2
 800ea2a:	4798      	blx	r3
 800ea2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea2e:	e126      	b.n	800ec7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 fb0e 	bl	800f054 <USBD_CtlError>
        err++;
 800ea38:	7afb      	ldrb	r3, [r7, #11]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	72fb      	strb	r3, [r7, #11]
      break;
 800ea3e:	e11e      	b.n	800ec7e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	7c12      	ldrb	r2, [r2, #16]
 800ea4c:	f107 0108 	add.w	r1, r7, #8
 800ea50:	4610      	mov	r0, r2
 800ea52:	4798      	blx	r3
 800ea54:	60f8      	str	r0, [r7, #12]
      break;
 800ea56:	e112      	b.n	800ec7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	7c1b      	ldrb	r3, [r3, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10d      	bne.n	800ea7c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea68:	f107 0208 	add.w	r2, r7, #8
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	4798      	blx	r3
 800ea70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	3301      	adds	r3, #1
 800ea76:	2202      	movs	r2, #2
 800ea78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea7a:	e100      	b.n	800ec7e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea84:	f107 0208 	add.w	r2, r7, #8
 800ea88:	4610      	mov	r0, r2
 800ea8a:	4798      	blx	r3
 800ea8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3301      	adds	r3, #1
 800ea92:	2202      	movs	r2, #2
 800ea94:	701a      	strb	r2, [r3, #0]
      break;
 800ea96:	e0f2      	b.n	800ec7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	885b      	ldrh	r3, [r3, #2]
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b05      	cmp	r3, #5
 800eaa0:	f200 80ac 	bhi.w	800ebfc <USBD_GetDescriptor+0x258>
 800eaa4:	a201      	add	r2, pc, #4	@ (adr r2, 800eaac <USBD_GetDescriptor+0x108>)
 800eaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaaa:	bf00      	nop
 800eaac:	0800eac5 	.word	0x0800eac5
 800eab0:	0800eaf9 	.word	0x0800eaf9
 800eab4:	0800eb2d 	.word	0x0800eb2d
 800eab8:	0800eb61 	.word	0x0800eb61
 800eabc:	0800eb95 	.word	0x0800eb95
 800eac0:	0800ebc9 	.word	0x0800ebc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00b      	beq.n	800eae8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	7c12      	ldrb	r2, [r2, #16]
 800eadc:	f107 0108 	add.w	r1, r7, #8
 800eae0:	4610      	mov	r0, r2
 800eae2:	4798      	blx	r3
 800eae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eae6:	e091      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fab2 	bl	800f054 <USBD_CtlError>
            err++;
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	72fb      	strb	r3, [r7, #11]
          break;
 800eaf6:	e089      	b.n	800ec0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00b      	beq.n	800eb1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	7c12      	ldrb	r2, [r2, #16]
 800eb10:	f107 0108 	add.w	r1, r7, #8
 800eb14:	4610      	mov	r0, r2
 800eb16:	4798      	blx	r3
 800eb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb1a:	e077      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 fa98 	bl	800f054 <USBD_CtlError>
            err++;
 800eb24:	7afb      	ldrb	r3, [r7, #11]
 800eb26:	3301      	adds	r3, #1
 800eb28:	72fb      	strb	r3, [r7, #11]
          break;
 800eb2a:	e06f      	b.n	800ec0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	7c12      	ldrb	r2, [r2, #16]
 800eb44:	f107 0108 	add.w	r1, r7, #8
 800eb48:	4610      	mov	r0, r2
 800eb4a:	4798      	blx	r3
 800eb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb4e:	e05d      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fa7e 	bl	800f054 <USBD_CtlError>
            err++;
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb5e:	e055      	b.n	800ec0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	7c12      	ldrb	r2, [r2, #16]
 800eb78:	f107 0108 	add.w	r1, r7, #8
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	4798      	blx	r3
 800eb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb82:	e043      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fa64 	bl	800f054 <USBD_CtlError>
            err++;
 800eb8c:	7afb      	ldrb	r3, [r7, #11]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	72fb      	strb	r3, [r7, #11]
          break;
 800eb92:	e03b      	b.n	800ec0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eba6:	695b      	ldr	r3, [r3, #20]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	7c12      	ldrb	r2, [r2, #16]
 800ebac:	f107 0108 	add.w	r1, r7, #8
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4798      	blx	r3
 800ebb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebb6:	e029      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa4a 	bl	800f054 <USBD_CtlError>
            err++;
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebc6:	e021      	b.n	800ec0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00b      	beq.n	800ebec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	7c12      	ldrb	r2, [r2, #16]
 800ebe0:	f107 0108 	add.w	r1, r7, #8
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4798      	blx	r3
 800ebe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ebea:	e00f      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fa30 	bl	800f054 <USBD_CtlError>
            err++;
 800ebf4:	7afb      	ldrb	r3, [r7, #11]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ebfa:	e007      	b.n	800ec0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fa28 	bl	800f054 <USBD_CtlError>
          err++;
 800ec04:	7afb      	ldrb	r3, [r7, #11]
 800ec06:	3301      	adds	r3, #1
 800ec08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ec0a:	bf00      	nop
      }
      break;
 800ec0c:	e037      	b.n	800ec7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	7c1b      	ldrb	r3, [r3, #16]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d109      	bne.n	800ec2a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec1e:	f107 0208 	add.w	r2, r7, #8
 800ec22:	4610      	mov	r0, r2
 800ec24:	4798      	blx	r3
 800ec26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec28:	e029      	b.n	800ec7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fa11 	bl	800f054 <USBD_CtlError>
        err++;
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	3301      	adds	r3, #1
 800ec36:	72fb      	strb	r3, [r7, #11]
      break;
 800ec38:	e021      	b.n	800ec7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10d      	bne.n	800ec5e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec4a:	f107 0208 	add.w	r2, r7, #8
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	3301      	adds	r3, #1
 800ec58:	2207      	movs	r2, #7
 800ec5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec5c:	e00f      	b.n	800ec7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f9f7 	bl	800f054 <USBD_CtlError>
        err++;
 800ec66:	7afb      	ldrb	r3, [r7, #11]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ec6c:	e007      	b.n	800ec7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f9ef 	bl	800f054 <USBD_CtlError>
      err++;
 800ec76:	7afb      	ldrb	r3, [r7, #11]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ec7c:	bf00      	nop
  }

  if (err != 0U)
 800ec7e:	7afb      	ldrb	r3, [r7, #11]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d11e      	bne.n	800ecc2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	88db      	ldrh	r3, [r3, #6]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d016      	beq.n	800ecba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec8c:	893b      	ldrh	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00e      	beq.n	800ecb0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	88da      	ldrh	r2, [r3, #6]
 800ec96:	893b      	ldrh	r3, [r7, #8]
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	bf28      	it	cs
 800ec9c:	4613      	movcs	r3, r2
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eca2:	893b      	ldrh	r3, [r7, #8]
 800eca4:	461a      	mov	r2, r3
 800eca6:	68f9      	ldr	r1, [r7, #12]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fa44 	bl	800f136 <USBD_CtlSendData>
 800ecae:	e009      	b.n	800ecc4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f9ce 	bl	800f054 <USBD_CtlError>
 800ecb8:	e004      	b.n	800ecc4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fa95 	bl	800f1ea <USBD_CtlSendStatus>
 800ecc0:	e000      	b.n	800ecc4 <USBD_GetDescriptor+0x320>
    return;
 800ecc2:	bf00      	nop
  }
}
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop

0800eccc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	889b      	ldrh	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d131      	bne.n	800ed42 <USBD_SetAddress+0x76>
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	88db      	ldrh	r3, [r3, #6]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d12d      	bne.n	800ed42 <USBD_SetAddress+0x76>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	885b      	ldrh	r3, [r3, #2]
 800ecea:	2b7f      	cmp	r3, #127	@ 0x7f
 800ecec:	d829      	bhi.n	800ed42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	885b      	ldrh	r3, [r3, #2]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d104      	bne.n	800ed10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f9a3 	bl	800f054 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed0e:	e01d      	b.n	800ed4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	7bfa      	ldrb	r2, [r7, #15]
 800ed14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f004 fabb 	bl	8013298 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fa61 	bl	800f1ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d004      	beq.n	800ed38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2202      	movs	r2, #2
 800ed32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed36:	e009      	b.n	800ed4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed40:	e004      	b.n	800ed4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 f985 	bl	800f054 <USBD_CtlError>
  }
}
 800ed4a:	bf00      	nop
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	4b4c      	ldr	r3, [pc, #304]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ed6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed6c:	4b4b      	ldr	r3, [pc, #300]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d905      	bls.n	800ed80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f96c 	bl	800f054 <USBD_CtlError>
    return USBD_FAIL;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e088      	b.n	800ee92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d002      	beq.n	800ed92 <USBD_SetConfig+0x3e>
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	d025      	beq.n	800eddc <USBD_SetConfig+0x88>
 800ed90:	e071      	b.n	800ee76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed92:	4b42      	ldr	r3, [pc, #264]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d01c      	beq.n	800edd4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ed9a:	4b40      	ldr	r3, [pc, #256]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eda4:	4b3d      	ldr	r3, [pc, #244]	@ (800ee9c <USBD_SetConfig+0x148>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7ff f992 	bl	800e0d4 <USBD_SetClassConfig>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d004      	beq.n	800edc4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f949 	bl	800f054 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edc2:	e065      	b.n	800ee90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 fa10 	bl	800f1ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2203      	movs	r2, #3
 800edce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800edd2:	e05d      	b.n	800ee90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 fa08 	bl	800f1ea <USBD_CtlSendStatus>
      break;
 800edda:	e059      	b.n	800ee90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eddc:	4b2f      	ldr	r3, [pc, #188]	@ (800ee9c <USBD_SetConfig+0x148>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d112      	bne.n	800ee0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2202      	movs	r2, #2
 800ede8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800edec:	4b2b      	ldr	r3, [pc, #172]	@ (800ee9c <USBD_SetConfig+0x148>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	461a      	mov	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edf6:	4b29      	ldr	r3, [pc, #164]	@ (800ee9c <USBD_SetConfig+0x148>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff f985 	bl	800e10c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f9f1 	bl	800f1ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee08:	e042      	b.n	800ee90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ee0a:	4b24      	ldr	r3, [pc, #144]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d02a      	beq.n	800ee6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff f973 	bl	800e10c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee26:	4b1d      	ldr	r3, [pc, #116]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee30:	4b1a      	ldr	r3, [pc, #104]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7ff f94c 	bl	800e0d4 <USBD_SetClassConfig>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee40:	7bfb      	ldrb	r3, [r7, #15]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00f      	beq.n	800ee66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f903 	bl	800f054 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff f958 	bl	800e10c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee64:	e014      	b.n	800ee90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f9bf 	bl	800f1ea <USBD_CtlSendStatus>
      break;
 800ee6c:	e010      	b.n	800ee90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f9bb 	bl	800f1ea <USBD_CtlSendStatus>
      break;
 800ee74:	e00c      	b.n	800ee90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 f8eb 	bl	800f054 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee7e:	4b07      	ldr	r3, [pc, #28]	@ (800ee9c <USBD_SetConfig+0x148>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff f941 	bl	800e10c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8e:	bf00      	nop
  }

  return ret;
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000b40 	.word	0x20000b40

0800eea0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	88db      	ldrh	r3, [r3, #6]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d004      	beq.n	800eebc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f8cd 	bl	800f054 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eeba:	e023      	b.n	800ef04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	dc02      	bgt.n	800eece <USBD_GetConfig+0x2e>
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	dc03      	bgt.n	800eed4 <USBD_GetConfig+0x34>
 800eecc:	e015      	b.n	800eefa <USBD_GetConfig+0x5a>
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d00b      	beq.n	800eeea <USBD_GetConfig+0x4a>
 800eed2:	e012      	b.n	800eefa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2200      	movs	r2, #0
 800eed8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	3308      	adds	r3, #8
 800eede:	2201      	movs	r2, #1
 800eee0:	4619      	mov	r1, r3
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 f927 	bl	800f136 <USBD_CtlSendData>
        break;
 800eee8:	e00c      	b.n	800ef04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	3304      	adds	r3, #4
 800eeee:	2201      	movs	r2, #1
 800eef0:	4619      	mov	r1, r3
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 f91f 	bl	800f136 <USBD_CtlSendData>
        break;
 800eef8:	e004      	b.n	800ef04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f8a9 	bl	800f054 <USBD_CtlError>
        break;
 800ef02:	bf00      	nop
}
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	3b01      	subs	r3, #1
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d81e      	bhi.n	800ef62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	88db      	ldrh	r3, [r3, #6]
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d004      	beq.n	800ef36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 f890 	bl	800f054 <USBD_CtlError>
        break;
 800ef34:	e01a      	b.n	800ef6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d005      	beq.n	800ef52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	f043 0202 	orr.w	r2, r3, #2
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	330c      	adds	r3, #12
 800ef56:	2202      	movs	r2, #2
 800ef58:	4619      	mov	r1, r3
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f8eb 	bl	800f136 <USBD_CtlSendData>
      break;
 800ef60:	e004      	b.n	800ef6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f875 	bl	800f054 <USBD_CtlError>
      break;
 800ef6a:	bf00      	nop
  }
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	885b      	ldrh	r3, [r3, #2]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d106      	bne.n	800ef94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f92b 	bl	800f1ea <USBD_CtlSendStatus>
  }
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efac:	b2db      	uxtb	r3, r3
 800efae:	3b01      	subs	r3, #1
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d80b      	bhi.n	800efcc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	885b      	ldrh	r3, [r3, #2]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d10c      	bne.n	800efd6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 f910 	bl	800f1ea <USBD_CtlSendStatus>
      }
      break;
 800efca:	e004      	b.n	800efd6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f840 	bl	800f054 <USBD_CtlError>
      break;
 800efd4:	e000      	b.n	800efd8 <USBD_ClrFeature+0x3c>
      break;
 800efd6:	bf00      	nop
  }
}
 800efd8:	bf00      	nop
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	781a      	ldrb	r2, [r3, #0]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3301      	adds	r3, #1
 800effa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	781a      	ldrb	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3301      	adds	r3, #1
 800f008:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff fa92 	bl	800e534 <SWAPBYTE>
 800f010:	4603      	mov	r3, r0
 800f012:	461a      	mov	r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3301      	adds	r3, #1
 800f01c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3301      	adds	r3, #1
 800f022:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff fa85 	bl	800e534 <SWAPBYTE>
 800f02a:	4603      	mov	r3, r0
 800f02c:	461a      	mov	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3301      	adds	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	3301      	adds	r3, #1
 800f03c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7ff fa78 	bl	800e534 <SWAPBYTE>
 800f044:	4603      	mov	r3, r0
 800f046:	461a      	mov	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	80da      	strh	r2, [r3, #6]
}
 800f04c:	bf00      	nop
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f05e:	2180      	movs	r1, #128	@ 0x80
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f004 f8af 	bl	80131c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f066:	2100      	movs	r1, #0
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f004 f8ab 	bl	80131c4 <USBD_LL_StallEP>
}
 800f06e:	bf00      	nop
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b086      	sub	sp, #24
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	60f8      	str	r0, [r7, #12]
 800f07e:	60b9      	str	r1, [r7, #8]
 800f080:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f082:	2300      	movs	r3, #0
 800f084:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d036      	beq.n	800f0fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f090:	6938      	ldr	r0, [r7, #16]
 800f092:	f000 f836 	bl	800f102 <USBD_GetLen>
 800f096:	4603      	mov	r3, r0
 800f098:	3301      	adds	r3, #1
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	7812      	ldrb	r2, [r2, #0]
 800f0ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	2203      	movs	r2, #3
 800f0be:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0c0:	7dfb      	ldrb	r3, [r7, #23]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f0c6:	e013      	b.n	800f0f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f0c8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	7812      	ldrb	r2, [r2, #0]
 800f0d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	613b      	str	r3, [r7, #16]
    idx++;
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0ea:	7dfb      	ldrb	r3, [r7, #23]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e7      	bne.n	800f0c8 <USBD_GetString+0x52>
 800f0f8:	e000      	b.n	800f0fc <USBD_GetString+0x86>
    return;
 800f0fa:	bf00      	nop
  }
}
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f102:	b480      	push	{r7}
 800f104:	b085      	sub	sp, #20
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f10a:	2300      	movs	r3, #0
 800f10c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f112:	e005      	b.n	800f120 <USBD_GetLen+0x1e>
  {
    len++;
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	3301      	adds	r3, #1
 800f118:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	3301      	adds	r3, #1
 800f11e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1f5      	bne.n	800f114 <USBD_GetLen+0x12>
  }

  return len;
 800f128:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b084      	sub	sp, #16
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2202      	movs	r2, #2
 800f146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	2100      	movs	r1, #0
 800f15c:	68f8      	ldr	r0, [r7, #12]
 800f15e:	f004 f8ba 	bl	80132d6 <USBD_LL_Transmit>

  return USBD_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	2100      	movs	r1, #0
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f004 f8a9 	bl	80132d6 <USBD_LL_Transmit>

  return USBD_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b084      	sub	sp, #16
 800f192:	af00      	add	r7, sp, #0
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2203      	movs	r2, #3
 800f19e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f004 f8ad 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	2100      	movs	r1, #0
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f004 f89c 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2204      	movs	r2, #4
 800f1f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	2100      	movs	r1, #0
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f004 f868 	bl	80132d6 <USBD_LL_Transmit>

  return USBD_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2205      	movs	r2, #5
 800f21c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f220:	2300      	movs	r3, #0
 800f222:	2200      	movs	r2, #0
 800f224:	2100      	movs	r1, #0
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f004 f876 	bl	8013318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <__NVIC_SetPriority>:
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	6039      	str	r1, [r7, #0]
 800f242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	db0a      	blt.n	800f262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	490c      	ldr	r1, [pc, #48]	@ (800f284 <__NVIC_SetPriority+0x4c>)
 800f252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f256:	0112      	lsls	r2, r2, #4
 800f258:	b2d2      	uxtb	r2, r2
 800f25a:	440b      	add	r3, r1
 800f25c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f260:	e00a      	b.n	800f278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	b2da      	uxtb	r2, r3
 800f266:	4908      	ldr	r1, [pc, #32]	@ (800f288 <__NVIC_SetPriority+0x50>)
 800f268:	79fb      	ldrb	r3, [r7, #7]
 800f26a:	f003 030f 	and.w	r3, r3, #15
 800f26e:	3b04      	subs	r3, #4
 800f270:	0112      	lsls	r2, r2, #4
 800f272:	b2d2      	uxtb	r2, r2
 800f274:	440b      	add	r3, r1
 800f276:	761a      	strb	r2, [r3, #24]
}
 800f278:	bf00      	nop
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr
 800f284:	e000e100 	.word	0xe000e100
 800f288:	e000ed00 	.word	0xe000ed00

0800f28c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f290:	4b05      	ldr	r3, [pc, #20]	@ (800f2a8 <SysTick_Handler+0x1c>)
 800f292:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f294:	f002 f9d2 	bl	801163c <xTaskGetSchedulerState>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d001      	beq.n	800f2a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f29e:	f003 f98b 	bl	80125b8 <xPortSysTickHandler>
  }
}
 800f2a2:	bf00      	nop
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	e000e010 	.word	0xe000e010

0800f2ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	f06f 0004 	mvn.w	r0, #4
 800f2b6:	f7ff ffbf 	bl	800f238 <__NVIC_SetPriority>
#endif
}
 800f2ba:	bf00      	nop
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c6:	f3ef 8305 	mrs	r3, IPSR
 800f2ca:	603b      	str	r3, [r7, #0]
  return(result);
 800f2cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f2d2:	f06f 0305 	mvn.w	r3, #5
 800f2d6:	607b      	str	r3, [r7, #4]
 800f2d8:	e00c      	b.n	800f2f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f2da:	4b0a      	ldr	r3, [pc, #40]	@ (800f304 <osKernelInitialize+0x44>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d105      	bne.n	800f2ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f2e2:	4b08      	ldr	r3, [pc, #32]	@ (800f304 <osKernelInitialize+0x44>)
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	607b      	str	r3, [r7, #4]
 800f2ec:	e002      	b.n	800f2f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f2f4:	687b      	ldr	r3, [r7, #4]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	370c      	adds	r7, #12
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	20000b44 	.word	0x20000b44

0800f308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f30e:	f3ef 8305 	mrs	r3, IPSR
 800f312:	603b      	str	r3, [r7, #0]
  return(result);
 800f314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f316:	2b00      	cmp	r3, #0
 800f318:	d003      	beq.n	800f322 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f31a:	f06f 0305 	mvn.w	r3, #5
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	e010      	b.n	800f344 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f322:	4b0b      	ldr	r3, [pc, #44]	@ (800f350 <osKernelStart+0x48>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b01      	cmp	r3, #1
 800f328:	d109      	bne.n	800f33e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f32a:	f7ff ffbf 	bl	800f2ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f32e:	4b08      	ldr	r3, [pc, #32]	@ (800f350 <osKernelStart+0x48>)
 800f330:	2202      	movs	r2, #2
 800f332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f334:	f001 fd0e 	bl	8010d54 <vTaskStartScheduler>
      stat = osOK;
 800f338:	2300      	movs	r3, #0
 800f33a:	607b      	str	r3, [r7, #4]
 800f33c:	e002      	b.n	800f344 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f33e:	f04f 33ff 	mov.w	r3, #4294967295
 800f342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f344:	687b      	ldr	r3, [r7, #4]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000b44 	.word	0x20000b44

0800f354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f354:	b580      	push	{r7, lr}
 800f356:	b08e      	sub	sp, #56	@ 0x38
 800f358:	af04      	add	r7, sp, #16
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f360:	2300      	movs	r3, #0
 800f362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f364:	f3ef 8305 	mrs	r3, IPSR
 800f368:	617b      	str	r3, [r7, #20]
  return(result);
 800f36a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d17e      	bne.n	800f46e <osThreadNew+0x11a>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d07b      	beq.n	800f46e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f376:	2380      	movs	r3, #128	@ 0x80
 800f378:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f37a:	2318      	movs	r3, #24
 800f37c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f37e:	2300      	movs	r3, #0
 800f380:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f382:	f04f 33ff 	mov.w	r3, #4294967295
 800f386:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d045      	beq.n	800f41a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d002      	beq.n	800f39c <osThreadNew+0x48>
        name = attr->name;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	699b      	ldr	r3, [r3, #24]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d008      	beq.n	800f3c2 <osThreadNew+0x6e>
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	2b38      	cmp	r3, #56	@ 0x38
 800f3b4:	d805      	bhi.n	800f3c2 <osThreadNew+0x6e>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <osThreadNew+0x72>
        return (NULL);
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	e054      	b.n	800f470 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	089b      	lsrs	r3, r3, #2
 800f3d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00e      	beq.n	800f3fc <osThreadNew+0xa8>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	2ba7      	cmp	r3, #167	@ 0xa7
 800f3e4:	d90a      	bls.n	800f3fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d006      	beq.n	800f3fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <osThreadNew+0xa8>
        mem = 1;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	61bb      	str	r3, [r7, #24]
 800f3fa:	e010      	b.n	800f41e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10c      	bne.n	800f41e <osThreadNew+0xca>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d108      	bne.n	800f41e <osThreadNew+0xca>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d104      	bne.n	800f41e <osThreadNew+0xca>
          mem = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	61bb      	str	r3, [r7, #24]
 800f418:	e001      	b.n	800f41e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	2b01      	cmp	r3, #1
 800f422:	d110      	bne.n	800f446 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f42c:	9202      	str	r2, [sp, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	6a3a      	ldr	r2, [r7, #32]
 800f438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f001 fa96 	bl	801096c <xTaskCreateStatic>
 800f440:	4603      	mov	r3, r0
 800f442:	613b      	str	r3, [r7, #16]
 800f444:	e013      	b.n	800f46e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d110      	bne.n	800f46e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	b29a      	uxth	r2, r3
 800f450:	f107 0310 	add.w	r3, r7, #16
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f001 fae4 	bl	8010a2c <xTaskCreate>
 800f464:	4603      	mov	r3, r0
 800f466:	2b01      	cmp	r3, #1
 800f468:	d001      	beq.n	800f46e <osThreadNew+0x11a>
            hTask = NULL;
 800f46a:	2300      	movs	r3, #0
 800f46c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f46e:	693b      	ldr	r3, [r7, #16]
}
 800f470:	4618      	mov	r0, r3
 800f472:	3728      	adds	r7, #40	@ 0x28
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f480:	f3ef 8305 	mrs	r3, IPSR
 800f484:	60bb      	str	r3, [r7, #8]
  return(result);
 800f486:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <osDelay+0x1c>
    stat = osErrorISR;
 800f48c:	f06f 0305 	mvn.w	r3, #5
 800f490:	60fb      	str	r3, [r7, #12]
 800f492:	e007      	b.n	800f4a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f494:	2300      	movs	r3, #0
 800f496:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d002      	beq.n	800f4a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f001 fc22 	bl	8010ce8 <vTaskDelay>
    }
  }

  return (stat);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b084      	sub	sp, #16
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f002 fe9a 	bl	80121f0 <pvTimerGetTimerID>
 800f4bc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d005      	beq.n	800f4d0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	6852      	ldr	r2, [r2, #4]
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4798      	blx	r3
  }
}
 800f4d0:	bf00      	nop
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b08c      	sub	sp, #48	@ 0x30
 800f4dc:	af02      	add	r7, sp, #8
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	607a      	str	r2, [r7, #4]
 800f4e2:	603b      	str	r3, [r7, #0]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4ec:	f3ef 8305 	mrs	r3, IPSR
 800f4f0:	613b      	str	r3, [r7, #16]
  return(result);
 800f4f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d163      	bne.n	800f5c0 <osTimerNew+0xe8>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d060      	beq.n	800f5c0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f4fe:	2008      	movs	r0, #8
 800f500:	f003 f8ec 	bl	80126dc <pvPortMalloc>
 800f504:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d059      	beq.n	800f5c0 <osTimerNew+0xe8>
      callb->func = func;
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f518:	7afb      	ldrb	r3, [r7, #11]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d102      	bne.n	800f524 <osTimerNew+0x4c>
        reload = pdFALSE;
 800f51e:	2300      	movs	r3, #0
 800f520:	61fb      	str	r3, [r7, #28]
 800f522:	e001      	b.n	800f528 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800f524:	2301      	movs	r3, #1
 800f526:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f528:	f04f 33ff 	mov.w	r3, #4294967295
 800f52c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01c      	beq.n	800f572 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <osTimerNew+0x6e>
          name = attr->name;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d006      	beq.n	800f55c <osTimerNew+0x84>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	2b2b      	cmp	r3, #43	@ 0x2b
 800f554:	d902      	bls.n	800f55c <osTimerNew+0x84>
          mem = 1;
 800f556:	2301      	movs	r3, #1
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	e00c      	b.n	800f576 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d108      	bne.n	800f576 <osTimerNew+0x9e>
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d104      	bne.n	800f576 <osTimerNew+0x9e>
            mem = 0;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61bb      	str	r3, [r7, #24]
 800f570:	e001      	b.n	800f576 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d10c      	bne.n	800f596 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	4b12      	ldr	r3, [pc, #72]	@ (800f5cc <osTimerNew+0xf4>)
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	69fa      	ldr	r2, [r7, #28]
 800f58a:	2101      	movs	r1, #1
 800f58c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f58e:	f002 faa2 	bl	8011ad6 <xTimerCreateStatic>
 800f592:	6238      	str	r0, [r7, #32]
 800f594:	e00b      	b.n	800f5ae <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d108      	bne.n	800f5ae <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f59c:	4b0b      	ldr	r3, [pc, #44]	@ (800f5cc <osTimerNew+0xf4>)
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	69fa      	ldr	r2, [r7, #28]
 800f5a4:	2101      	movs	r1, #1
 800f5a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f5a8:	f002 fa74 	bl	8011a94 <xTimerCreate>
 800f5ac:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f5ae:	6a3b      	ldr	r3, [r7, #32]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d105      	bne.n	800f5c0 <osTimerNew+0xe8>
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d002      	beq.n	800f5c0 <osTimerNew+0xe8>
        vPortFree (callb);
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	f003 f95c 	bl	8012878 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3728      	adds	r7, #40	@ 0x28
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	0800f4af 	.word	0x0800f4af

0800f5d0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af02      	add	r7, sp, #8
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5de:	f3ef 8305 	mrs	r3, IPSR
 800f5e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <osTimerStart+0x22>
    stat = osErrorISR;
 800f5ea:	f06f 0305 	mvn.w	r3, #5
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	e017      	b.n	800f622 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d103      	bne.n	800f600 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f5f8:	f06f 0303 	mvn.w	r3, #3
 800f5fc:	617b      	str	r3, [r7, #20]
 800f5fe:	e010      	b.n	800f622 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f600:	2300      	movs	r3, #0
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	2300      	movs	r3, #0
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	2104      	movs	r1, #4
 800f60a:	6938      	ldr	r0, [r7, #16]
 800f60c:	f002 fae0 	bl	8011bd0 <xTimerGenericCommand>
 800f610:	4603      	mov	r3, r0
 800f612:	2b01      	cmp	r3, #1
 800f614:	d102      	bne.n	800f61c <osTimerStart+0x4c>
      stat = osOK;
 800f616:	2300      	movs	r3, #0
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e002      	b.n	800f622 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f61c:	f06f 0302 	mvn.w	r3, #2
 800f620:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f622:	697b      	ldr	r3, [r7, #20]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800f634:	2300      	movs	r3, #0
 800f636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f638:	f3ef 8305 	mrs	r3, IPSR
 800f63c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f63e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800f640:	2b00      	cmp	r3, #0
 800f642:	d12d      	bne.n	800f6a0 <osEventFlagsNew+0x74>
    mem = -1;
 800f644:	f04f 33ff 	mov.w	r3, #4294967295
 800f648:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d015      	beq.n	800f67c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d006      	beq.n	800f666 <osEventFlagsNew+0x3a>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	2b1f      	cmp	r3, #31
 800f65e:	d902      	bls.n	800f666 <osEventFlagsNew+0x3a>
        mem = 1;
 800f660:	2301      	movs	r3, #1
 800f662:	613b      	str	r3, [r7, #16]
 800f664:	e00c      	b.n	800f680 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d108      	bne.n	800f680 <osEventFlagsNew+0x54>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d104      	bne.n	800f680 <osEventFlagsNew+0x54>
          mem = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	613b      	str	r3, [r7, #16]
 800f67a:	e001      	b.n	800f680 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	2b01      	cmp	r3, #1
 800f684:	d106      	bne.n	800f694 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 f950 	bl	800f930 <xEventGroupCreateStatic>
 800f690:	6178      	str	r0, [r7, #20]
 800f692:	e005      	b.n	800f6a0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d102      	bne.n	800f6a0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800f69a:	f000 f982 	bl	800f9a2 <xEventGroupCreate>
 800f69e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800f6a0:	697b      	ldr	r3, [r7, #20]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3718      	adds	r7, #24
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b088      	sub	sp, #32
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6b6:	f3ef 8305 	mrs	r3, IPSR
 800f6ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6bc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d174      	bne.n	800f7ac <osMutexNew+0x102>
    if (attr != NULL) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d003      	beq.n	800f6d0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	61bb      	str	r3, [r7, #24]
 800f6ce:	e001      	b.n	800f6d4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	f003 0301 	and.w	r3, r3, #1
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d002      	beq.n	800f6e4 <osMutexNew+0x3a>
      rmtx = 1U;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	617b      	str	r3, [r7, #20]
 800f6e2:	e001      	b.n	800f6e8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	f003 0308 	and.w	r3, r3, #8
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d15c      	bne.n	800f7ac <osMutexNew+0x102>
      mem = -1;
 800f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d015      	beq.n	800f72a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d006      	beq.n	800f714 <osMutexNew+0x6a>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	2b4f      	cmp	r3, #79	@ 0x4f
 800f70c:	d902      	bls.n	800f714 <osMutexNew+0x6a>
          mem = 1;
 800f70e:	2301      	movs	r3, #1
 800f710:	613b      	str	r3, [r7, #16]
 800f712:	e00c      	b.n	800f72e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d108      	bne.n	800f72e <osMutexNew+0x84>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d104      	bne.n	800f72e <osMutexNew+0x84>
            mem = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	613b      	str	r3, [r7, #16]
 800f728:	e001      	b.n	800f72e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2b01      	cmp	r3, #1
 800f732:	d112      	bne.n	800f75a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d007      	beq.n	800f74a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	4619      	mov	r1, r3
 800f740:	2004      	movs	r0, #4
 800f742:	f000 fb74 	bl	800fe2e <xQueueCreateMutexStatic>
 800f746:	61f8      	str	r0, [r7, #28]
 800f748:	e016      	b.n	800f778 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	4619      	mov	r1, r3
 800f750:	2001      	movs	r0, #1
 800f752:	f000 fb6c 	bl	800fe2e <xQueueCreateMutexStatic>
 800f756:	61f8      	str	r0, [r7, #28]
 800f758:	e00e      	b.n	800f778 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10b      	bne.n	800f778 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d004      	beq.n	800f770 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f766:	2004      	movs	r0, #4
 800f768:	f000 fb49 	bl	800fdfe <xQueueCreateMutex>
 800f76c:	61f8      	str	r0, [r7, #28]
 800f76e:	e003      	b.n	800f778 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f770:	2001      	movs	r0, #1
 800f772:	f000 fb44 	bl	800fdfe <xQueueCreateMutex>
 800f776:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00c      	beq.n	800f798 <osMutexNew+0xee>
        if (attr != NULL) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d003      	beq.n	800f78c <osMutexNew+0xe2>
          name = attr->name;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	60fb      	str	r3, [r7, #12]
 800f78a:	e001      	b.n	800f790 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f790:	68f9      	ldr	r1, [r7, #12]
 800f792:	69f8      	ldr	r0, [r7, #28]
 800f794:	f001 f88c 	bl	80108b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <osMutexNew+0x102>
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	f043 0301 	orr.w	r3, r3, #1
 800f7aa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f7ac:	69fb      	ldr	r3, [r7, #28]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3720      	adds	r7, #32
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b086      	sub	sp, #24
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f023 0301 	bic.w	r3, r3, #1
 800f7c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7d4:	f3ef 8305 	mrs	r3, IPSR
 800f7d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f7da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f7e0:	f06f 0305 	mvn.w	r3, #5
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e02c      	b.n	800f842 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d103      	bne.n	800f7f6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f7ee:	f06f 0303 	mvn.w	r3, #3
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	e025      	b.n	800f842 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d011      	beq.n	800f820 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6938      	ldr	r0, [r7, #16]
 800f800:	f000 fb65 	bl	800fece <xQueueTakeMutexRecursive>
 800f804:	4603      	mov	r3, r0
 800f806:	2b01      	cmp	r3, #1
 800f808:	d01b      	beq.n	800f842 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f810:	f06f 0301 	mvn.w	r3, #1
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e014      	b.n	800f842 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f818:	f06f 0302 	mvn.w	r3, #2
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	e010      	b.n	800f842 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6938      	ldr	r0, [r7, #16]
 800f824:	f000 fe0c 	bl	8010440 <xQueueSemaphoreTake>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d009      	beq.n	800f842 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d003      	beq.n	800f83c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f834:	f06f 0301 	mvn.w	r3, #1
 800f838:	617b      	str	r3, [r7, #20]
 800f83a:	e002      	b.n	800f842 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f83c:	f06f 0302 	mvn.w	r3, #2
 800f840:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f842:	697b      	ldr	r3, [r7, #20]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f023 0301 	bic.w	r3, r3, #1
 800f85a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f864:	2300      	movs	r3, #0
 800f866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f868:	f3ef 8305 	mrs	r3, IPSR
 800f86c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f86e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f870:	2b00      	cmp	r3, #0
 800f872:	d003      	beq.n	800f87c <osMutexRelease+0x30>
    stat = osErrorISR;
 800f874:	f06f 0305 	mvn.w	r3, #5
 800f878:	617b      	str	r3, [r7, #20]
 800f87a:	e01f      	b.n	800f8bc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d103      	bne.n	800f88a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f882:	f06f 0303 	mvn.w	r3, #3
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e018      	b.n	800f8bc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d009      	beq.n	800f8a4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f890:	6938      	ldr	r0, [r7, #16]
 800f892:	f000 fae7 	bl	800fe64 <xQueueGiveMutexRecursive>
 800f896:	4603      	mov	r3, r0
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d00f      	beq.n	800f8bc <osMutexRelease+0x70>
        stat = osErrorResource;
 800f89c:	f06f 0302 	mvn.w	r3, #2
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	e00b      	b.n	800f8bc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	6938      	ldr	r0, [r7, #16]
 800f8ac:	f000 fb46 	bl	800ff3c <xQueueGenericSend>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d002      	beq.n	800f8bc <osMutexRelease+0x70>
        stat = osErrorResource;
 800f8b6:	f06f 0302 	mvn.w	r3, #2
 800f8ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f8bc:	697b      	ldr	r3, [r7, #20]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3718      	adds	r7, #24
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
	...

0800f8c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	4a07      	ldr	r2, [pc, #28]	@ (800f8f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800f8d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	4a06      	ldr	r2, [pc, #24]	@ (800f8f8 <vApplicationGetIdleTaskMemory+0x30>)
 800f8de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2280      	movs	r2, #128	@ 0x80
 800f8e4:	601a      	str	r2, [r3, #0]
}
 800f8e6:	bf00      	nop
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20000b48 	.word	0x20000b48
 800f8f8:	20000bf0 	.word	0x20000bf0

0800f8fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	4a07      	ldr	r2, [pc, #28]	@ (800f928 <vApplicationGetTimerTaskMemory+0x2c>)
 800f90c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	4a06      	ldr	r2, [pc, #24]	@ (800f92c <vApplicationGetTimerTaskMemory+0x30>)
 800f912:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f91a:	601a      	str	r2, [r3, #0]
}
 800f91c:	bf00      	nop
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	20000df0 	.word	0x20000df0
 800f92c:	20000e98 	.word	0x20000e98

0800f930 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10b      	bne.n	800f956 <xEventGroupCreateStatic+0x26>
	__asm volatile
 800f93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f942:	f383 8811 	msr	BASEPRI, r3
 800f946:	f3bf 8f6f 	isb	sy
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	613b      	str	r3, [r7, #16]
}
 800f950:	bf00      	nop
 800f952:	bf00      	nop
 800f954:	e7fd      	b.n	800f952 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f956:	2320      	movs	r3, #32
 800f958:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	2b20      	cmp	r3, #32
 800f95e:	d00b      	beq.n	800f978 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	60fb      	str	r3, [r7, #12]
}
 800f972:	bf00      	nop
 800f974:	bf00      	nop
 800f976:	e7fd      	b.n	800f974 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d00a      	beq.n	800f998 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2200      	movs	r2, #0
 800f986:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	3304      	adds	r3, #4
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f822 	bl	800f9d6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2201      	movs	r2, #1
 800f996:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f998:	697b      	ldr	r3, [r7, #20]
	}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f9a8:	2020      	movs	r0, #32
 800f9aa:	f002 fe97 	bl	80126dc <pvPortMalloc>
 800f9ae:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 f808 	bl	800f9d6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f9cc:	687b      	ldr	r3, [r7, #4]
	}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f9d6:	b480      	push	{r7}
 800f9d8:	b083      	sub	sp, #12
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f103 0208 	add.w	r2, r3, #8
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f103 0208 	add.w	r2, r3, #8
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f103 0208 	add.w	r2, r3, #8
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa0a:	bf00      	nop
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa16:	b480      	push	{r7}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	689a      	ldr	r2, [r3, #8]
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	601a      	str	r2, [r3, #0]
}
 800fa6c:	bf00      	nop
 800fa6e:	3714      	adds	r7, #20
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa8e:	d103      	bne.n	800fa98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	e00c      	b.n	800fab2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	60fb      	str	r3, [r7, #12]
 800fa9e:	e002      	b.n	800faa6 <vListInsert+0x2e>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	60fb      	str	r3, [r7, #12]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d2f6      	bcs.n	800faa0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	601a      	str	r2, [r3, #0]
}
 800fade:	bf00      	nop
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800faea:	b480      	push	{r7}
 800faec:	b085      	sub	sp, #20
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	691b      	ldr	r3, [r3, #16]
 800faf6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	6892      	ldr	r2, [r2, #8]
 800fb00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	6852      	ldr	r2, [r2, #4]
 800fb0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d103      	bne.n	800fb1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	689a      	ldr	r2, [r3, #8]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	1e5a      	subs	r2, r3, #1
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3714      	adds	r7, #20
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
	...

0800fb40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10b      	bne.n	800fb6c <xQueueGenericReset+0x2c>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	60bb      	str	r3, [r7, #8]
}
 800fb66:	bf00      	nop
 800fb68:	bf00      	nop
 800fb6a:	e7fd      	b.n	800fb68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fb6c:	f002 fc94 	bl	8012498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb78:	68f9      	ldr	r1, [r7, #12]
 800fb7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fb7c:	fb01 f303 	mul.w	r3, r1, r3
 800fb80:	441a      	add	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	68f9      	ldr	r1, [r7, #12]
 800fba0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fba2:	fb01 f303 	mul.w	r3, r1, r3
 800fba6:	441a      	add	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	22ff      	movs	r2, #255	@ 0xff
 800fbb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	22ff      	movs	r2, #255	@ 0xff
 800fbb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d114      	bne.n	800fbec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d01a      	beq.n	800fc00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3310      	adds	r3, #16
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f001 fb5e 	bl	8011290 <xTaskRemoveFromEventList>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d012      	beq.n	800fc00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fbda:	4b0d      	ldr	r3, [pc, #52]	@ (800fc10 <xQueueGenericReset+0xd0>)
 800fbdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe0:	601a      	str	r2, [r3, #0]
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	e009      	b.n	800fc00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3310      	adds	r3, #16
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fef0 	bl	800f9d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3324      	adds	r3, #36	@ 0x24
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff feeb 	bl	800f9d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc00:	f002 fc7c 	bl	80124fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc04:	2301      	movs	r3, #1
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	e000ed04 	.word	0xe000ed04

0800fc14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b08e      	sub	sp, #56	@ 0x38
 800fc18:	af02      	add	r7, sp, #8
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
 800fc20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d10b      	bne.n	800fc40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fc3a:	bf00      	nop
 800fc3c:	bf00      	nop
 800fc3e:	e7fd      	b.n	800fc3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10b      	bne.n	800fc5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	e7fd      	b.n	800fc5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d002      	beq.n	800fc6a <xQueueGenericCreateStatic+0x56>
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <xQueueGenericCreateStatic+0x5a>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e000      	b.n	800fc70 <xQueueGenericCreateStatic+0x5c>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d10b      	bne.n	800fc8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc78:	f383 8811 	msr	BASEPRI, r3
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	623b      	str	r3, [r7, #32]
}
 800fc86:	bf00      	nop
 800fc88:	bf00      	nop
 800fc8a:	e7fd      	b.n	800fc88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d102      	bne.n	800fc98 <xQueueGenericCreateStatic+0x84>
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d101      	bne.n	800fc9c <xQueueGenericCreateStatic+0x88>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e000      	b.n	800fc9e <xQueueGenericCreateStatic+0x8a>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10b      	bne.n	800fcba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca6:	f383 8811 	msr	BASEPRI, r3
 800fcaa:	f3bf 8f6f 	isb	sy
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	61fb      	str	r3, [r7, #28]
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop
 800fcb8:	e7fd      	b.n	800fcb6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fcba:	2350      	movs	r3, #80	@ 0x50
 800fcbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2b50      	cmp	r3, #80	@ 0x50
 800fcc2:	d00b      	beq.n	800fcdc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	61bb      	str	r3, [r7, #24]
}
 800fcd6:	bf00      	nop
 800fcd8:	bf00      	nop
 800fcda:	e7fd      	b.n	800fcd8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fcdc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00d      	beq.n	800fd04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fcf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	68b9      	ldr	r1, [r7, #8]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 f840 	bl	800fd84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3730      	adds	r7, #48	@ 0x30
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b08a      	sub	sp, #40	@ 0x28
 800fd12:	af02      	add	r7, sp, #8
 800fd14:	60f8      	str	r0, [r7, #12]
 800fd16:	60b9      	str	r1, [r7, #8]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10b      	bne.n	800fd3a <xQueueGenericCreate+0x2c>
	__asm volatile
 800fd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd26:	f383 8811 	msr	BASEPRI, r3
 800fd2a:	f3bf 8f6f 	isb	sy
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	613b      	str	r3, [r7, #16]
}
 800fd34:	bf00      	nop
 800fd36:	bf00      	nop
 800fd38:	e7fd      	b.n	800fd36 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
 800fd42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	3350      	adds	r3, #80	@ 0x50
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f002 fcc7 	bl	80126dc <pvPortMalloc>
 800fd4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d011      	beq.n	800fd7a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	3350      	adds	r3, #80	@ 0x50
 800fd5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd68:	79fa      	ldrb	r2, [r7, #7]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 f805 	bl	800fd84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd7a:	69bb      	ldr	r3, [r7, #24]
	}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3720      	adds	r7, #32
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
 800fd90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d103      	bne.n	800fda0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	69ba      	ldr	r2, [r7, #24]
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	e002      	b.n	800fda6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	69b8      	ldr	r0, [r7, #24]
 800fdb6:	f7ff fec3 	bl	800fb40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	78fa      	ldrb	r2, [r7, #3]
 800fdbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fdc2:	bf00      	nop
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b082      	sub	sp, #8
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d00e      	beq.n	800fdf6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fdea:	2300      	movs	r3, #0
 800fdec:	2200      	movs	r2, #0
 800fdee:	2100      	movs	r1, #0
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 f8a3 	bl	800ff3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fdf6:	bf00      	nop
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b086      	sub	sp, #24
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	4603      	mov	r3, r0
 800fe06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	617b      	str	r3, [r7, #20]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fe10:	79fb      	ldrb	r3, [r7, #7]
 800fe12:	461a      	mov	r2, r3
 800fe14:	6939      	ldr	r1, [r7, #16]
 800fe16:	6978      	ldr	r0, [r7, #20]
 800fe18:	f7ff ff79 	bl	800fd0e <xQueueGenericCreate>
 800fe1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff ffd3 	bl	800fdca <prvInitialiseMutex>

		return xNewQueue;
 800fe24:	68fb      	ldr	r3, [r7, #12]
	}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3718      	adds	r7, #24
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b088      	sub	sp, #32
 800fe32:	af02      	add	r7, sp, #8
 800fe34:	4603      	mov	r3, r0
 800fe36:	6039      	str	r1, [r7, #0]
 800fe38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	617b      	str	r3, [r7, #20]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fe42:	79fb      	ldrb	r3, [r7, #7]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	6939      	ldr	r1, [r7, #16]
 800fe4c:	6978      	ldr	r0, [r7, #20]
 800fe4e:	f7ff fee1 	bl	800fc14 <xQueueGenericCreateStatic>
 800fe52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff ffb8 	bl	800fdca <prvInitialiseMutex>

		return xNewQueue;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
	}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3718      	adds	r7, #24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fe64:	b590      	push	{r4, r7, lr}
 800fe66:	b087      	sub	sp, #28
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d10b      	bne.n	800fe8e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	60fb      	str	r3, [r7, #12]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	689c      	ldr	r4, [r3, #8]
 800fe92:	f001 fbc3 	bl	801161c <xTaskGetCurrentTaskHandle>
 800fe96:	4603      	mov	r3, r0
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	d111      	bne.n	800fec0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	1e5a      	subs	r2, r3, #1
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d105      	bne.n	800feba <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800feae:	2300      	movs	r3, #0
 800feb0:	2200      	movs	r2, #0
 800feb2:	2100      	movs	r1, #0
 800feb4:	6938      	ldr	r0, [r7, #16]
 800feb6:	f000 f841 	bl	800ff3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800feba:	2301      	movs	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
 800febe:	e001      	b.n	800fec4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fec4:	697b      	ldr	r3, [r7, #20]
	}
 800fec6:	4618      	mov	r0, r3
 800fec8:	371c      	adds	r7, #28
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd90      	pop	{r4, r7, pc}

0800fece <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fece:	b590      	push	{r4, r7, lr}
 800fed0:	b087      	sub	sp, #28
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10b      	bne.n	800fefa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	60fb      	str	r3, [r7, #12]
}
 800fef4:	bf00      	nop
 800fef6:	bf00      	nop
 800fef8:	e7fd      	b.n	800fef6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	689c      	ldr	r4, [r3, #8]
 800fefe:	f001 fb8d 	bl	801161c <xTaskGetCurrentTaskHandle>
 800ff02:	4603      	mov	r3, r0
 800ff04:	429c      	cmp	r4, r3
 800ff06:	d107      	bne.n	800ff18 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	1c5a      	adds	r2, r3, #1
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ff12:	2301      	movs	r3, #1
 800ff14:	617b      	str	r3, [r7, #20]
 800ff16:	e00c      	b.n	800ff32 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	6938      	ldr	r0, [r7, #16]
 800ff1c:	f000 fa90 	bl	8010440 <xQueueSemaphoreTake>
 800ff20:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d004      	beq.n	800ff32 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	1c5a      	adds	r2, r3, #1
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ff32:	697b      	ldr	r3, [r7, #20]
	}
 800ff34:	4618      	mov	r0, r3
 800ff36:	371c      	adds	r7, #28
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd90      	pop	{r4, r7, pc}

0800ff3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08e      	sub	sp, #56	@ 0x38
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
 800ff48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ff52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10b      	bne.n	800ff70 <xQueueGenericSend+0x34>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ff6a:	bf00      	nop
 800ff6c:	bf00      	nop
 800ff6e:	e7fd      	b.n	800ff6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d103      	bne.n	800ff7e <xQueueGenericSend+0x42>
 800ff76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <xQueueGenericSend+0x46>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e000      	b.n	800ff84 <xQueueGenericSend+0x48>
 800ff82:	2300      	movs	r3, #0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10b      	bne.n	800ffa0 <xQueueGenericSend+0x64>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	e7fd      	b.n	800ff9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d103      	bne.n	800ffae <xQueueGenericSend+0x72>
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d101      	bne.n	800ffb2 <xQueueGenericSend+0x76>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e000      	b.n	800ffb4 <xQueueGenericSend+0x78>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10b      	bne.n	800ffd0 <xQueueGenericSend+0x94>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	623b      	str	r3, [r7, #32]
}
 800ffca:	bf00      	nop
 800ffcc:	bf00      	nop
 800ffce:	e7fd      	b.n	800ffcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffd0:	f001 fb34 	bl	801163c <xTaskGetSchedulerState>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d102      	bne.n	800ffe0 <xQueueGenericSend+0xa4>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <xQueueGenericSend+0xa8>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e000      	b.n	800ffe6 <xQueueGenericSend+0xaa>
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d10b      	bne.n	8010002 <xQueueGenericSend+0xc6>
	__asm volatile
 800ffea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	61fb      	str	r3, [r7, #28]
}
 800fffc:	bf00      	nop
 800fffe:	bf00      	nop
 8010000:	e7fd      	b.n	800fffe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010002:	f002 fa49 	bl	8012498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801000a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801000c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801000e:	429a      	cmp	r2, r3
 8010010:	d302      	bcc.n	8010018 <xQueueGenericSend+0xdc>
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b02      	cmp	r3, #2
 8010016:	d129      	bne.n	801006c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	68b9      	ldr	r1, [r7, #8]
 801001c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801001e:	f000 fb37 	bl	8010690 <prvCopyDataToQueue>
 8010022:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010028:	2b00      	cmp	r3, #0
 801002a:	d010      	beq.n	801004e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801002c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002e:	3324      	adds	r3, #36	@ 0x24
 8010030:	4618      	mov	r0, r3
 8010032:	f001 f92d 	bl	8011290 <xTaskRemoveFromEventList>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d013      	beq.n	8010064 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801003c:	4b3f      	ldr	r3, [pc, #252]	@ (801013c <xQueueGenericSend+0x200>)
 801003e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	f3bf 8f4f 	dsb	sy
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	e00a      	b.n	8010064 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801004e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d007      	beq.n	8010064 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010054:	4b39      	ldr	r3, [pc, #228]	@ (801013c <xQueueGenericSend+0x200>)
 8010056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010064:	f002 fa4a 	bl	80124fc <vPortExitCritical>
				return pdPASS;
 8010068:	2301      	movs	r3, #1
 801006a:	e063      	b.n	8010134 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d103      	bne.n	801007a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010072:	f002 fa43 	bl	80124fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010076:	2300      	movs	r3, #0
 8010078:	e05c      	b.n	8010134 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801007a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801007c:	2b00      	cmp	r3, #0
 801007e:	d106      	bne.n	801008e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010080:	f107 0314 	add.w	r3, r7, #20
 8010084:	4618      	mov	r0, r3
 8010086:	f001 f967 	bl	8011358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801008a:	2301      	movs	r3, #1
 801008c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801008e:	f002 fa35 	bl	80124fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010092:	f000 fecf 	bl	8010e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010096:	f002 f9ff 	bl	8012498 <vPortEnterCritical>
 801009a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100a0:	b25b      	sxtb	r3, r3
 80100a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a6:	d103      	bne.n	80100b0 <xQueueGenericSend+0x174>
 80100a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80100b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100b6:	b25b      	sxtb	r3, r3
 80100b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100bc:	d103      	bne.n	80100c6 <xQueueGenericSend+0x18a>
 80100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c0:	2200      	movs	r2, #0
 80100c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80100c6:	f002 fa19 	bl	80124fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100ca:	1d3a      	adds	r2, r7, #4
 80100cc:	f107 0314 	add.w	r3, r7, #20
 80100d0:	4611      	mov	r1, r2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f001 f956 	bl	8011384 <xTaskCheckForTimeOut>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d124      	bne.n	8010128 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80100de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100e0:	f000 fbce 	bl	8010880 <prvIsQueueFull>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d018      	beq.n	801011c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ec:	3310      	adds	r3, #16
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	4611      	mov	r1, r2
 80100f2:	4618      	mov	r0, r3
 80100f4:	f001 f87a 	bl	80111ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80100f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100fa:	f000 fb59 	bl	80107b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80100fe:	f000 fea7 	bl	8010e50 <xTaskResumeAll>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	f47f af7c 	bne.w	8010002 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801010a:	4b0c      	ldr	r3, [pc, #48]	@ (801013c <xQueueGenericSend+0x200>)
 801010c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010110:	601a      	str	r2, [r3, #0]
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	e772      	b.n	8010002 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801011c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801011e:	f000 fb47 	bl	80107b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010122:	f000 fe95 	bl	8010e50 <xTaskResumeAll>
 8010126:	e76c      	b.n	8010002 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801012a:	f000 fb41 	bl	80107b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801012e:	f000 fe8f 	bl	8010e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010134:	4618      	mov	r0, r3
 8010136:	3738      	adds	r7, #56	@ 0x38
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	e000ed04 	.word	0xe000ed04

08010140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b090      	sub	sp, #64	@ 0x40
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010154:	2b00      	cmp	r3, #0
 8010156:	d10b      	bne.n	8010170 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015c:	f383 8811 	msr	BASEPRI, r3
 8010160:	f3bf 8f6f 	isb	sy
 8010164:	f3bf 8f4f 	dsb	sy
 8010168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801016a:	bf00      	nop
 801016c:	bf00      	nop
 801016e:	e7fd      	b.n	801016c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d103      	bne.n	801017e <xQueueGenericSendFromISR+0x3e>
 8010176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801017a:	2b00      	cmp	r3, #0
 801017c:	d101      	bne.n	8010182 <xQueueGenericSendFromISR+0x42>
 801017e:	2301      	movs	r3, #1
 8010180:	e000      	b.n	8010184 <xQueueGenericSendFromISR+0x44>
 8010182:	2300      	movs	r3, #0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10b      	bne.n	80101a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801018c:	f383 8811 	msr	BASEPRI, r3
 8010190:	f3bf 8f6f 	isb	sy
 8010194:	f3bf 8f4f 	dsb	sy
 8010198:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801019a:	bf00      	nop
 801019c:	bf00      	nop
 801019e:	e7fd      	b.n	801019c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d103      	bne.n	80101ae <xQueueGenericSendFromISR+0x6e>
 80101a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d101      	bne.n	80101b2 <xQueueGenericSendFromISR+0x72>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e000      	b.n	80101b4 <xQueueGenericSendFromISR+0x74>
 80101b2:	2300      	movs	r3, #0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10b      	bne.n	80101d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	623b      	str	r3, [r7, #32]
}
 80101ca:	bf00      	nop
 80101cc:	bf00      	nop
 80101ce:	e7fd      	b.n	80101cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101d0:	f002 fa42 	bl	8012658 <vPortValidateInterruptPriority>
	__asm volatile
 80101d4:	f3ef 8211 	mrs	r2, BASEPRI
 80101d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101dc:	f383 8811 	msr	BASEPRI, r3
 80101e0:	f3bf 8f6f 	isb	sy
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	61fa      	str	r2, [r7, #28]
 80101ea:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80101ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d302      	bcc.n	8010202 <xQueueGenericSendFromISR+0xc2>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d12f      	bne.n	8010262 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801020c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010210:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010212:	683a      	ldr	r2, [r7, #0]
 8010214:	68b9      	ldr	r1, [r7, #8]
 8010216:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010218:	f000 fa3a 	bl	8010690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801021c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010224:	d112      	bne.n	801024c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d016      	beq.n	801025c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801022e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010230:	3324      	adds	r3, #36	@ 0x24
 8010232:	4618      	mov	r0, r3
 8010234:	f001 f82c 	bl	8011290 <xTaskRemoveFromEventList>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00e      	beq.n	801025c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00b      	beq.n	801025c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	e007      	b.n	801025c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801024c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010250:	3301      	adds	r3, #1
 8010252:	b2db      	uxtb	r3, r3
 8010254:	b25a      	sxtb	r2, r3
 8010256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801025c:	2301      	movs	r3, #1
 801025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010260:	e001      	b.n	8010266 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010262:	2300      	movs	r3, #0
 8010264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010268:	617b      	str	r3, [r7, #20]
	__asm volatile
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f383 8811 	msr	BASEPRI, r3
}
 8010270:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010274:	4618      	mov	r0, r3
 8010276:	3740      	adds	r7, #64	@ 0x40
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b08c      	sub	sp, #48	@ 0x30
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010288:	2300      	movs	r3, #0
 801028a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010292:	2b00      	cmp	r3, #0
 8010294:	d10b      	bne.n	80102ae <xQueueReceive+0x32>
	__asm volatile
 8010296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029a:	f383 8811 	msr	BASEPRI, r3
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	623b      	str	r3, [r7, #32]
}
 80102a8:	bf00      	nop
 80102aa:	bf00      	nop
 80102ac:	e7fd      	b.n	80102aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d103      	bne.n	80102bc <xQueueReceive+0x40>
 80102b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d101      	bne.n	80102c0 <xQueueReceive+0x44>
 80102bc:	2301      	movs	r3, #1
 80102be:	e000      	b.n	80102c2 <xQueueReceive+0x46>
 80102c0:	2300      	movs	r3, #0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d10b      	bne.n	80102de <xQueueReceive+0x62>
	__asm volatile
 80102c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	61fb      	str	r3, [r7, #28]
}
 80102d8:	bf00      	nop
 80102da:	bf00      	nop
 80102dc:	e7fd      	b.n	80102da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102de:	f001 f9ad 	bl	801163c <xTaskGetSchedulerState>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <xQueueReceive+0x72>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <xQueueReceive+0x76>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e000      	b.n	80102f4 <xQueueReceive+0x78>
 80102f2:	2300      	movs	r3, #0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10b      	bne.n	8010310 <xQueueReceive+0x94>
	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	61bb      	str	r3, [r7, #24]
}
 801030a:	bf00      	nop
 801030c:	bf00      	nop
 801030e:	e7fd      	b.n	801030c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010310:	f002 f8c2 	bl	8012498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801031a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031c:	2b00      	cmp	r3, #0
 801031e:	d01f      	beq.n	8010360 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010324:	f000 fa1e 	bl	8010764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032a:	1e5a      	subs	r2, r3, #1
 801032c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801032e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00f      	beq.n	8010358 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033a:	3310      	adds	r3, #16
 801033c:	4618      	mov	r0, r3
 801033e:	f000 ffa7 	bl	8011290 <xTaskRemoveFromEventList>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d007      	beq.n	8010358 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010348:	4b3c      	ldr	r3, [pc, #240]	@ (801043c <xQueueReceive+0x1c0>)
 801034a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010358:	f002 f8d0 	bl	80124fc <vPortExitCritical>
				return pdPASS;
 801035c:	2301      	movs	r3, #1
 801035e:	e069      	b.n	8010434 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d103      	bne.n	801036e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010366:	f002 f8c9 	bl	80124fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801036a:	2300      	movs	r3, #0
 801036c:	e062      	b.n	8010434 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801036e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010370:	2b00      	cmp	r3, #0
 8010372:	d106      	bne.n	8010382 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010374:	f107 0310 	add.w	r3, r7, #16
 8010378:	4618      	mov	r0, r3
 801037a:	f000 ffed 	bl	8011358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801037e:	2301      	movs	r3, #1
 8010380:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010382:	f002 f8bb 	bl	80124fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010386:	f000 fd55 	bl	8010e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801038a:	f002 f885 	bl	8012498 <vPortEnterCritical>
 801038e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010394:	b25b      	sxtb	r3, r3
 8010396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039a:	d103      	bne.n	80103a4 <xQueueReceive+0x128>
 801039c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80103a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80103aa:	b25b      	sxtb	r3, r3
 80103ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b0:	d103      	bne.n	80103ba <xQueueReceive+0x13e>
 80103b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80103ba:	f002 f89f 	bl	80124fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103be:	1d3a      	adds	r2, r7, #4
 80103c0:	f107 0310 	add.w	r3, r7, #16
 80103c4:	4611      	mov	r1, r2
 80103c6:	4618      	mov	r0, r3
 80103c8:	f000 ffdc 	bl	8011384 <xTaskCheckForTimeOut>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d123      	bne.n	801041a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103d4:	f000 fa3e 	bl	8010854 <prvIsQueueEmpty>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d017      	beq.n	801040e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80103de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e0:	3324      	adds	r3, #36	@ 0x24
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	4611      	mov	r1, r2
 80103e6:	4618      	mov	r0, r3
 80103e8:	f000 ff00 	bl	80111ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80103ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80103ee:	f000 f9df 	bl	80107b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80103f2:	f000 fd2d 	bl	8010e50 <xTaskResumeAll>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d189      	bne.n	8010310 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80103fc:	4b0f      	ldr	r3, [pc, #60]	@ (801043c <xQueueReceive+0x1c0>)
 80103fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	f3bf 8f4f 	dsb	sy
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	e780      	b.n	8010310 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801040e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010410:	f000 f9ce 	bl	80107b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010414:	f000 fd1c 	bl	8010e50 <xTaskResumeAll>
 8010418:	e77a      	b.n	8010310 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801041a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801041c:	f000 f9c8 	bl	80107b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010420:	f000 fd16 	bl	8010e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010426:	f000 fa15 	bl	8010854 <prvIsQueueEmpty>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	f43f af6f 	beq.w	8010310 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010434:	4618      	mov	r0, r3
 8010436:	3730      	adds	r7, #48	@ 0x30
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	e000ed04 	.word	0xe000ed04

08010440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08e      	sub	sp, #56	@ 0x38
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801044a:	2300      	movs	r3, #0
 801044c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010452:	2300      	movs	r3, #0
 8010454:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10b      	bne.n	8010474 <xQueueSemaphoreTake+0x34>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	623b      	str	r3, [r7, #32]
}
 801046e:	bf00      	nop
 8010470:	bf00      	nop
 8010472:	e7fd      	b.n	8010470 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00b      	beq.n	8010494 <xQueueSemaphoreTake+0x54>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010480:	f383 8811 	msr	BASEPRI, r3
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	61fb      	str	r3, [r7, #28]
}
 801048e:	bf00      	nop
 8010490:	bf00      	nop
 8010492:	e7fd      	b.n	8010490 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010494:	f001 f8d2 	bl	801163c <xTaskGetSchedulerState>
 8010498:	4603      	mov	r3, r0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d102      	bne.n	80104a4 <xQueueSemaphoreTake+0x64>
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d101      	bne.n	80104a8 <xQueueSemaphoreTake+0x68>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e000      	b.n	80104aa <xQueueSemaphoreTake+0x6a>
 80104a8:	2300      	movs	r3, #0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10b      	bne.n	80104c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	61bb      	str	r3, [r7, #24]
}
 80104c0:	bf00      	nop
 80104c2:	bf00      	nop
 80104c4:	e7fd      	b.n	80104c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104c6:	f001 ffe7 	bl	8012498 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80104ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80104d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d024      	beq.n	8010520 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80104d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104d8:	1e5a      	subs	r2, r3, #1
 80104da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d104      	bne.n	80104f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80104e6:	f001 fa23 	bl	8011930 <pvTaskIncrementMutexHeldCount>
 80104ea:	4602      	mov	r2, r0
 80104ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00f      	beq.n	8010518 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fa:	3310      	adds	r3, #16
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 fec7 	bl	8011290 <xTaskRemoveFromEventList>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d007      	beq.n	8010518 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010508:	4b54      	ldr	r3, [pc, #336]	@ (801065c <xQueueSemaphoreTake+0x21c>)
 801050a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801050e:	601a      	str	r2, [r3, #0]
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010518:	f001 fff0 	bl	80124fc <vPortExitCritical>
				return pdPASS;
 801051c:	2301      	movs	r3, #1
 801051e:	e098      	b.n	8010652 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d112      	bne.n	801054c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010528:	2b00      	cmp	r3, #0
 801052a:	d00b      	beq.n	8010544 <xQueueSemaphoreTake+0x104>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	617b      	str	r3, [r7, #20]
}
 801053e:	bf00      	nop
 8010540:	bf00      	nop
 8010542:	e7fd      	b.n	8010540 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010544:	f001 ffda 	bl	80124fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010548:	2300      	movs	r3, #0
 801054a:	e082      	b.n	8010652 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 801054c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010552:	f107 030c 	add.w	r3, r7, #12
 8010556:	4618      	mov	r0, r3
 8010558:	f000 fefe 	bl	8011358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801055c:	2301      	movs	r3, #1
 801055e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010560:	f001 ffcc 	bl	80124fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010564:	f000 fc66 	bl	8010e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010568:	f001 ff96 	bl	8012498 <vPortEnterCritical>
 801056c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010572:	b25b      	sxtb	r3, r3
 8010574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010578:	d103      	bne.n	8010582 <xQueueSemaphoreTake+0x142>
 801057a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057c:	2200      	movs	r2, #0
 801057e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010584:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010588:	b25b      	sxtb	r3, r3
 801058a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058e:	d103      	bne.n	8010598 <xQueueSemaphoreTake+0x158>
 8010590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010598:	f001 ffb0 	bl	80124fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801059c:	463a      	mov	r2, r7
 801059e:	f107 030c 	add.w	r3, r7, #12
 80105a2:	4611      	mov	r1, r2
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 feed 	bl	8011384 <xTaskCheckForTimeOut>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d132      	bne.n	8010616 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105b2:	f000 f94f 	bl	8010854 <prvIsQueueEmpty>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d026      	beq.n	801060a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d109      	bne.n	80105d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80105c4:	f001 ff68 	bl	8012498 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80105c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f001 f853 	bl	8011678 <xTaskPriorityInherit>
 80105d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80105d4:	f001 ff92 	bl	80124fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	3324      	adds	r3, #36	@ 0x24
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	4611      	mov	r1, r2
 80105e0:	4618      	mov	r0, r3
 80105e2:	f000 fe03 	bl	80111ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105e8:	f000 f8e2 	bl	80107b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105ec:	f000 fc30 	bl	8010e50 <xTaskResumeAll>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f47f af67 	bne.w	80104c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80105f8:	4b18      	ldr	r3, [pc, #96]	@ (801065c <xQueueSemaphoreTake+0x21c>)
 80105fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105fe:	601a      	str	r2, [r3, #0]
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	e75d      	b.n	80104c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801060a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801060c:	f000 f8d0 	bl	80107b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010610:	f000 fc1e 	bl	8010e50 <xTaskResumeAll>
 8010614:	e757      	b.n	80104c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010616:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010618:	f000 f8ca 	bl	80107b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801061c:	f000 fc18 	bl	8010e50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010622:	f000 f917 	bl	8010854 <prvIsQueueEmpty>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	f43f af4c 	beq.w	80104c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801062e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00d      	beq.n	8010650 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010634:	f001 ff30 	bl	8012498 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801063a:	f000 f811 	bl	8010660 <prvGetDisinheritPriorityAfterTimeout>
 801063e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010646:	4618      	mov	r0, r3
 8010648:	f001 f8ee 	bl	8011828 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801064c:	f001 ff56 	bl	80124fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010652:	4618      	mov	r0, r3
 8010654:	3738      	adds	r7, #56	@ 0x38
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	e000ed04 	.word	0xe000ed04

08010660 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801066c:	2b00      	cmp	r3, #0
 801066e:	d006      	beq.n	801067e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	e001      	b.n	8010682 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801067e:	2300      	movs	r3, #0
 8010680:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010682:	68fb      	ldr	r3, [r7, #12]
	}
 8010684:	4618      	mov	r0, r3
 8010686:	3714      	adds	r7, #20
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b086      	sub	sp, #24
 8010694:	af00      	add	r7, sp, #0
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801069c:	2300      	movs	r3, #0
 801069e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d10d      	bne.n	80106ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d14d      	bne.n	8010752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f001 f844 	bl	8011748 <xTaskPriorityDisinherit>
 80106c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2200      	movs	r2, #0
 80106c6:	609a      	str	r2, [r3, #8]
 80106c8:	e043      	b.n	8010752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d119      	bne.n	8010704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6858      	ldr	r0, [r3, #4]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106d8:	461a      	mov	r2, r3
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	f003 fa5c 	bl	8013b98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106e8:	441a      	add	r2, r3
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	689b      	ldr	r3, [r3, #8]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d32b      	bcc.n	8010752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	605a      	str	r2, [r3, #4]
 8010702:	e026      	b.n	8010752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	68d8      	ldr	r0, [r3, #12]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801070c:	461a      	mov	r2, r3
 801070e:	68b9      	ldr	r1, [r7, #8]
 8010710:	f003 fa42 	bl	8013b98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	68da      	ldr	r2, [r3, #12]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801071c:	425b      	negs	r3, r3
 801071e:	441a      	add	r2, r3
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	68da      	ldr	r2, [r3, #12]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	429a      	cmp	r2, r3
 801072e:	d207      	bcs.n	8010740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	689a      	ldr	r2, [r3, #8]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010738:	425b      	negs	r3, r3
 801073a:	441a      	add	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b02      	cmp	r3, #2
 8010744:	d105      	bne.n	8010752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	3b01      	subs	r3, #1
 8010750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	1c5a      	adds	r2, r3, #1
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801075a:	697b      	ldr	r3, [r7, #20]
}
 801075c:	4618      	mov	r0, r3
 801075e:	3718      	adds	r7, #24
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010772:	2b00      	cmp	r3, #0
 8010774:	d018      	beq.n	80107a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	68da      	ldr	r2, [r3, #12]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801077e:	441a      	add	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	68da      	ldr	r2, [r3, #12]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	429a      	cmp	r2, r3
 801078e:	d303      	bcc.n	8010798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	68d9      	ldr	r1, [r3, #12]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107a0:	461a      	mov	r2, r3
 80107a2:	6838      	ldr	r0, [r7, #0]
 80107a4:	f003 f9f8 	bl	8013b98 <memcpy>
	}
}
 80107a8:	bf00      	nop
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80107b8:	f001 fe6e 	bl	8012498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80107c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107c4:	e011      	b.n	80107ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d012      	beq.n	80107f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	3324      	adds	r3, #36	@ 0x24
 80107d2:	4618      	mov	r0, r3
 80107d4:	f000 fd5c 	bl	8011290 <xTaskRemoveFromEventList>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80107de:	f000 fe35 	bl	801144c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	3b01      	subs	r3, #1
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	dce9      	bgt.n	80107c6 <prvUnlockQueue+0x16>
 80107f2:	e000      	b.n	80107f6 <prvUnlockQueue+0x46>
					break;
 80107f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	22ff      	movs	r2, #255	@ 0xff
 80107fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80107fe:	f001 fe7d 	bl	80124fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010802:	f001 fe49 	bl	8012498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801080c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801080e:	e011      	b.n	8010834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d012      	beq.n	801083e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3310      	adds	r3, #16
 801081c:	4618      	mov	r0, r3
 801081e:	f000 fd37 	bl	8011290 <xTaskRemoveFromEventList>
 8010822:	4603      	mov	r3, r0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010828:	f000 fe10 	bl	801144c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801082c:	7bbb      	ldrb	r3, [r7, #14]
 801082e:	3b01      	subs	r3, #1
 8010830:	b2db      	uxtb	r3, r3
 8010832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dce9      	bgt.n	8010810 <prvUnlockQueue+0x60>
 801083c:	e000      	b.n	8010840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801083e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	22ff      	movs	r2, #255	@ 0xff
 8010844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010848:	f001 fe58 	bl	80124fc <vPortExitCritical>
}
 801084c:	bf00      	nop
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801085c:	f001 fe1c 	bl	8012498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010864:	2b00      	cmp	r3, #0
 8010866:	d102      	bne.n	801086e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010868:	2301      	movs	r3, #1
 801086a:	60fb      	str	r3, [r7, #12]
 801086c:	e001      	b.n	8010872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010872:	f001 fe43 	bl	80124fc <vPortExitCritical>

	return xReturn;
 8010876:	68fb      	ldr	r3, [r7, #12]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010888:	f001 fe06 	bl	8012498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010894:	429a      	cmp	r2, r3
 8010896:	d102      	bne.n	801089e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010898:	2301      	movs	r3, #1
 801089a:	60fb      	str	r3, [r7, #12]
 801089c:	e001      	b.n	80108a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801089e:	2300      	movs	r3, #0
 80108a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108a2:	f001 fe2b 	bl	80124fc <vPortExitCritical>

	return xReturn;
 80108a6:	68fb      	ldr	r3, [r7, #12]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80108ba:	2300      	movs	r3, #0
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	e014      	b.n	80108ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80108c0:	4a0f      	ldr	r2, [pc, #60]	@ (8010900 <vQueueAddToRegistry+0x50>)
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d10b      	bne.n	80108e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80108cc:	490c      	ldr	r1, [pc, #48]	@ (8010900 <vQueueAddToRegistry+0x50>)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80108d6:	4a0a      	ldr	r2, [pc, #40]	@ (8010900 <vQueueAddToRegistry+0x50>)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	00db      	lsls	r3, r3, #3
 80108dc:	4413      	add	r3, r2
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80108e2:	e006      	b.n	80108f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	3301      	adds	r3, #1
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2b07      	cmp	r3, #7
 80108ee:	d9e7      	bls.n	80108c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80108f0:	bf00      	nop
 80108f2:	bf00      	nop
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	20001298 	.word	0x20001298

08010904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010914:	f001 fdc0 	bl	8012498 <vPortEnterCritical>
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801091e:	b25b      	sxtb	r3, r3
 8010920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010924:	d103      	bne.n	801092e <vQueueWaitForMessageRestricted+0x2a>
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	2200      	movs	r2, #0
 801092a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010934:	b25b      	sxtb	r3, r3
 8010936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801093a:	d103      	bne.n	8010944 <vQueueWaitForMessageRestricted+0x40>
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010944:	f001 fdda 	bl	80124fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801094c:	2b00      	cmp	r3, #0
 801094e:	d106      	bne.n	801095e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	3324      	adds	r3, #36	@ 0x24
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	68b9      	ldr	r1, [r7, #8]
 8010958:	4618      	mov	r0, r3
 801095a:	f000 fc6d 	bl	8011238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801095e:	6978      	ldr	r0, [r7, #20]
 8010960:	f7ff ff26 	bl	80107b0 <prvUnlockQueue>
	}
 8010964:	bf00      	nop
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801096c:	b580      	push	{r7, lr}
 801096e:	b08e      	sub	sp, #56	@ 0x38
 8010970:	af04      	add	r7, sp, #16
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
 8010978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801097a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801097c:	2b00      	cmp	r3, #0
 801097e:	d10b      	bne.n	8010998 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	623b      	str	r3, [r7, #32]
}
 8010992:	bf00      	nop
 8010994:	bf00      	nop
 8010996:	e7fd      	b.n	8010994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099a:	2b00      	cmp	r3, #0
 801099c:	d10b      	bne.n	80109b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 801099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a2:	f383 8811 	msr	BASEPRI, r3
 80109a6:	f3bf 8f6f 	isb	sy
 80109aa:	f3bf 8f4f 	dsb	sy
 80109ae:	61fb      	str	r3, [r7, #28]
}
 80109b0:	bf00      	nop
 80109b2:	bf00      	nop
 80109b4:	e7fd      	b.n	80109b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80109b6:	23a8      	movs	r3, #168	@ 0xa8
 80109b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80109be:	d00b      	beq.n	80109d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80109c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c4:	f383 8811 	msr	BASEPRI, r3
 80109c8:	f3bf 8f6f 	isb	sy
 80109cc:	f3bf 8f4f 	dsb	sy
 80109d0:	61bb      	str	r3, [r7, #24]
}
 80109d2:	bf00      	nop
 80109d4:	bf00      	nop
 80109d6:	e7fd      	b.n	80109d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80109d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80109da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d01e      	beq.n	8010a1e <xTaskCreateStatic+0xb2>
 80109e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d01b      	beq.n	8010a1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80109ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80109f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f2:	2202      	movs	r2, #2
 80109f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80109f8:	2300      	movs	r3, #0
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fe:	9302      	str	r3, [sp, #8]
 8010a00:	f107 0314 	add.w	r3, r7, #20
 8010a04:	9301      	str	r3, [sp, #4]
 8010a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	68b9      	ldr	r1, [r7, #8]
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f000 f851 	bl	8010ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010a18:	f000 f8f6 	bl	8010c08 <prvAddNewTaskToReadyList>
 8010a1c:	e001      	b.n	8010a22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010a22:	697b      	ldr	r3, [r7, #20]
	}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3728      	adds	r7, #40	@ 0x28
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b08c      	sub	sp, #48	@ 0x30
 8010a30:	af04      	add	r7, sp, #16
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	603b      	str	r3, [r7, #0]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010a3c:	88fb      	ldrh	r3, [r7, #6]
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f001 fe4b 	bl	80126dc <pvPortMalloc>
 8010a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00e      	beq.n	8010a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010a4e:	20a8      	movs	r0, #168	@ 0xa8
 8010a50:	f001 fe44 	bl	80126dc <pvPortMalloc>
 8010a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d003      	beq.n	8010a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a62:	e005      	b.n	8010a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010a64:	6978      	ldr	r0, [r7, #20]
 8010a66:	f001 ff07 	bl	8012878 <vPortFree>
 8010a6a:	e001      	b.n	8010a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d017      	beq.n	8010aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010a7e:	88fa      	ldrh	r2, [r7, #6]
 8010a80:	2300      	movs	r3, #0
 8010a82:	9303      	str	r3, [sp, #12]
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	9302      	str	r3, [sp, #8]
 8010a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8a:	9301      	str	r3, [sp, #4]
 8010a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f000 f80f 	bl	8010ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a9a:	69f8      	ldr	r0, [r7, #28]
 8010a9c:	f000 f8b4 	bl	8010c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	61bb      	str	r3, [r7, #24]
 8010aa4:	e002      	b.n	8010aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010aac:	69bb      	ldr	r3, [r7, #24]
	}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3720      	adds	r7, #32
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
	...

08010ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	461a      	mov	r2, r3
 8010ad0:	21a5      	movs	r1, #165	@ 0xa5
 8010ad2:	f002 ff83 	bl	80139dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	4413      	add	r3, r2
 8010ae6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	f023 0307 	bic.w	r3, r3, #7
 8010aee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	f003 0307 	and.w	r3, r3, #7
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00b      	beq.n	8010b12 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	617b      	str	r3, [r7, #20]
}
 8010b0c:	bf00      	nop
 8010b0e:	bf00      	nop
 8010b10:	e7fd      	b.n	8010b0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d01f      	beq.n	8010b58 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b18:	2300      	movs	r3, #0
 8010b1a:	61fb      	str	r3, [r7, #28]
 8010b1c:	e012      	b.n	8010b44 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	4413      	add	r3, r2
 8010b24:	7819      	ldrb	r1, [r3, #0]
 8010b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	3334      	adds	r3, #52	@ 0x34
 8010b2e:	460a      	mov	r2, r1
 8010b30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	4413      	add	r3, r2
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d006      	beq.n	8010b4c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	3301      	adds	r3, #1
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	2b0f      	cmp	r3, #15
 8010b48:	d9e9      	bls.n	8010b1e <prvInitialiseNewTask+0x66>
 8010b4a:	e000      	b.n	8010b4e <prvInitialiseNewTask+0x96>
			{
				break;
 8010b4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b50:	2200      	movs	r2, #0
 8010b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010b56:	e003      	b.n	8010b60 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b62:	2b37      	cmp	r3, #55	@ 0x37
 8010b64:	d901      	bls.n	8010b6a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010b66:	2337      	movs	r3, #55	@ 0x37
 8010b68:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b74:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b78:	2200      	movs	r2, #0
 8010b7a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7e:	3304      	adds	r3, #4
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fe ff48 	bl	800fa16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b88:	3318      	adds	r3, #24
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fe ff43 	bl	800fa16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ba4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb8:	3354      	adds	r3, #84	@ 0x54
 8010bba:	224c      	movs	r2, #76	@ 0x4c
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f002 ff0c 	bl	80139dc <memset>
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8010bfc <prvInitialiseNewTask+0x144>)
 8010bc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8010bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8010c00 <prvInitialiseNewTask+0x148>)
 8010bce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8010c04 <prvInitialiseNewTask+0x14c>)
 8010bd4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010bd6:	683a      	ldr	r2, [r7, #0]
 8010bd8:	68f9      	ldr	r1, [r7, #12]
 8010bda:	69b8      	ldr	r0, [r7, #24]
 8010bdc:	f001 fb2a 	bl	8012234 <pxPortInitialiseStack>
 8010be0:	4602      	mov	r2, r0
 8010be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bf2:	bf00      	nop
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	20003700 	.word	0x20003700
 8010c00:	20003768 	.word	0x20003768
 8010c04:	200037d0 	.word	0x200037d0

08010c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010c10:	f001 fc42 	bl	8012498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010c14:	4b2d      	ldr	r3, [pc, #180]	@ (8010ccc <prvAddNewTaskToReadyList+0xc4>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8010ccc <prvAddNewTaskToReadyList+0xc4>)
 8010c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8010cd0 <prvAddNewTaskToReadyList+0xc8>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010c26:	4a2a      	ldr	r2, [pc, #168]	@ (8010cd0 <prvAddNewTaskToReadyList+0xc8>)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010c2c:	4b27      	ldr	r3, [pc, #156]	@ (8010ccc <prvAddNewTaskToReadyList+0xc4>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d110      	bne.n	8010c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010c34:	f000 fc2e 	bl	8011494 <prvInitialiseTaskLists>
 8010c38:	e00d      	b.n	8010c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010c3a:	4b26      	ldr	r3, [pc, #152]	@ (8010cd4 <prvAddNewTaskToReadyList+0xcc>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d109      	bne.n	8010c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010c42:	4b23      	ldr	r3, [pc, #140]	@ (8010cd0 <prvAddNewTaskToReadyList+0xc8>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d802      	bhi.n	8010c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010c50:	4a1f      	ldr	r2, [pc, #124]	@ (8010cd0 <prvAddNewTaskToReadyList+0xc8>)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010c56:	4b20      	ldr	r3, [pc, #128]	@ (8010cd8 <prvAddNewTaskToReadyList+0xd0>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8010cd8 <prvAddNewTaskToReadyList+0xd0>)
 8010c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010c60:	4b1d      	ldr	r3, [pc, #116]	@ (8010cd8 <prvAddNewTaskToReadyList+0xd0>)
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8010cdc <prvAddNewTaskToReadyList+0xd4>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d903      	bls.n	8010c7c <prvAddNewTaskToReadyList+0x74>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c78:	4a18      	ldr	r2, [pc, #96]	@ (8010cdc <prvAddNewTaskToReadyList+0xd4>)
 8010c7a:	6013      	str	r3, [r2, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c80:	4613      	mov	r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4413      	add	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	4a15      	ldr	r2, [pc, #84]	@ (8010ce0 <prvAddNewTaskToReadyList+0xd8>)
 8010c8a:	441a      	add	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	3304      	adds	r3, #4
 8010c90:	4619      	mov	r1, r3
 8010c92:	4610      	mov	r0, r2
 8010c94:	f7fe fecc 	bl	800fa30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010c98:	f001 fc30 	bl	80124fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd4 <prvAddNewTaskToReadyList+0xcc>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00e      	beq.n	8010cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8010cd0 <prvAddNewTaskToReadyList+0xc8>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d207      	bcs.n	8010cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce4 <prvAddNewTaskToReadyList+0xdc>)
 8010cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cb8:	601a      	str	r2, [r3, #0]
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cc2:	bf00      	nop
 8010cc4:	3708      	adds	r7, #8
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	200017ac 	.word	0x200017ac
 8010cd0:	200012d8 	.word	0x200012d8
 8010cd4:	200017b8 	.word	0x200017b8
 8010cd8:	200017c8 	.word	0x200017c8
 8010cdc:	200017b4 	.word	0x200017b4
 8010ce0:	200012dc 	.word	0x200012dc
 8010ce4:	e000ed04 	.word	0xe000ed04

08010ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d018      	beq.n	8010d2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010cfa:	4b14      	ldr	r3, [pc, #80]	@ (8010d4c <vTaskDelay+0x64>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00b      	beq.n	8010d1a <vTaskDelay+0x32>
	__asm volatile
 8010d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d06:	f383 8811 	msr	BASEPRI, r3
 8010d0a:	f3bf 8f6f 	isb	sy
 8010d0e:	f3bf 8f4f 	dsb	sy
 8010d12:	60bb      	str	r3, [r7, #8]
}
 8010d14:	bf00      	nop
 8010d16:	bf00      	nop
 8010d18:	e7fd      	b.n	8010d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010d1a:	f000 f88b 	bl	8010e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010d1e:	2100      	movs	r1, #0
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 fe19 	bl	8011958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010d26:	f000 f893 	bl	8010e50 <xTaskResumeAll>
 8010d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d107      	bne.n	8010d42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010d32:	4b07      	ldr	r3, [pc, #28]	@ (8010d50 <vTaskDelay+0x68>)
 8010d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d38:	601a      	str	r2, [r3, #0]
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010d42:	bf00      	nop
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	200017d4 	.word	0x200017d4
 8010d50:	e000ed04 	.word	0xe000ed04

08010d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b08a      	sub	sp, #40	@ 0x28
 8010d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010d62:	463a      	mov	r2, r7
 8010d64:	1d39      	adds	r1, r7, #4
 8010d66:	f107 0308 	add.w	r3, r7, #8
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fe fdac 	bl	800f8c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	68ba      	ldr	r2, [r7, #8]
 8010d76:	9202      	str	r2, [sp, #8]
 8010d78:	9301      	str	r3, [sp, #4]
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	2300      	movs	r3, #0
 8010d80:	460a      	mov	r2, r1
 8010d82:	4924      	ldr	r1, [pc, #144]	@ (8010e14 <vTaskStartScheduler+0xc0>)
 8010d84:	4824      	ldr	r0, [pc, #144]	@ (8010e18 <vTaskStartScheduler+0xc4>)
 8010d86:	f7ff fdf1 	bl	801096c <xTaskCreateStatic>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	4a23      	ldr	r2, [pc, #140]	@ (8010e1c <vTaskStartScheduler+0xc8>)
 8010d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010d90:	4b22      	ldr	r3, [pc, #136]	@ (8010e1c <vTaskStartScheduler+0xc8>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	617b      	str	r3, [r7, #20]
 8010d9c:	e001      	b.n	8010da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d102      	bne.n	8010dae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010da8:	f000 fe2a 	bl	8011a00 <xTimerCreateTimerTask>
 8010dac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d11b      	bne.n	8010dec <vTaskStartScheduler+0x98>
	__asm volatile
 8010db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010db8:	f383 8811 	msr	BASEPRI, r3
 8010dbc:	f3bf 8f6f 	isb	sy
 8010dc0:	f3bf 8f4f 	dsb	sy
 8010dc4:	613b      	str	r3, [r7, #16]
}
 8010dc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010dc8:	4b15      	ldr	r3, [pc, #84]	@ (8010e20 <vTaskStartScheduler+0xcc>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3354      	adds	r3, #84	@ 0x54
 8010dce:	4a15      	ldr	r2, [pc, #84]	@ (8010e24 <vTaskStartScheduler+0xd0>)
 8010dd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010dd2:	4b15      	ldr	r3, [pc, #84]	@ (8010e28 <vTaskStartScheduler+0xd4>)
 8010dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010dda:	4b14      	ldr	r3, [pc, #80]	@ (8010e2c <vTaskStartScheduler+0xd8>)
 8010ddc:	2201      	movs	r2, #1
 8010dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010de0:	4b13      	ldr	r3, [pc, #76]	@ (8010e30 <vTaskStartScheduler+0xdc>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010de6:	f001 fab3 	bl	8012350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010dea:	e00f      	b.n	8010e0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df2:	d10b      	bne.n	8010e0c <vTaskStartScheduler+0xb8>
	__asm volatile
 8010df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	60fb      	str	r3, [r7, #12]
}
 8010e06:	bf00      	nop
 8010e08:	bf00      	nop
 8010e0a:	e7fd      	b.n	8010e08 <vTaskStartScheduler+0xb4>
}
 8010e0c:	bf00      	nop
 8010e0e:	3718      	adds	r7, #24
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0801431c 	.word	0x0801431c
 8010e18:	08011465 	.word	0x08011465
 8010e1c:	200017d0 	.word	0x200017d0
 8010e20:	200012d8 	.word	0x200012d8
 8010e24:	20000194 	.word	0x20000194
 8010e28:	200017cc 	.word	0x200017cc
 8010e2c:	200017b8 	.word	0x200017b8
 8010e30:	200017b0 	.word	0x200017b0

08010e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010e38:	4b04      	ldr	r3, [pc, #16]	@ (8010e4c <vTaskSuspendAll+0x18>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	4a03      	ldr	r2, [pc, #12]	@ (8010e4c <vTaskSuspendAll+0x18>)
 8010e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010e42:	bf00      	nop
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	200017d4 	.word	0x200017d4

08010e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010e56:	2300      	movs	r3, #0
 8010e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010e5e:	4b42      	ldr	r3, [pc, #264]	@ (8010f68 <xTaskResumeAll+0x118>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d10b      	bne.n	8010e7e <xTaskResumeAll+0x2e>
	__asm volatile
 8010e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e6a:	f383 8811 	msr	BASEPRI, r3
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f3bf 8f4f 	dsb	sy
 8010e76:	603b      	str	r3, [r7, #0]
}
 8010e78:	bf00      	nop
 8010e7a:	bf00      	nop
 8010e7c:	e7fd      	b.n	8010e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010e7e:	f001 fb0b 	bl	8012498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010e82:	4b39      	ldr	r3, [pc, #228]	@ (8010f68 <xTaskResumeAll+0x118>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	3b01      	subs	r3, #1
 8010e88:	4a37      	ldr	r2, [pc, #220]	@ (8010f68 <xTaskResumeAll+0x118>)
 8010e8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e8c:	4b36      	ldr	r3, [pc, #216]	@ (8010f68 <xTaskResumeAll+0x118>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d162      	bne.n	8010f5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e94:	4b35      	ldr	r3, [pc, #212]	@ (8010f6c <xTaskResumeAll+0x11c>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d05e      	beq.n	8010f5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e9c:	e02f      	b.n	8010efe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e9e:	4b34      	ldr	r3, [pc, #208]	@ (8010f70 <xTaskResumeAll+0x120>)
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	3318      	adds	r3, #24
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7fe fe1d 	bl	800faea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	3304      	adds	r3, #4
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fe fe18 	bl	800faea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8010f74 <xTaskResumeAll+0x124>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d903      	bls.n	8010ece <xTaskResumeAll+0x7e>
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eca:	4a2a      	ldr	r2, [pc, #168]	@ (8010f74 <xTaskResumeAll+0x124>)
 8010ecc:	6013      	str	r3, [r2, #0]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4a27      	ldr	r2, [pc, #156]	@ (8010f78 <xTaskResumeAll+0x128>)
 8010edc:	441a      	add	r2, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4610      	mov	r0, r2
 8010ee6:	f7fe fda3 	bl	800fa30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eee:	4b23      	ldr	r3, [pc, #140]	@ (8010f7c <xTaskResumeAll+0x12c>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d302      	bcc.n	8010efe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010ef8:	4b21      	ldr	r3, [pc, #132]	@ (8010f80 <xTaskResumeAll+0x130>)
 8010efa:	2201      	movs	r2, #1
 8010efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010efe:	4b1c      	ldr	r3, [pc, #112]	@ (8010f70 <xTaskResumeAll+0x120>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1cb      	bne.n	8010e9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010f0c:	f000 fb66 	bl	80115dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010f10:	4b1c      	ldr	r3, [pc, #112]	@ (8010f84 <xTaskResumeAll+0x134>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d010      	beq.n	8010f3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010f1c:	f000 f846 	bl	8010fac <xTaskIncrementTick>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010f26:	4b16      	ldr	r3, [pc, #88]	@ (8010f80 <xTaskResumeAll+0x130>)
 8010f28:	2201      	movs	r2, #1
 8010f2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3b01      	subs	r3, #1
 8010f30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1f1      	bne.n	8010f1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010f38:	4b12      	ldr	r3, [pc, #72]	@ (8010f84 <xTaskResumeAll+0x134>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010f3e:	4b10      	ldr	r3, [pc, #64]	@ (8010f80 <xTaskResumeAll+0x130>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d009      	beq.n	8010f5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010f46:	2301      	movs	r3, #1
 8010f48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010f88 <xTaskResumeAll+0x138>)
 8010f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f5a:	f001 facf 	bl	80124fc <vPortExitCritical>

	return xAlreadyYielded;
 8010f5e:	68bb      	ldr	r3, [r7, #8]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	200017d4 	.word	0x200017d4
 8010f6c:	200017ac 	.word	0x200017ac
 8010f70:	2000176c 	.word	0x2000176c
 8010f74:	200017b4 	.word	0x200017b4
 8010f78:	200012dc 	.word	0x200012dc
 8010f7c:	200012d8 	.word	0x200012d8
 8010f80:	200017c0 	.word	0x200017c0
 8010f84:	200017bc 	.word	0x200017bc
 8010f88:	e000ed04 	.word	0xe000ed04

08010f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010f92:	4b05      	ldr	r3, [pc, #20]	@ (8010fa8 <xTaskGetTickCount+0x1c>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010f98:	687b      	ldr	r3, [r7, #4]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	200017b0 	.word	0x200017b0

08010fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80110f4 <xTaskIncrementTick+0x148>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f040 8090 	bne.w	80110e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80110f8 <xTaskIncrementTick+0x14c>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80110f8 <xTaskIncrementTick+0x14c>)
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d121      	bne.n	8011018 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010fd4:	4b49      	ldr	r3, [pc, #292]	@ (80110fc <xTaskIncrementTick+0x150>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00b      	beq.n	8010ff6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	603b      	str	r3, [r7, #0]
}
 8010ff0:	bf00      	nop
 8010ff2:	bf00      	nop
 8010ff4:	e7fd      	b.n	8010ff2 <xTaskIncrementTick+0x46>
 8010ff6:	4b41      	ldr	r3, [pc, #260]	@ (80110fc <xTaskIncrementTick+0x150>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	60fb      	str	r3, [r7, #12]
 8010ffc:	4b40      	ldr	r3, [pc, #256]	@ (8011100 <xTaskIncrementTick+0x154>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4a3e      	ldr	r2, [pc, #248]	@ (80110fc <xTaskIncrementTick+0x150>)
 8011002:	6013      	str	r3, [r2, #0]
 8011004:	4a3e      	ldr	r2, [pc, #248]	@ (8011100 <xTaskIncrementTick+0x154>)
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6013      	str	r3, [r2, #0]
 801100a:	4b3e      	ldr	r3, [pc, #248]	@ (8011104 <xTaskIncrementTick+0x158>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	3301      	adds	r3, #1
 8011010:	4a3c      	ldr	r2, [pc, #240]	@ (8011104 <xTaskIncrementTick+0x158>)
 8011012:	6013      	str	r3, [r2, #0]
 8011014:	f000 fae2 	bl	80115dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011018:	4b3b      	ldr	r3, [pc, #236]	@ (8011108 <xTaskIncrementTick+0x15c>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	429a      	cmp	r2, r3
 8011020:	d349      	bcc.n	80110b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011022:	4b36      	ldr	r3, [pc, #216]	@ (80110fc <xTaskIncrementTick+0x150>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d104      	bne.n	8011036 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801102c:	4b36      	ldr	r3, [pc, #216]	@ (8011108 <xTaskIncrementTick+0x15c>)
 801102e:	f04f 32ff 	mov.w	r2, #4294967295
 8011032:	601a      	str	r2, [r3, #0]
					break;
 8011034:	e03f      	b.n	80110b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011036:	4b31      	ldr	r3, [pc, #196]	@ (80110fc <xTaskIncrementTick+0x150>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	429a      	cmp	r2, r3
 801104c:	d203      	bcs.n	8011056 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801104e:	4a2e      	ldr	r2, [pc, #184]	@ (8011108 <xTaskIncrementTick+0x15c>)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011054:	e02f      	b.n	80110b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	3304      	adds	r3, #4
 801105a:	4618      	mov	r0, r3
 801105c:	f7fe fd45 	bl	800faea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011064:	2b00      	cmp	r3, #0
 8011066:	d004      	beq.n	8011072 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	3318      	adds	r3, #24
 801106c:	4618      	mov	r0, r3
 801106e:	f7fe fd3c 	bl	800faea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011076:	4b25      	ldr	r3, [pc, #148]	@ (801110c <xTaskIncrementTick+0x160>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	429a      	cmp	r2, r3
 801107c:	d903      	bls.n	8011086 <xTaskIncrementTick+0xda>
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011082:	4a22      	ldr	r2, [pc, #136]	@ (801110c <xTaskIncrementTick+0x160>)
 8011084:	6013      	str	r3, [r2, #0]
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801108a:	4613      	mov	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	4413      	add	r3, r2
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4a1f      	ldr	r2, [pc, #124]	@ (8011110 <xTaskIncrementTick+0x164>)
 8011094:	441a      	add	r2, r3
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	3304      	adds	r3, #4
 801109a:	4619      	mov	r1, r3
 801109c:	4610      	mov	r0, r2
 801109e:	f7fe fcc7 	bl	800fa30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110a6:	4b1b      	ldr	r3, [pc, #108]	@ (8011114 <xTaskIncrementTick+0x168>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d3b8      	bcc.n	8011022 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80110b0:	2301      	movs	r3, #1
 80110b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110b4:	e7b5      	b.n	8011022 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80110b6:	4b17      	ldr	r3, [pc, #92]	@ (8011114 <xTaskIncrementTick+0x168>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110bc:	4914      	ldr	r1, [pc, #80]	@ (8011110 <xTaskIncrementTick+0x164>)
 80110be:	4613      	mov	r3, r2
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	4413      	add	r3, r2
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	440b      	add	r3, r1
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d901      	bls.n	80110d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80110ce:	2301      	movs	r3, #1
 80110d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80110d2:	4b11      	ldr	r3, [pc, #68]	@ (8011118 <xTaskIncrementTick+0x16c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d007      	beq.n	80110ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80110da:	2301      	movs	r3, #1
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	e004      	b.n	80110ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80110e0:	4b0e      	ldr	r3, [pc, #56]	@ (801111c <xTaskIncrementTick+0x170>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3301      	adds	r3, #1
 80110e6:	4a0d      	ldr	r2, [pc, #52]	@ (801111c <xTaskIncrementTick+0x170>)
 80110e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80110ea:	697b      	ldr	r3, [r7, #20]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3718      	adds	r7, #24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	200017d4 	.word	0x200017d4
 80110f8:	200017b0 	.word	0x200017b0
 80110fc:	20001764 	.word	0x20001764
 8011100:	20001768 	.word	0x20001768
 8011104:	200017c4 	.word	0x200017c4
 8011108:	200017cc 	.word	0x200017cc
 801110c:	200017b4 	.word	0x200017b4
 8011110:	200012dc 	.word	0x200012dc
 8011114:	200012d8 	.word	0x200012d8
 8011118:	200017c0 	.word	0x200017c0
 801111c:	200017bc 	.word	0x200017bc

08011120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011120:	b480      	push	{r7}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011126:	4b2b      	ldr	r3, [pc, #172]	@ (80111d4 <vTaskSwitchContext+0xb4>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801112e:	4b2a      	ldr	r3, [pc, #168]	@ (80111d8 <vTaskSwitchContext+0xb8>)
 8011130:	2201      	movs	r2, #1
 8011132:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011134:	e047      	b.n	80111c6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8011136:	4b28      	ldr	r3, [pc, #160]	@ (80111d8 <vTaskSwitchContext+0xb8>)
 8011138:	2200      	movs	r2, #0
 801113a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801113c:	4b27      	ldr	r3, [pc, #156]	@ (80111dc <vTaskSwitchContext+0xbc>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	60fb      	str	r3, [r7, #12]
 8011142:	e011      	b.n	8011168 <vTaskSwitchContext+0x48>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d10b      	bne.n	8011162 <vTaskSwitchContext+0x42>
	__asm volatile
 801114a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801114e:	f383 8811 	msr	BASEPRI, r3
 8011152:	f3bf 8f6f 	isb	sy
 8011156:	f3bf 8f4f 	dsb	sy
 801115a:	607b      	str	r3, [r7, #4]
}
 801115c:	bf00      	nop
 801115e:	bf00      	nop
 8011160:	e7fd      	b.n	801115e <vTaskSwitchContext+0x3e>
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3b01      	subs	r3, #1
 8011166:	60fb      	str	r3, [r7, #12]
 8011168:	491d      	ldr	r1, [pc, #116]	@ (80111e0 <vTaskSwitchContext+0xc0>)
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	4613      	mov	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	440b      	add	r3, r1
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d0e3      	beq.n	8011144 <vTaskSwitchContext+0x24>
 801117c:	68fa      	ldr	r2, [r7, #12]
 801117e:	4613      	mov	r3, r2
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4413      	add	r3, r2
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	4a16      	ldr	r2, [pc, #88]	@ (80111e0 <vTaskSwitchContext+0xc0>)
 8011188:	4413      	add	r3, r2
 801118a:	60bb      	str	r3, [r7, #8]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	685a      	ldr	r2, [r3, #4]
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	605a      	str	r2, [r3, #4]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	685a      	ldr	r2, [r3, #4]
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	3308      	adds	r3, #8
 801119e:	429a      	cmp	r2, r3
 80111a0:	d104      	bne.n	80111ac <vTaskSwitchContext+0x8c>
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	685a      	ldr	r2, [r3, #4]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	605a      	str	r2, [r3, #4]
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	4a0c      	ldr	r2, [pc, #48]	@ (80111e4 <vTaskSwitchContext+0xc4>)
 80111b4:	6013      	str	r3, [r2, #0]
 80111b6:	4a09      	ldr	r2, [pc, #36]	@ (80111dc <vTaskSwitchContext+0xbc>)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80111bc:	4b09      	ldr	r3, [pc, #36]	@ (80111e4 <vTaskSwitchContext+0xc4>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	3354      	adds	r3, #84	@ 0x54
 80111c2:	4a09      	ldr	r2, [pc, #36]	@ (80111e8 <vTaskSwitchContext+0xc8>)
 80111c4:	6013      	str	r3, [r2, #0]
}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	200017d4 	.word	0x200017d4
 80111d8:	200017c0 	.word	0x200017c0
 80111dc:	200017b4 	.word	0x200017b4
 80111e0:	200012dc 	.word	0x200012dc
 80111e4:	200012d8 	.word	0x200012d8
 80111e8:	20000194 	.word	0x20000194

080111ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10b      	bne.n	8011214 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80111fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011200:	f383 8811 	msr	BASEPRI, r3
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	60fb      	str	r3, [r7, #12]
}
 801120e:	bf00      	nop
 8011210:	bf00      	nop
 8011212:	e7fd      	b.n	8011210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011214:	4b07      	ldr	r3, [pc, #28]	@ (8011234 <vTaskPlaceOnEventList+0x48>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	3318      	adds	r3, #24
 801121a:	4619      	mov	r1, r3
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7fe fc2b 	bl	800fa78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011222:	2101      	movs	r1, #1
 8011224:	6838      	ldr	r0, [r7, #0]
 8011226:	f000 fb97 	bl	8011958 <prvAddCurrentTaskToDelayedList>
}
 801122a:	bf00      	nop
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	200012d8 	.word	0x200012d8

08011238 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10b      	bne.n	8011262 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801124a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801124e:	f383 8811 	msr	BASEPRI, r3
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	617b      	str	r3, [r7, #20]
}
 801125c:	bf00      	nop
 801125e:	bf00      	nop
 8011260:	e7fd      	b.n	801125e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011262:	4b0a      	ldr	r3, [pc, #40]	@ (801128c <vTaskPlaceOnEventListRestricted+0x54>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3318      	adds	r3, #24
 8011268:	4619      	mov	r1, r3
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7fe fbe0 	bl	800fa30 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d002      	beq.n	801127c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011276:	f04f 33ff 	mov.w	r3, #4294967295
 801127a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801127c:	6879      	ldr	r1, [r7, #4]
 801127e:	68b8      	ldr	r0, [r7, #8]
 8011280:	f000 fb6a 	bl	8011958 <prvAddCurrentTaskToDelayedList>
	}
 8011284:	bf00      	nop
 8011286:	3718      	adds	r7, #24
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	200012d8 	.word	0x200012d8

08011290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10b      	bne.n	80112be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80112a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112aa:	f383 8811 	msr	BASEPRI, r3
 80112ae:	f3bf 8f6f 	isb	sy
 80112b2:	f3bf 8f4f 	dsb	sy
 80112b6:	60fb      	str	r3, [r7, #12]
}
 80112b8:	bf00      	nop
 80112ba:	bf00      	nop
 80112bc:	e7fd      	b.n	80112ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	3318      	adds	r3, #24
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fc11 	bl	800faea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011340 <xTaskRemoveFromEventList+0xb0>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d11d      	bne.n	801130c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	3304      	adds	r3, #4
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fe fc08 	bl	800faea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112de:	4b19      	ldr	r3, [pc, #100]	@ (8011344 <xTaskRemoveFromEventList+0xb4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d903      	bls.n	80112ee <xTaskRemoveFromEventList+0x5e>
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ea:	4a16      	ldr	r2, [pc, #88]	@ (8011344 <xTaskRemoveFromEventList+0xb4>)
 80112ec:	6013      	str	r3, [r2, #0]
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112f2:	4613      	mov	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	4a13      	ldr	r2, [pc, #76]	@ (8011348 <xTaskRemoveFromEventList+0xb8>)
 80112fc:	441a      	add	r2, r3
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	3304      	adds	r3, #4
 8011302:	4619      	mov	r1, r3
 8011304:	4610      	mov	r0, r2
 8011306:	f7fe fb93 	bl	800fa30 <vListInsertEnd>
 801130a:	e005      	b.n	8011318 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	3318      	adds	r3, #24
 8011310:	4619      	mov	r1, r3
 8011312:	480e      	ldr	r0, [pc, #56]	@ (801134c <xTaskRemoveFromEventList+0xbc>)
 8011314:	f7fe fb8c 	bl	800fa30 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801131c:	4b0c      	ldr	r3, [pc, #48]	@ (8011350 <xTaskRemoveFromEventList+0xc0>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011322:	429a      	cmp	r2, r3
 8011324:	d905      	bls.n	8011332 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011326:	2301      	movs	r3, #1
 8011328:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801132a:	4b0a      	ldr	r3, [pc, #40]	@ (8011354 <xTaskRemoveFromEventList+0xc4>)
 801132c:	2201      	movs	r2, #1
 801132e:	601a      	str	r2, [r3, #0]
 8011330:	e001      	b.n	8011336 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011332:	2300      	movs	r3, #0
 8011334:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011336:	697b      	ldr	r3, [r7, #20]
}
 8011338:	4618      	mov	r0, r3
 801133a:	3718      	adds	r7, #24
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	200017d4 	.word	0x200017d4
 8011344:	200017b4 	.word	0x200017b4
 8011348:	200012dc 	.word	0x200012dc
 801134c:	2000176c 	.word	0x2000176c
 8011350:	200012d8 	.word	0x200012d8
 8011354:	200017c0 	.word	0x200017c0

08011358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011360:	4b06      	ldr	r3, [pc, #24]	@ (801137c <vTaskInternalSetTimeOutState+0x24>)
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011368:	4b05      	ldr	r3, [pc, #20]	@ (8011380 <vTaskInternalSetTimeOutState+0x28>)
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	605a      	str	r2, [r3, #4]
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	200017c4 	.word	0x200017c4
 8011380:	200017b0 	.word	0x200017b0

08011384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b088      	sub	sp, #32
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d10b      	bne.n	80113ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011398:	f383 8811 	msr	BASEPRI, r3
 801139c:	f3bf 8f6f 	isb	sy
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	613b      	str	r3, [r7, #16]
}
 80113a6:	bf00      	nop
 80113a8:	bf00      	nop
 80113aa:	e7fd      	b.n	80113a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10b      	bne.n	80113ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60fb      	str	r3, [r7, #12]
}
 80113c4:	bf00      	nop
 80113c6:	bf00      	nop
 80113c8:	e7fd      	b.n	80113c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80113ca:	f001 f865 	bl	8012498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80113ce:	4b1d      	ldr	r3, [pc, #116]	@ (8011444 <xTaskCheckForTimeOut+0xc0>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	69ba      	ldr	r2, [r7, #24]
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e6:	d102      	bne.n	80113ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80113e8:	2300      	movs	r3, #0
 80113ea:	61fb      	str	r3, [r7, #28]
 80113ec:	e023      	b.n	8011436 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	4b15      	ldr	r3, [pc, #84]	@ (8011448 <xTaskCheckForTimeOut+0xc4>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d007      	beq.n	801140a <xTaskCheckForTimeOut+0x86>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	429a      	cmp	r2, r3
 8011402:	d302      	bcc.n	801140a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011404:	2301      	movs	r3, #1
 8011406:	61fb      	str	r3, [r7, #28]
 8011408:	e015      	b.n	8011436 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	697a      	ldr	r2, [r7, #20]
 8011410:	429a      	cmp	r2, r3
 8011412:	d20b      	bcs.n	801142c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	1ad2      	subs	r2, r2, r3
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7ff ff99 	bl	8011358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011426:	2300      	movs	r3, #0
 8011428:	61fb      	str	r3, [r7, #28]
 801142a:	e004      	b.n	8011436 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	2200      	movs	r2, #0
 8011430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011432:	2301      	movs	r3, #1
 8011434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011436:	f001 f861 	bl	80124fc <vPortExitCritical>

	return xReturn;
 801143a:	69fb      	ldr	r3, [r7, #28]
}
 801143c:	4618      	mov	r0, r3
 801143e:	3720      	adds	r7, #32
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	200017b0 	.word	0x200017b0
 8011448:	200017c4 	.word	0x200017c4

0801144c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801144c:	b480      	push	{r7}
 801144e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011450:	4b03      	ldr	r3, [pc, #12]	@ (8011460 <vTaskMissedYield+0x14>)
 8011452:	2201      	movs	r2, #1
 8011454:	601a      	str	r2, [r3, #0]
}
 8011456:	bf00      	nop
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	200017c0 	.word	0x200017c0

08011464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801146c:	f000 f852 	bl	8011514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011470:	4b06      	ldr	r3, [pc, #24]	@ (801148c <prvIdleTask+0x28>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d9f9      	bls.n	801146c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011478:	4b05      	ldr	r3, [pc, #20]	@ (8011490 <prvIdleTask+0x2c>)
 801147a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801147e:	601a      	str	r2, [r3, #0]
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011488:	e7f0      	b.n	801146c <prvIdleTask+0x8>
 801148a:	bf00      	nop
 801148c:	200012dc 	.word	0x200012dc
 8011490:	e000ed04 	.word	0xe000ed04

08011494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801149a:	2300      	movs	r3, #0
 801149c:	607b      	str	r3, [r7, #4]
 801149e:	e00c      	b.n	80114ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	4613      	mov	r3, r2
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	4413      	add	r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4a12      	ldr	r2, [pc, #72]	@ (80114f4 <prvInitialiseTaskLists+0x60>)
 80114ac:	4413      	add	r3, r2
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe fa91 	bl	800f9d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3301      	adds	r3, #1
 80114b8:	607b      	str	r3, [r7, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b37      	cmp	r3, #55	@ 0x37
 80114be:	d9ef      	bls.n	80114a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80114c0:	480d      	ldr	r0, [pc, #52]	@ (80114f8 <prvInitialiseTaskLists+0x64>)
 80114c2:	f7fe fa88 	bl	800f9d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80114c6:	480d      	ldr	r0, [pc, #52]	@ (80114fc <prvInitialiseTaskLists+0x68>)
 80114c8:	f7fe fa85 	bl	800f9d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80114cc:	480c      	ldr	r0, [pc, #48]	@ (8011500 <prvInitialiseTaskLists+0x6c>)
 80114ce:	f7fe fa82 	bl	800f9d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80114d2:	480c      	ldr	r0, [pc, #48]	@ (8011504 <prvInitialiseTaskLists+0x70>)
 80114d4:	f7fe fa7f 	bl	800f9d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80114d8:	480b      	ldr	r0, [pc, #44]	@ (8011508 <prvInitialiseTaskLists+0x74>)
 80114da:	f7fe fa7c 	bl	800f9d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80114de:	4b0b      	ldr	r3, [pc, #44]	@ (801150c <prvInitialiseTaskLists+0x78>)
 80114e0:	4a05      	ldr	r2, [pc, #20]	@ (80114f8 <prvInitialiseTaskLists+0x64>)
 80114e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80114e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011510 <prvInitialiseTaskLists+0x7c>)
 80114e6:	4a05      	ldr	r2, [pc, #20]	@ (80114fc <prvInitialiseTaskLists+0x68>)
 80114e8:	601a      	str	r2, [r3, #0]
}
 80114ea:	bf00      	nop
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	200012dc 	.word	0x200012dc
 80114f8:	2000173c 	.word	0x2000173c
 80114fc:	20001750 	.word	0x20001750
 8011500:	2000176c 	.word	0x2000176c
 8011504:	20001780 	.word	0x20001780
 8011508:	20001798 	.word	0x20001798
 801150c:	20001764 	.word	0x20001764
 8011510:	20001768 	.word	0x20001768

08011514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801151a:	e019      	b.n	8011550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801151c:	f000 ffbc 	bl	8012498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011520:	4b10      	ldr	r3, [pc, #64]	@ (8011564 <prvCheckTasksWaitingTermination+0x50>)
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	3304      	adds	r3, #4
 801152c:	4618      	mov	r0, r3
 801152e:	f7fe fadc 	bl	800faea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011532:	4b0d      	ldr	r3, [pc, #52]	@ (8011568 <prvCheckTasksWaitingTermination+0x54>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	3b01      	subs	r3, #1
 8011538:	4a0b      	ldr	r2, [pc, #44]	@ (8011568 <prvCheckTasksWaitingTermination+0x54>)
 801153a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801153c:	4b0b      	ldr	r3, [pc, #44]	@ (801156c <prvCheckTasksWaitingTermination+0x58>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3b01      	subs	r3, #1
 8011542:	4a0a      	ldr	r2, [pc, #40]	@ (801156c <prvCheckTasksWaitingTermination+0x58>)
 8011544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011546:	f000 ffd9 	bl	80124fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f810 	bl	8011570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011550:	4b06      	ldr	r3, [pc, #24]	@ (801156c <prvCheckTasksWaitingTermination+0x58>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1e1      	bne.n	801151c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011558:	bf00      	nop
 801155a:	bf00      	nop
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	20001780 	.word	0x20001780
 8011568:	200017ac 	.word	0x200017ac
 801156c:	20001794 	.word	0x20001794

08011570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3354      	adds	r3, #84	@ 0x54
 801157c:	4618      	mov	r0, r3
 801157e:	f002 fa45 	bl	8013a0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011588:	2b00      	cmp	r3, #0
 801158a:	d108      	bne.n	801159e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011590:	4618      	mov	r0, r3
 8011592:	f001 f971 	bl	8012878 <vPortFree>
				vPortFree( pxTCB );
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f001 f96e 	bl	8012878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801159c:	e019      	b.n	80115d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d103      	bne.n	80115b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f001 f965 	bl	8012878 <vPortFree>
	}
 80115ae:	e010      	b.n	80115d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	d00b      	beq.n	80115d2 <prvDeleteTCB+0x62>
	__asm volatile
 80115ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115be:	f383 8811 	msr	BASEPRI, r3
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	60fb      	str	r3, [r7, #12]
}
 80115cc:	bf00      	nop
 80115ce:	bf00      	nop
 80115d0:	e7fd      	b.n	80115ce <prvDeleteTCB+0x5e>
	}
 80115d2:	bf00      	nop
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
	...

080115dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011614 <prvResetNextTaskUnblockTime+0x38>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d104      	bne.n	80115f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80115ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011618 <prvResetNextTaskUnblockTime+0x3c>)
 80115ee:	f04f 32ff 	mov.w	r2, #4294967295
 80115f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80115f4:	e008      	b.n	8011608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115f6:	4b07      	ldr	r3, [pc, #28]	@ (8011614 <prvResetNextTaskUnblockTime+0x38>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	68db      	ldr	r3, [r3, #12]
 80115fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	4a04      	ldr	r2, [pc, #16]	@ (8011618 <prvResetNextTaskUnblockTime+0x3c>)
 8011606:	6013      	str	r3, [r2, #0]
}
 8011608:	bf00      	nop
 801160a:	370c      	adds	r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr
 8011614:	20001764 	.word	0x20001764
 8011618:	200017cc 	.word	0x200017cc

0801161c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011622:	4b05      	ldr	r3, [pc, #20]	@ (8011638 <xTaskGetCurrentTaskHandle+0x1c>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011628:	687b      	ldr	r3, [r7, #4]
	}
 801162a:	4618      	mov	r0, r3
 801162c:	370c      	adds	r7, #12
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr
 8011636:	bf00      	nop
 8011638:	200012d8 	.word	0x200012d8

0801163c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011642:	4b0b      	ldr	r3, [pc, #44]	@ (8011670 <xTaskGetSchedulerState+0x34>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d102      	bne.n	8011650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801164a:	2301      	movs	r3, #1
 801164c:	607b      	str	r3, [r7, #4]
 801164e:	e008      	b.n	8011662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011650:	4b08      	ldr	r3, [pc, #32]	@ (8011674 <xTaskGetSchedulerState+0x38>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d102      	bne.n	801165e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011658:	2302      	movs	r3, #2
 801165a:	607b      	str	r3, [r7, #4]
 801165c:	e001      	b.n	8011662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801165e:	2300      	movs	r3, #0
 8011660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011662:	687b      	ldr	r3, [r7, #4]
	}
 8011664:	4618      	mov	r0, r3
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr
 8011670:	200017b8 	.word	0x200017b8
 8011674:	200017d4 	.word	0x200017d4

08011678 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011684:	2300      	movs	r3, #0
 8011686:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d051      	beq.n	8011732 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011692:	4b2a      	ldr	r3, [pc, #168]	@ (801173c <xTaskPriorityInherit+0xc4>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011698:	429a      	cmp	r2, r3
 801169a:	d241      	bcs.n	8011720 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	699b      	ldr	r3, [r3, #24]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	db06      	blt.n	80116b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116a4:	4b25      	ldr	r3, [pc, #148]	@ (801173c <xTaskPriorityInherit+0xc4>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	6959      	ldr	r1, [r3, #20]
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116ba:	4613      	mov	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	4413      	add	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4a1f      	ldr	r2, [pc, #124]	@ (8011740 <xTaskPriorityInherit+0xc8>)
 80116c4:	4413      	add	r3, r2
 80116c6:	4299      	cmp	r1, r3
 80116c8:	d122      	bne.n	8011710 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	3304      	adds	r3, #4
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fe fa0b 	bl	800faea <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80116d4:	4b19      	ldr	r3, [pc, #100]	@ (801173c <xTaskPriorityInherit+0xc4>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116e2:	4b18      	ldr	r3, [pc, #96]	@ (8011744 <xTaskPriorityInherit+0xcc>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d903      	bls.n	80116f2 <xTaskPriorityInherit+0x7a>
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ee:	4a15      	ldr	r2, [pc, #84]	@ (8011744 <xTaskPriorityInherit+0xcc>)
 80116f0:	6013      	str	r3, [r2, #0]
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116f6:	4613      	mov	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4a10      	ldr	r2, [pc, #64]	@ (8011740 <xTaskPriorityInherit+0xc8>)
 8011700:	441a      	add	r2, r3
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	3304      	adds	r3, #4
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f7fe f991 	bl	800fa30 <vListInsertEnd>
 801170e:	e004      	b.n	801171a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011710:	4b0a      	ldr	r3, [pc, #40]	@ (801173c <xTaskPriorityInherit+0xc4>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801171a:	2301      	movs	r3, #1
 801171c:	60fb      	str	r3, [r7, #12]
 801171e:	e008      	b.n	8011732 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011724:	4b05      	ldr	r3, [pc, #20]	@ (801173c <xTaskPriorityInherit+0xc4>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172a:	429a      	cmp	r2, r3
 801172c:	d201      	bcs.n	8011732 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801172e:	2301      	movs	r3, #1
 8011730:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011732:	68fb      	ldr	r3, [r7, #12]
	}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	200012d8 	.word	0x200012d8
 8011740:	200012dc 	.word	0x200012dc
 8011744:	200017b4 	.word	0x200017b4

08011748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011754:	2300      	movs	r3, #0
 8011756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d058      	beq.n	8011810 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801175e:	4b2f      	ldr	r3, [pc, #188]	@ (801181c <xTaskPriorityDisinherit+0xd4>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	693a      	ldr	r2, [r7, #16]
 8011764:	429a      	cmp	r2, r3
 8011766:	d00b      	beq.n	8011780 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	60fb      	str	r3, [r7, #12]
}
 801177a:	bf00      	nop
 801177c:	bf00      	nop
 801177e:	e7fd      	b.n	801177c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10b      	bne.n	80117a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801178c:	f383 8811 	msr	BASEPRI, r3
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	f3bf 8f4f 	dsb	sy
 8011798:	60bb      	str	r3, [r7, #8]
}
 801179a:	bf00      	nop
 801179c:	bf00      	nop
 801179e:	e7fd      	b.n	801179c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117a4:	1e5a      	subs	r2, r3, #1
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d02c      	beq.n	8011810 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d128      	bne.n	8011810 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	3304      	adds	r3, #4
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe f991 	bl	800faea <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011820 <xTaskPriorityDisinherit+0xd8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d903      	bls.n	80117f0 <xTaskPriorityDisinherit+0xa8>
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ec:	4a0c      	ldr	r2, [pc, #48]	@ (8011820 <xTaskPriorityDisinherit+0xd8>)
 80117ee:	6013      	str	r3, [r2, #0]
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117f4:	4613      	mov	r3, r2
 80117f6:	009b      	lsls	r3, r3, #2
 80117f8:	4413      	add	r3, r2
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	4a09      	ldr	r2, [pc, #36]	@ (8011824 <xTaskPriorityDisinherit+0xdc>)
 80117fe:	441a      	add	r2, r3
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	3304      	adds	r3, #4
 8011804:	4619      	mov	r1, r3
 8011806:	4610      	mov	r0, r2
 8011808:	f7fe f912 	bl	800fa30 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801180c:	2301      	movs	r3, #1
 801180e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011810:	697b      	ldr	r3, [r7, #20]
	}
 8011812:	4618      	mov	r0, r3
 8011814:	3718      	adds	r7, #24
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	200012d8 	.word	0x200012d8
 8011820:	200017b4 	.word	0x200017b4
 8011824:	200012dc 	.word	0x200012dc

08011828 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011836:	2301      	movs	r3, #1
 8011838:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d06c      	beq.n	801191a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10b      	bne.n	8011860 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801184c:	f383 8811 	msr	BASEPRI, r3
 8011850:	f3bf 8f6f 	isb	sy
 8011854:	f3bf 8f4f 	dsb	sy
 8011858:	60fb      	str	r3, [r7, #12]
}
 801185a:	bf00      	nop
 801185c:	bf00      	nop
 801185e:	e7fd      	b.n	801185c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011864:	683a      	ldr	r2, [r7, #0]
 8011866:	429a      	cmp	r2, r3
 8011868:	d902      	bls.n	8011870 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	61fb      	str	r3, [r7, #28]
 801186e:	e002      	b.n	8011876 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011874:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801187a:	69fa      	ldr	r2, [r7, #28]
 801187c:	429a      	cmp	r2, r3
 801187e:	d04c      	beq.n	801191a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011884:	697a      	ldr	r2, [r7, #20]
 8011886:	429a      	cmp	r2, r3
 8011888:	d147      	bne.n	801191a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801188a:	4b26      	ldr	r3, [pc, #152]	@ (8011924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	69ba      	ldr	r2, [r7, #24]
 8011890:	429a      	cmp	r2, r3
 8011892:	d10b      	bne.n	80118ac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011898:	f383 8811 	msr	BASEPRI, r3
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	60bb      	str	r3, [r7, #8]
}
 80118a6:	bf00      	nop
 80118a8:	bf00      	nop
 80118aa:	e7fd      	b.n	80118a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	69fa      	ldr	r2, [r7, #28]
 80118b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	db04      	blt.n	80118ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118c0:	69fb      	ldr	r3, [r7, #28]
 80118c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	6959      	ldr	r1, [r3, #20]
 80118ce:	693a      	ldr	r2, [r7, #16]
 80118d0:	4613      	mov	r3, r2
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	4413      	add	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4a13      	ldr	r2, [pc, #76]	@ (8011928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80118da:	4413      	add	r3, r2
 80118dc:	4299      	cmp	r1, r3
 80118de:	d11c      	bne.n	801191a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	3304      	adds	r3, #4
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe f900 	bl	800faea <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118ee:	4b0f      	ldr	r3, [pc, #60]	@ (801192c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d903      	bls.n	80118fe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fa:	4a0c      	ldr	r2, [pc, #48]	@ (801192c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80118fc:	6013      	str	r3, [r2, #0]
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011902:	4613      	mov	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4a07      	ldr	r2, [pc, #28]	@ (8011928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801190c:	441a      	add	r2, r3
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	3304      	adds	r3, #4
 8011912:	4619      	mov	r1, r3
 8011914:	4610      	mov	r0, r2
 8011916:	f7fe f88b 	bl	800fa30 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801191a:	bf00      	nop
 801191c:	3720      	adds	r7, #32
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	200012d8 	.word	0x200012d8
 8011928:	200012dc 	.word	0x200012dc
 801192c:	200017b4 	.word	0x200017b4

08011930 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011930:	b480      	push	{r7}
 8011932:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011934:	4b07      	ldr	r3, [pc, #28]	@ (8011954 <pvTaskIncrementMutexHeldCount+0x24>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d004      	beq.n	8011946 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801193c:	4b05      	ldr	r3, [pc, #20]	@ (8011954 <pvTaskIncrementMutexHeldCount+0x24>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011942:	3201      	adds	r2, #1
 8011944:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011946:	4b03      	ldr	r3, [pc, #12]	@ (8011954 <pvTaskIncrementMutexHeldCount+0x24>)
 8011948:	681b      	ldr	r3, [r3, #0]
	}
 801194a:	4618      	mov	r0, r3
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	200012d8 	.word	0x200012d8

08011958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011962:	4b21      	ldr	r3, [pc, #132]	@ (80119e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011968:	4b20      	ldr	r3, [pc, #128]	@ (80119ec <prvAddCurrentTaskToDelayedList+0x94>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	3304      	adds	r3, #4
 801196e:	4618      	mov	r0, r3
 8011970:	f7fe f8bb 	bl	800faea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801197a:	d10a      	bne.n	8011992 <prvAddCurrentTaskToDelayedList+0x3a>
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d007      	beq.n	8011992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011982:	4b1a      	ldr	r3, [pc, #104]	@ (80119ec <prvAddCurrentTaskToDelayedList+0x94>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	3304      	adds	r3, #4
 8011988:	4619      	mov	r1, r3
 801198a:	4819      	ldr	r0, [pc, #100]	@ (80119f0 <prvAddCurrentTaskToDelayedList+0x98>)
 801198c:	f7fe f850 	bl	800fa30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011990:	e026      	b.n	80119e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4413      	add	r3, r2
 8011998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801199a:	4b14      	ldr	r3, [pc, #80]	@ (80119ec <prvAddCurrentTaskToDelayedList+0x94>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	68ba      	ldr	r2, [r7, #8]
 80119a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d209      	bcs.n	80119be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119aa:	4b12      	ldr	r3, [pc, #72]	@ (80119f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	4b0f      	ldr	r3, [pc, #60]	@ (80119ec <prvAddCurrentTaskToDelayedList+0x94>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	3304      	adds	r3, #4
 80119b4:	4619      	mov	r1, r3
 80119b6:	4610      	mov	r0, r2
 80119b8:	f7fe f85e 	bl	800fa78 <vListInsert>
}
 80119bc:	e010      	b.n	80119e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80119be:	4b0e      	ldr	r3, [pc, #56]	@ (80119f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	4b0a      	ldr	r3, [pc, #40]	@ (80119ec <prvAddCurrentTaskToDelayedList+0x94>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	3304      	adds	r3, #4
 80119c8:	4619      	mov	r1, r3
 80119ca:	4610      	mov	r0, r2
 80119cc:	f7fe f854 	bl	800fa78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80119d0:	4b0a      	ldr	r3, [pc, #40]	@ (80119fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d202      	bcs.n	80119e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80119da:	4a08      	ldr	r2, [pc, #32]	@ (80119fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	6013      	str	r3, [r2, #0]
}
 80119e0:	bf00      	nop
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	200017b0 	.word	0x200017b0
 80119ec:	200012d8 	.word	0x200012d8
 80119f0:	20001798 	.word	0x20001798
 80119f4:	20001768 	.word	0x20001768
 80119f8:	20001764 	.word	0x20001764
 80119fc:	200017cc 	.word	0x200017cc

08011a00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08a      	sub	sp, #40	@ 0x28
 8011a04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a06:	2300      	movs	r3, #0
 8011a08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011a0a:	f000 fbb1 	bl	8012170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8011a84 <xTimerCreateTimerTask+0x84>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d021      	beq.n	8011a5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011a16:	2300      	movs	r3, #0
 8011a18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011a1e:	1d3a      	adds	r2, r7, #4
 8011a20:	f107 0108 	add.w	r1, r7, #8
 8011a24:	f107 030c 	add.w	r3, r7, #12
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fd ff67 	bl	800f8fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011a2e:	6879      	ldr	r1, [r7, #4]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	9202      	str	r2, [sp, #8]
 8011a36:	9301      	str	r3, [sp, #4]
 8011a38:	2302      	movs	r3, #2
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	460a      	mov	r2, r1
 8011a40:	4911      	ldr	r1, [pc, #68]	@ (8011a88 <xTimerCreateTimerTask+0x88>)
 8011a42:	4812      	ldr	r0, [pc, #72]	@ (8011a8c <xTimerCreateTimerTask+0x8c>)
 8011a44:	f7fe ff92 	bl	801096c <xTaskCreateStatic>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	4a11      	ldr	r2, [pc, #68]	@ (8011a90 <xTimerCreateTimerTask+0x90>)
 8011a4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011a4e:	4b10      	ldr	r3, [pc, #64]	@ (8011a90 <xTimerCreateTimerTask+0x90>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011a56:	2301      	movs	r3, #1
 8011a58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d10b      	bne.n	8011a78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	613b      	str	r3, [r7, #16]
}
 8011a72:	bf00      	nop
 8011a74:	bf00      	nop
 8011a76:	e7fd      	b.n	8011a74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011a78:	697b      	ldr	r3, [r7, #20]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	20001808 	.word	0x20001808
 8011a88:	08014324 	.word	0x08014324
 8011a8c:	08011d09 	.word	0x08011d09
 8011a90:	2000180c 	.word	0x2000180c

08011a94 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b088      	sub	sp, #32
 8011a98:	af02      	add	r7, sp, #8
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011aa2:	202c      	movs	r0, #44	@ 0x2c
 8011aa4:	f000 fe1a 	bl	80126dc <pvPortMalloc>
 8011aa8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00d      	beq.n	8011acc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	6a3b      	ldr	r3, [r7, #32]
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	68b9      	ldr	r1, [r7, #8]
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f000 f845 	bl	8011b56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011acc:	697b      	ldr	r3, [r7, #20]
	}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3718      	adds	r7, #24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b08a      	sub	sp, #40	@ 0x28
 8011ada:	af02      	add	r7, sp, #8
 8011adc:	60f8      	str	r0, [r7, #12]
 8011ade:	60b9      	str	r1, [r7, #8]
 8011ae0:	607a      	str	r2, [r7, #4]
 8011ae2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011ae4:	232c      	movs	r3, #44	@ 0x2c
 8011ae6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	2b2c      	cmp	r3, #44	@ 0x2c
 8011aec:	d00b      	beq.n	8011b06 <xTimerCreateStatic+0x30>
	__asm volatile
 8011aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af2:	f383 8811 	msr	BASEPRI, r3
 8011af6:	f3bf 8f6f 	isb	sy
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	61bb      	str	r3, [r7, #24]
}
 8011b00:	bf00      	nop
 8011b02:	bf00      	nop
 8011b04:	e7fd      	b.n	8011b02 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011b06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d10b      	bne.n	8011b26 <xTimerCreateStatic+0x50>
	__asm volatile
 8011b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	617b      	str	r3, [r7, #20]
}
 8011b20:	bf00      	nop
 8011b22:	bf00      	nop
 8011b24:	e7fd      	b.n	8011b22 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b28:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00d      	beq.n	8011b4c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	2202      	movs	r2, #2
 8011b34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	68b9      	ldr	r1, [r7, #8]
 8011b46:	68f8      	ldr	r0, [r7, #12]
 8011b48:	f000 f805 	bl	8011b56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011b4c:	69fb      	ldr	r3, [r7, #28]
	}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3720      	adds	r7, #32
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}

08011b56 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b086      	sub	sp, #24
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	60f8      	str	r0, [r7, #12]
 8011b5e:	60b9      	str	r1, [r7, #8]
 8011b60:	607a      	str	r2, [r7, #4]
 8011b62:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d10b      	bne.n	8011b82 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8011b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b6e:	f383 8811 	msr	BASEPRI, r3
 8011b72:	f3bf 8f6f 	isb	sy
 8011b76:	f3bf 8f4f 	dsb	sy
 8011b7a:	617b      	str	r3, [r7, #20]
}
 8011b7c:	bf00      	nop
 8011b7e:	bf00      	nop
 8011b80:	e7fd      	b.n	8011b7e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01e      	beq.n	8011bc6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011b88:	f000 faf2 	bl	8012170 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	6a3a      	ldr	r2, [r7, #32]
 8011ba2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba6:	3304      	adds	r3, #4
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fd ff34 	bl	800fa16 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d008      	beq.n	8011bc6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bba:	f043 0304 	orr.w	r3, r3, #4
 8011bbe:	b2da      	uxtb	r2, r3
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011bc6:	bf00      	nop
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
	...

08011bd0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b08a      	sub	sp, #40	@ 0x28
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10b      	bne.n	8011c00 <xTimerGenericCommand+0x30>
	__asm volatile
 8011be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bec:	f383 8811 	msr	BASEPRI, r3
 8011bf0:	f3bf 8f6f 	isb	sy
 8011bf4:	f3bf 8f4f 	dsb	sy
 8011bf8:	623b      	str	r3, [r7, #32]
}
 8011bfa:	bf00      	nop
 8011bfc:	bf00      	nop
 8011bfe:	e7fd      	b.n	8011bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011c00:	4b19      	ldr	r3, [pc, #100]	@ (8011c68 <xTimerGenericCommand+0x98>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d02a      	beq.n	8011c5e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b05      	cmp	r3, #5
 8011c18:	dc18      	bgt.n	8011c4c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011c1a:	f7ff fd0f 	bl	801163c <xTaskGetSchedulerState>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d109      	bne.n	8011c38 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011c24:	4b10      	ldr	r3, [pc, #64]	@ (8011c68 <xTimerGenericCommand+0x98>)
 8011c26:	6818      	ldr	r0, [r3, #0]
 8011c28:	f107 0110 	add.w	r1, r7, #16
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c30:	f7fe f984 	bl	800ff3c <xQueueGenericSend>
 8011c34:	6278      	str	r0, [r7, #36]	@ 0x24
 8011c36:	e012      	b.n	8011c5e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011c38:	4b0b      	ldr	r3, [pc, #44]	@ (8011c68 <xTimerGenericCommand+0x98>)
 8011c3a:	6818      	ldr	r0, [r3, #0]
 8011c3c:	f107 0110 	add.w	r1, r7, #16
 8011c40:	2300      	movs	r3, #0
 8011c42:	2200      	movs	r2, #0
 8011c44:	f7fe f97a 	bl	800ff3c <xQueueGenericSend>
 8011c48:	6278      	str	r0, [r7, #36]	@ 0x24
 8011c4a:	e008      	b.n	8011c5e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011c4c:	4b06      	ldr	r3, [pc, #24]	@ (8011c68 <xTimerGenericCommand+0x98>)
 8011c4e:	6818      	ldr	r0, [r3, #0]
 8011c50:	f107 0110 	add.w	r1, r7, #16
 8011c54:	2300      	movs	r3, #0
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	f7fe fa72 	bl	8010140 <xQueueGenericSendFromISR>
 8011c5c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3728      	adds	r7, #40	@ 0x28
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	20001808 	.word	0x20001808

08011c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af02      	add	r7, sp, #8
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c76:	4b23      	ldr	r3, [pc, #140]	@ (8011d04 <prvProcessExpiredTimer+0x98>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	3304      	adds	r3, #4
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fd ff30 	bl	800faea <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c90:	f003 0304 	and.w	r3, r3, #4
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d023      	beq.n	8011ce0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	699a      	ldr	r2, [r3, #24]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	18d1      	adds	r1, r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	6978      	ldr	r0, [r7, #20]
 8011ca6:	f000 f8d5 	bl	8011e54 <prvInsertTimerInActiveList>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d020      	beq.n	8011cf2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	2100      	movs	r1, #0
 8011cba:	6978      	ldr	r0, [r7, #20]
 8011cbc:	f7ff ff88 	bl	8011bd0 <xTimerGenericCommand>
 8011cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d114      	bne.n	8011cf2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ccc:	f383 8811 	msr	BASEPRI, r3
 8011cd0:	f3bf 8f6f 	isb	sy
 8011cd4:	f3bf 8f4f 	dsb	sy
 8011cd8:	60fb      	str	r3, [r7, #12]
}
 8011cda:	bf00      	nop
 8011cdc:	bf00      	nop
 8011cde:	e7fd      	b.n	8011cdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ce6:	f023 0301 	bic.w	r3, r3, #1
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	6a1b      	ldr	r3, [r3, #32]
 8011cf6:	6978      	ldr	r0, [r7, #20]
 8011cf8:	4798      	blx	r3
}
 8011cfa:	bf00      	nop
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20001800 	.word	0x20001800

08011d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011d10:	f107 0308 	add.w	r3, r7, #8
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 f859 	bl	8011dcc <prvGetNextExpireTime>
 8011d1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f000 f805 	bl	8011d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011d26:	f000 f8d7 	bl	8011ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011d2a:	bf00      	nop
 8011d2c:	e7f0      	b.n	8011d10 <prvTimerTask+0x8>
	...

08011d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b084      	sub	sp, #16
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011d3a:	f7ff f87b 	bl	8010e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011d3e:	f107 0308 	add.w	r3, r7, #8
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 f866 	bl	8011e14 <prvSampleTimeNow>
 8011d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d130      	bne.n	8011db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d10a      	bne.n	8011d6c <prvProcessTimerOrBlockTask+0x3c>
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d806      	bhi.n	8011d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011d5e:	f7ff f877 	bl	8010e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011d62:	68f9      	ldr	r1, [r7, #12]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f7ff ff81 	bl	8011c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011d6a:	e024      	b.n	8011db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d008      	beq.n	8011d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011d72:	4b13      	ldr	r3, [pc, #76]	@ (8011dc0 <prvProcessTimerOrBlockTask+0x90>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d101      	bne.n	8011d80 <prvProcessTimerOrBlockTask+0x50>
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	e000      	b.n	8011d82 <prvProcessTimerOrBlockTask+0x52>
 8011d80:	2300      	movs	r3, #0
 8011d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011d84:	4b0f      	ldr	r3, [pc, #60]	@ (8011dc4 <prvProcessTimerOrBlockTask+0x94>)
 8011d86:	6818      	ldr	r0, [r3, #0]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	683a      	ldr	r2, [r7, #0]
 8011d90:	4619      	mov	r1, r3
 8011d92:	f7fe fdb7 	bl	8010904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011d96:	f7ff f85b 	bl	8010e50 <xTaskResumeAll>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10a      	bne.n	8011db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011da0:	4b09      	ldr	r3, [pc, #36]	@ (8011dc8 <prvProcessTimerOrBlockTask+0x98>)
 8011da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da6:	601a      	str	r2, [r3, #0]
 8011da8:	f3bf 8f4f 	dsb	sy
 8011dac:	f3bf 8f6f 	isb	sy
}
 8011db0:	e001      	b.n	8011db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011db2:	f7ff f84d 	bl	8010e50 <xTaskResumeAll>
}
 8011db6:	bf00      	nop
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	20001804 	.word	0x20001804
 8011dc4:	20001808 	.word	0x20001808
 8011dc8:	e000ed04 	.word	0xe000ed04

08011dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8011e10 <prvGetNextExpireTime+0x44>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <prvGetNextExpireTime+0x16>
 8011dde:	2201      	movs	r2, #1
 8011de0:	e000      	b.n	8011de4 <prvGetNextExpireTime+0x18>
 8011de2:	2200      	movs	r2, #0
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d105      	bne.n	8011dfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011df0:	4b07      	ldr	r3, [pc, #28]	@ (8011e10 <prvGetNextExpireTime+0x44>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]
 8011dfa:	e001      	b.n	8011e00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011e00:	68fb      	ldr	r3, [r7, #12]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3714      	adds	r7, #20
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop
 8011e10:	20001800 	.word	0x20001800

08011e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011e1c:	f7ff f8b6 	bl	8010f8c <xTaskGetTickCount>
 8011e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011e22:	4b0b      	ldr	r3, [pc, #44]	@ (8011e50 <prvSampleTimeNow+0x3c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	68fa      	ldr	r2, [r7, #12]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d205      	bcs.n	8011e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011e2c:	f000 f93a 	bl	80120a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2201      	movs	r2, #1
 8011e34:	601a      	str	r2, [r3, #0]
 8011e36:	e002      	b.n	8011e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011e3e:	4a04      	ldr	r2, [pc, #16]	@ (8011e50 <prvSampleTimeNow+0x3c>)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011e44:	68fb      	ldr	r3, [r7, #12]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	20001810 	.word	0x20001810

08011e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b086      	sub	sp, #24
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011e62:	2300      	movs	r3, #0
 8011e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d812      	bhi.n	8011ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	1ad2      	subs	r2, r2, r3
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	699b      	ldr	r3, [r3, #24]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d302      	bcc.n	8011e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	e01b      	b.n	8011ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e8e:	4b10      	ldr	r3, [pc, #64]	@ (8011ed0 <prvInsertTimerInActiveList+0x7c>)
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	3304      	adds	r3, #4
 8011e96:	4619      	mov	r1, r3
 8011e98:	4610      	mov	r0, r2
 8011e9a:	f7fd fded 	bl	800fa78 <vListInsert>
 8011e9e:	e012      	b.n	8011ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d206      	bcs.n	8011eb6 <prvInsertTimerInActiveList+0x62>
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d302      	bcc.n	8011eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	617b      	str	r3, [r7, #20]
 8011eb4:	e007      	b.n	8011ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011eb6:	4b07      	ldr	r3, [pc, #28]	@ (8011ed4 <prvInsertTimerInActiveList+0x80>)
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	f7fd fdd9 	bl	800fa78 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011ec6:	697b      	ldr	r3, [r7, #20]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	20001804 	.word	0x20001804
 8011ed4:	20001800 	.word	0x20001800

08011ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b08e      	sub	sp, #56	@ 0x38
 8011edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011ede:	e0ce      	b.n	801207e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	da19      	bge.n	8011f1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011ee6:	1d3b      	adds	r3, r7, #4
 8011ee8:	3304      	adds	r3, #4
 8011eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d10b      	bne.n	8011f0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	61fb      	str	r3, [r7, #28]
}
 8011f04:	bf00      	nop
 8011f06:	bf00      	nop
 8011f08:	e7fd      	b.n	8011f06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f10:	6850      	ldr	r0, [r2, #4]
 8011f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f14:	6892      	ldr	r2, [r2, #8]
 8011f16:	4611      	mov	r1, r2
 8011f18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f2c0 80ae 	blt.w	801207e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f28:	695b      	ldr	r3, [r3, #20]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d004      	beq.n	8011f38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f30:	3304      	adds	r3, #4
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fd fdd9 	bl	800faea <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011f38:	463b      	mov	r3, r7
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff ff6a 	bl	8011e14 <prvSampleTimeNow>
 8011f40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2b09      	cmp	r3, #9
 8011f46:	f200 8097 	bhi.w	8012078 <prvProcessReceivedCommands+0x1a0>
 8011f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f50 <prvProcessReceivedCommands+0x78>)
 8011f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f50:	08011f79 	.word	0x08011f79
 8011f54:	08011f79 	.word	0x08011f79
 8011f58:	08011f79 	.word	0x08011f79
 8011f5c:	08011fef 	.word	0x08011fef
 8011f60:	08012003 	.word	0x08012003
 8011f64:	0801204f 	.word	0x0801204f
 8011f68:	08011f79 	.word	0x08011f79
 8011f6c:	08011f79 	.word	0x08011f79
 8011f70:	08011fef 	.word	0x08011fef
 8011f74:	08012003 	.word	0x08012003
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f7e:	f043 0301 	orr.w	r3, r3, #1
 8011f82:	b2da      	uxtb	r2, r3
 8011f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8e:	699b      	ldr	r3, [r3, #24]
 8011f90:	18d1      	adds	r1, r2, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f98:	f7ff ff5c 	bl	8011e54 <prvInsertTimerInActiveList>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d06c      	beq.n	801207c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fa4:	6a1b      	ldr	r3, [r3, #32]
 8011fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d061      	beq.n	801207c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fbc:	699b      	ldr	r3, [r3, #24]
 8011fbe:	441a      	add	r2, r3
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fca:	f7ff fe01 	bl	8011bd0 <xTimerGenericCommand>
 8011fce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d152      	bne.n	801207c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fda:	f383 8811 	msr	BASEPRI, r3
 8011fde:	f3bf 8f6f 	isb	sy
 8011fe2:	f3bf 8f4f 	dsb	sy
 8011fe6:	61bb      	str	r3, [r7, #24]
}
 8011fe8:	bf00      	nop
 8011fea:	bf00      	nop
 8011fec:	e7fd      	b.n	8011fea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ff4:	f023 0301 	bic.w	r3, r3, #1
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012000:	e03d      	b.n	801207e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012008:	f043 0301 	orr.w	r3, r3, #1
 801200c:	b2da      	uxtb	r2, r3
 801200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012010:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012018:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801201a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801201c:	699b      	ldr	r3, [r3, #24]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d10b      	bne.n	801203a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012026:	f383 8811 	msr	BASEPRI, r3
 801202a:	f3bf 8f6f 	isb	sy
 801202e:	f3bf 8f4f 	dsb	sy
 8012032:	617b      	str	r3, [r7, #20]
}
 8012034:	bf00      	nop
 8012036:	bf00      	nop
 8012038:	e7fd      	b.n	8012036 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801203a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801203c:	699a      	ldr	r2, [r3, #24]
 801203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012040:	18d1      	adds	r1, r2, r3
 8012042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012048:	f7ff ff04 	bl	8011e54 <prvInsertTimerInActiveList>
					break;
 801204c:	e017      	b.n	801207e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012050:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012054:	f003 0302 	and.w	r3, r3, #2
 8012058:	2b00      	cmp	r3, #0
 801205a:	d103      	bne.n	8012064 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801205c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801205e:	f000 fc0b 	bl	8012878 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012062:	e00c      	b.n	801207e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012066:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801206a:	f023 0301 	bic.w	r3, r3, #1
 801206e:	b2da      	uxtb	r2, r3
 8012070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012076:	e002      	b.n	801207e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <prvProcessReceivedCommands+0x1a6>
					break;
 801207c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801207e:	4b08      	ldr	r3, [pc, #32]	@ (80120a0 <prvProcessReceivedCommands+0x1c8>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	1d39      	adds	r1, r7, #4
 8012084:	2200      	movs	r2, #0
 8012086:	4618      	mov	r0, r3
 8012088:	f7fe f8f8 	bl	801027c <xQueueReceive>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	f47f af26 	bne.w	8011ee0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012094:	bf00      	nop
 8012096:	bf00      	nop
 8012098:	3730      	adds	r7, #48	@ 0x30
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	20001808 	.word	0x20001808

080120a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b088      	sub	sp, #32
 80120a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120aa:	e049      	b.n	8012140 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120ac:	4b2e      	ldr	r3, [pc, #184]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120b6:	4b2c      	ldr	r3, [pc, #176]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	3304      	adds	r3, #4
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fd fd10 	bl	800faea <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	68f8      	ldr	r0, [r7, #12]
 80120d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120d8:	f003 0304 	and.w	r3, r3, #4
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d02f      	beq.n	8012140 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	693a      	ldr	r2, [r7, #16]
 80120e6:	4413      	add	r3, r2
 80120e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d90e      	bls.n	8012110 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	3304      	adds	r3, #4
 8012106:	4619      	mov	r1, r3
 8012108:	4610      	mov	r0, r2
 801210a:	f7fd fcb5 	bl	800fa78 <vListInsert>
 801210e:	e017      	b.n	8012140 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012110:	2300      	movs	r3, #0
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	2300      	movs	r3, #0
 8012116:	693a      	ldr	r2, [r7, #16]
 8012118:	2100      	movs	r1, #0
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f7ff fd58 	bl	8011bd0 <xTimerGenericCommand>
 8012120:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d10b      	bne.n	8012140 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801212c:	f383 8811 	msr	BASEPRI, r3
 8012130:	f3bf 8f6f 	isb	sy
 8012134:	f3bf 8f4f 	dsb	sy
 8012138:	603b      	str	r3, [r7, #0]
}
 801213a:	bf00      	nop
 801213c:	bf00      	nop
 801213e:	e7fd      	b.n	801213c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012140:	4b09      	ldr	r3, [pc, #36]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1b0      	bne.n	80120ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801214a:	4b07      	ldr	r3, [pc, #28]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012150:	4b06      	ldr	r3, [pc, #24]	@ (801216c <prvSwitchTimerLists+0xc8>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a04      	ldr	r2, [pc, #16]	@ (8012168 <prvSwitchTimerLists+0xc4>)
 8012156:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012158:	4a04      	ldr	r2, [pc, #16]	@ (801216c <prvSwitchTimerLists+0xc8>)
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	6013      	str	r3, [r2, #0]
}
 801215e:	bf00      	nop
 8012160:	3718      	adds	r7, #24
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	20001800 	.word	0x20001800
 801216c:	20001804 	.word	0x20001804

08012170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012176:	f000 f98f 	bl	8012498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801217a:	4b15      	ldr	r3, [pc, #84]	@ (80121d0 <prvCheckForValidListAndQueue+0x60>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d120      	bne.n	80121c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012182:	4814      	ldr	r0, [pc, #80]	@ (80121d4 <prvCheckForValidListAndQueue+0x64>)
 8012184:	f7fd fc27 	bl	800f9d6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012188:	4813      	ldr	r0, [pc, #76]	@ (80121d8 <prvCheckForValidListAndQueue+0x68>)
 801218a:	f7fd fc24 	bl	800f9d6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801218e:	4b13      	ldr	r3, [pc, #76]	@ (80121dc <prvCheckForValidListAndQueue+0x6c>)
 8012190:	4a10      	ldr	r2, [pc, #64]	@ (80121d4 <prvCheckForValidListAndQueue+0x64>)
 8012192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012194:	4b12      	ldr	r3, [pc, #72]	@ (80121e0 <prvCheckForValidListAndQueue+0x70>)
 8012196:	4a10      	ldr	r2, [pc, #64]	@ (80121d8 <prvCheckForValidListAndQueue+0x68>)
 8012198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801219a:	2300      	movs	r3, #0
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	4b11      	ldr	r3, [pc, #68]	@ (80121e4 <prvCheckForValidListAndQueue+0x74>)
 80121a0:	4a11      	ldr	r2, [pc, #68]	@ (80121e8 <prvCheckForValidListAndQueue+0x78>)
 80121a2:	2110      	movs	r1, #16
 80121a4:	200a      	movs	r0, #10
 80121a6:	f7fd fd35 	bl	800fc14 <xQueueGenericCreateStatic>
 80121aa:	4603      	mov	r3, r0
 80121ac:	4a08      	ldr	r2, [pc, #32]	@ (80121d0 <prvCheckForValidListAndQueue+0x60>)
 80121ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80121b0:	4b07      	ldr	r3, [pc, #28]	@ (80121d0 <prvCheckForValidListAndQueue+0x60>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d005      	beq.n	80121c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80121b8:	4b05      	ldr	r3, [pc, #20]	@ (80121d0 <prvCheckForValidListAndQueue+0x60>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	490b      	ldr	r1, [pc, #44]	@ (80121ec <prvCheckForValidListAndQueue+0x7c>)
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fe fb76 	bl	80108b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80121c4:	f000 f99a 	bl	80124fc <vPortExitCritical>
}
 80121c8:	bf00      	nop
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	20001808 	.word	0x20001808
 80121d4:	200017d8 	.word	0x200017d8
 80121d8:	200017ec 	.word	0x200017ec
 80121dc:	20001800 	.word	0x20001800
 80121e0:	20001804 	.word	0x20001804
 80121e4:	200018b4 	.word	0x200018b4
 80121e8:	20001814 	.word	0x20001814
 80121ec:	0801432c 	.word	0x0801432c

080121f0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10b      	bne.n	801221a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8012202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	60fb      	str	r3, [r7, #12]
}
 8012214:	bf00      	nop
 8012216:	bf00      	nop
 8012218:	e7fd      	b.n	8012216 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801221a:	f000 f93d 	bl	8012498 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	69db      	ldr	r3, [r3, #28]
 8012222:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012224:	f000 f96a 	bl	80124fc <vPortExitCritical>

	return pvReturn;
 8012228:	693b      	ldr	r3, [r7, #16]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
	...

08012234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	3b04      	subs	r3, #4
 8012244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801224c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3b04      	subs	r3, #4
 8012252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	f023 0201 	bic.w	r2, r3, #1
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	3b04      	subs	r3, #4
 8012262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012264:	4a0c      	ldr	r2, [pc, #48]	@ (8012298 <pxPortInitialiseStack+0x64>)
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	3b14      	subs	r3, #20
 801226e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3b04      	subs	r3, #4
 801227a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f06f 0202 	mvn.w	r2, #2
 8012282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	3b20      	subs	r3, #32
 8012288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801228a:	68fb      	ldr	r3, [r7, #12]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3714      	adds	r7, #20
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr
 8012298:	0801229d 	.word	0x0801229d

0801229c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80122a2:	2300      	movs	r3, #0
 80122a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80122a6:	4b13      	ldr	r3, [pc, #76]	@ (80122f4 <prvTaskExitError+0x58>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ae:	d00b      	beq.n	80122c8 <prvTaskExitError+0x2c>
	__asm volatile
 80122b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b4:	f383 8811 	msr	BASEPRI, r3
 80122b8:	f3bf 8f6f 	isb	sy
 80122bc:	f3bf 8f4f 	dsb	sy
 80122c0:	60fb      	str	r3, [r7, #12]
}
 80122c2:	bf00      	nop
 80122c4:	bf00      	nop
 80122c6:	e7fd      	b.n	80122c4 <prvTaskExitError+0x28>
	__asm volatile
 80122c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122cc:	f383 8811 	msr	BASEPRI, r3
 80122d0:	f3bf 8f6f 	isb	sy
 80122d4:	f3bf 8f4f 	dsb	sy
 80122d8:	60bb      	str	r3, [r7, #8]
}
 80122da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80122dc:	bf00      	nop
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d0fc      	beq.n	80122de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80122e4:	bf00      	nop
 80122e6:	bf00      	nop
 80122e8:	3714      	adds	r7, #20
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	2000011c 	.word	0x2000011c
	...

08012300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012300:	4b07      	ldr	r3, [pc, #28]	@ (8012320 <pxCurrentTCBConst2>)
 8012302:	6819      	ldr	r1, [r3, #0]
 8012304:	6808      	ldr	r0, [r1, #0]
 8012306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801230a:	f380 8809 	msr	PSP, r0
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f04f 0000 	mov.w	r0, #0
 8012316:	f380 8811 	msr	BASEPRI, r0
 801231a:	4770      	bx	lr
 801231c:	f3af 8000 	nop.w

08012320 <pxCurrentTCBConst2>:
 8012320:	200012d8 	.word	0x200012d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012324:	bf00      	nop
 8012326:	bf00      	nop

08012328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012328:	4808      	ldr	r0, [pc, #32]	@ (801234c <prvPortStartFirstTask+0x24>)
 801232a:	6800      	ldr	r0, [r0, #0]
 801232c:	6800      	ldr	r0, [r0, #0]
 801232e:	f380 8808 	msr	MSP, r0
 8012332:	f04f 0000 	mov.w	r0, #0
 8012336:	f380 8814 	msr	CONTROL, r0
 801233a:	b662      	cpsie	i
 801233c:	b661      	cpsie	f
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	df00      	svc	0
 8012348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801234a:	bf00      	nop
 801234c:	e000ed08 	.word	0xe000ed08

08012350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012356:	4b47      	ldr	r3, [pc, #284]	@ (8012474 <xPortStartScheduler+0x124>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a47      	ldr	r2, [pc, #284]	@ (8012478 <xPortStartScheduler+0x128>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d10b      	bne.n	8012378 <xPortStartScheduler+0x28>
	__asm volatile
 8012360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012364:	f383 8811 	msr	BASEPRI, r3
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	f3bf 8f4f 	dsb	sy
 8012370:	613b      	str	r3, [r7, #16]
}
 8012372:	bf00      	nop
 8012374:	bf00      	nop
 8012376:	e7fd      	b.n	8012374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012378:	4b3e      	ldr	r3, [pc, #248]	@ (8012474 <xPortStartScheduler+0x124>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a3f      	ldr	r2, [pc, #252]	@ (801247c <xPortStartScheduler+0x12c>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d10b      	bne.n	801239a <xPortStartScheduler+0x4a>
	__asm volatile
 8012382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	60fb      	str	r3, [r7, #12]
}
 8012394:	bf00      	nop
 8012396:	bf00      	nop
 8012398:	e7fd      	b.n	8012396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801239a:	4b39      	ldr	r3, [pc, #228]	@ (8012480 <xPortStartScheduler+0x130>)
 801239c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	22ff      	movs	r2, #255	@ 0xff
 80123aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123b4:	78fb      	ldrb	r3, [r7, #3]
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	4b31      	ldr	r3, [pc, #196]	@ (8012484 <xPortStartScheduler+0x134>)
 80123c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80123c2:	4b31      	ldr	r3, [pc, #196]	@ (8012488 <xPortStartScheduler+0x138>)
 80123c4:	2207      	movs	r2, #7
 80123c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123c8:	e009      	b.n	80123de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80123ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012488 <xPortStartScheduler+0x138>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	3b01      	subs	r3, #1
 80123d0:	4a2d      	ldr	r2, [pc, #180]	@ (8012488 <xPortStartScheduler+0x138>)
 80123d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80123d4:	78fb      	ldrb	r3, [r7, #3]
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	005b      	lsls	r3, r3, #1
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80123de:	78fb      	ldrb	r3, [r7, #3]
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123e6:	2b80      	cmp	r3, #128	@ 0x80
 80123e8:	d0ef      	beq.n	80123ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80123ea:	4b27      	ldr	r3, [pc, #156]	@ (8012488 <xPortStartScheduler+0x138>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f1c3 0307 	rsb	r3, r3, #7
 80123f2:	2b04      	cmp	r3, #4
 80123f4:	d00b      	beq.n	801240e <xPortStartScheduler+0xbe>
	__asm volatile
 80123f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123fa:	f383 8811 	msr	BASEPRI, r3
 80123fe:	f3bf 8f6f 	isb	sy
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	60bb      	str	r3, [r7, #8]
}
 8012408:	bf00      	nop
 801240a:	bf00      	nop
 801240c:	e7fd      	b.n	801240a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801240e:	4b1e      	ldr	r3, [pc, #120]	@ (8012488 <xPortStartScheduler+0x138>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	021b      	lsls	r3, r3, #8
 8012414:	4a1c      	ldr	r2, [pc, #112]	@ (8012488 <xPortStartScheduler+0x138>)
 8012416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012418:	4b1b      	ldr	r3, [pc, #108]	@ (8012488 <xPortStartScheduler+0x138>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012420:	4a19      	ldr	r2, [pc, #100]	@ (8012488 <xPortStartScheduler+0x138>)
 8012422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	b2da      	uxtb	r2, r3
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801242c:	4b17      	ldr	r3, [pc, #92]	@ (801248c <xPortStartScheduler+0x13c>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4a16      	ldr	r2, [pc, #88]	@ (801248c <xPortStartScheduler+0x13c>)
 8012432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012438:	4b14      	ldr	r3, [pc, #80]	@ (801248c <xPortStartScheduler+0x13c>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4a13      	ldr	r2, [pc, #76]	@ (801248c <xPortStartScheduler+0x13c>)
 801243e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012444:	f000 f8da 	bl	80125fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012448:	4b11      	ldr	r3, [pc, #68]	@ (8012490 <xPortStartScheduler+0x140>)
 801244a:	2200      	movs	r2, #0
 801244c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801244e:	f000 f8f9 	bl	8012644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012452:	4b10      	ldr	r3, [pc, #64]	@ (8012494 <xPortStartScheduler+0x144>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4a0f      	ldr	r2, [pc, #60]	@ (8012494 <xPortStartScheduler+0x144>)
 8012458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801245c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801245e:	f7ff ff63 	bl	8012328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012462:	f7fe fe5d 	bl	8011120 <vTaskSwitchContext>
	prvTaskExitError();
 8012466:	f7ff ff19 	bl	801229c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801246a:	2300      	movs	r3, #0
}
 801246c:	4618      	mov	r0, r3
 801246e:	3718      	adds	r7, #24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	e000ed00 	.word	0xe000ed00
 8012478:	410fc271 	.word	0x410fc271
 801247c:	410fc270 	.word	0x410fc270
 8012480:	e000e400 	.word	0xe000e400
 8012484:	20001904 	.word	0x20001904
 8012488:	20001908 	.word	0x20001908
 801248c:	e000ed20 	.word	0xe000ed20
 8012490:	2000011c 	.word	0x2000011c
 8012494:	e000ef34 	.word	0xe000ef34

08012498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
	__asm volatile
 801249e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124a2:	f383 8811 	msr	BASEPRI, r3
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	607b      	str	r3, [r7, #4]
}
 80124b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80124b2:	4b10      	ldr	r3, [pc, #64]	@ (80124f4 <vPortEnterCritical+0x5c>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	3301      	adds	r3, #1
 80124b8:	4a0e      	ldr	r2, [pc, #56]	@ (80124f4 <vPortEnterCritical+0x5c>)
 80124ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80124bc:	4b0d      	ldr	r3, [pc, #52]	@ (80124f4 <vPortEnterCritical+0x5c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d110      	bne.n	80124e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80124c4:	4b0c      	ldr	r3, [pc, #48]	@ (80124f8 <vPortEnterCritical+0x60>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00b      	beq.n	80124e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80124ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124d2:	f383 8811 	msr	BASEPRI, r3
 80124d6:	f3bf 8f6f 	isb	sy
 80124da:	f3bf 8f4f 	dsb	sy
 80124de:	603b      	str	r3, [r7, #0]
}
 80124e0:	bf00      	nop
 80124e2:	bf00      	nop
 80124e4:	e7fd      	b.n	80124e2 <vPortEnterCritical+0x4a>
	}
}
 80124e6:	bf00      	nop
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	2000011c 	.word	0x2000011c
 80124f8:	e000ed04 	.word	0xe000ed04

080124fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012502:	4b12      	ldr	r3, [pc, #72]	@ (801254c <vPortExitCritical+0x50>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d10b      	bne.n	8012522 <vPortExitCritical+0x26>
	__asm volatile
 801250a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801250e:	f383 8811 	msr	BASEPRI, r3
 8012512:	f3bf 8f6f 	isb	sy
 8012516:	f3bf 8f4f 	dsb	sy
 801251a:	607b      	str	r3, [r7, #4]
}
 801251c:	bf00      	nop
 801251e:	bf00      	nop
 8012520:	e7fd      	b.n	801251e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012522:	4b0a      	ldr	r3, [pc, #40]	@ (801254c <vPortExitCritical+0x50>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	3b01      	subs	r3, #1
 8012528:	4a08      	ldr	r2, [pc, #32]	@ (801254c <vPortExitCritical+0x50>)
 801252a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801252c:	4b07      	ldr	r3, [pc, #28]	@ (801254c <vPortExitCritical+0x50>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d105      	bne.n	8012540 <vPortExitCritical+0x44>
 8012534:	2300      	movs	r3, #0
 8012536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	f383 8811 	msr	BASEPRI, r3
}
 801253e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr
 801254c:	2000011c 	.word	0x2000011c

08012550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012550:	f3ef 8009 	mrs	r0, PSP
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	4b15      	ldr	r3, [pc, #84]	@ (80125b0 <pxCurrentTCBConst>)
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	f01e 0f10 	tst.w	lr, #16
 8012560:	bf08      	it	eq
 8012562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256a:	6010      	str	r0, [r2, #0]
 801256c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012574:	f380 8811 	msr	BASEPRI, r0
 8012578:	f3bf 8f4f 	dsb	sy
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f7fe fdce 	bl	8011120 <vTaskSwitchContext>
 8012584:	f04f 0000 	mov.w	r0, #0
 8012588:	f380 8811 	msr	BASEPRI, r0
 801258c:	bc09      	pop	{r0, r3}
 801258e:	6819      	ldr	r1, [r3, #0]
 8012590:	6808      	ldr	r0, [r1, #0]
 8012592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012596:	f01e 0f10 	tst.w	lr, #16
 801259a:	bf08      	it	eq
 801259c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80125a0:	f380 8809 	msr	PSP, r0
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop
 80125ac:	f3af 8000 	nop.w

080125b0 <pxCurrentTCBConst>:
 80125b0:	200012d8 	.word	0x200012d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80125b4:	bf00      	nop
 80125b6:	bf00      	nop

080125b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
	__asm volatile
 80125be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125c2:	f383 8811 	msr	BASEPRI, r3
 80125c6:	f3bf 8f6f 	isb	sy
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	607b      	str	r3, [r7, #4]
}
 80125d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80125d2:	f7fe fceb 	bl	8010fac <xTaskIncrementTick>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80125dc:	4b06      	ldr	r3, [pc, #24]	@ (80125f8 <xPortSysTickHandler+0x40>)
 80125de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125e2:	601a      	str	r2, [r3, #0]
 80125e4:	2300      	movs	r3, #0
 80125e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	f383 8811 	msr	BASEPRI, r3
}
 80125ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80125f0:	bf00      	nop
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	e000ed04 	.word	0xe000ed04

080125fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80125fc:	b480      	push	{r7}
 80125fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012600:	4b0b      	ldr	r3, [pc, #44]	@ (8012630 <vPortSetupTimerInterrupt+0x34>)
 8012602:	2200      	movs	r2, #0
 8012604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012606:	4b0b      	ldr	r3, [pc, #44]	@ (8012634 <vPortSetupTimerInterrupt+0x38>)
 8012608:	2200      	movs	r2, #0
 801260a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801260c:	4b0a      	ldr	r3, [pc, #40]	@ (8012638 <vPortSetupTimerInterrupt+0x3c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4a0a      	ldr	r2, [pc, #40]	@ (801263c <vPortSetupTimerInterrupt+0x40>)
 8012612:	fba2 2303 	umull	r2, r3, r2, r3
 8012616:	099b      	lsrs	r3, r3, #6
 8012618:	4a09      	ldr	r2, [pc, #36]	@ (8012640 <vPortSetupTimerInterrupt+0x44>)
 801261a:	3b01      	subs	r3, #1
 801261c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801261e:	4b04      	ldr	r3, [pc, #16]	@ (8012630 <vPortSetupTimerInterrupt+0x34>)
 8012620:	2207      	movs	r2, #7
 8012622:	601a      	str	r2, [r3, #0]
}
 8012624:	bf00      	nop
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	e000e010 	.word	0xe000e010
 8012634:	e000e018 	.word	0xe000e018
 8012638:	20000000 	.word	0x20000000
 801263c:	10624dd3 	.word	0x10624dd3
 8012640:	e000e014 	.word	0xe000e014

08012644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012654 <vPortEnableVFP+0x10>
 8012648:	6801      	ldr	r1, [r0, #0]
 801264a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801264e:	6001      	str	r1, [r0, #0]
 8012650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012652:	bf00      	nop
 8012654:	e000ed88 	.word	0xe000ed88

08012658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801265e:	f3ef 8305 	mrs	r3, IPSR
 8012662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2b0f      	cmp	r3, #15
 8012668:	d915      	bls.n	8012696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801266a:	4a18      	ldr	r2, [pc, #96]	@ (80126cc <vPortValidateInterruptPriority+0x74>)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	4413      	add	r3, r2
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012674:	4b16      	ldr	r3, [pc, #88]	@ (80126d0 <vPortValidateInterruptPriority+0x78>)
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	7afa      	ldrb	r2, [r7, #11]
 801267a:	429a      	cmp	r2, r3
 801267c:	d20b      	bcs.n	8012696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	607b      	str	r3, [r7, #4]
}
 8012690:	bf00      	nop
 8012692:	bf00      	nop
 8012694:	e7fd      	b.n	8012692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012696:	4b0f      	ldr	r3, [pc, #60]	@ (80126d4 <vPortValidateInterruptPriority+0x7c>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801269e:	4b0e      	ldr	r3, [pc, #56]	@ (80126d8 <vPortValidateInterruptPriority+0x80>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d90b      	bls.n	80126be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80126a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126aa:	f383 8811 	msr	BASEPRI, r3
 80126ae:	f3bf 8f6f 	isb	sy
 80126b2:	f3bf 8f4f 	dsb	sy
 80126b6:	603b      	str	r3, [r7, #0]
}
 80126b8:	bf00      	nop
 80126ba:	bf00      	nop
 80126bc:	e7fd      	b.n	80126ba <vPortValidateInterruptPriority+0x62>
	}
 80126be:	bf00      	nop
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop
 80126cc:	e000e3f0 	.word	0xe000e3f0
 80126d0:	20001904 	.word	0x20001904
 80126d4:	e000ed0c 	.word	0xe000ed0c
 80126d8:	20001908 	.word	0x20001908

080126dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b08a      	sub	sp, #40	@ 0x28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80126e4:	2300      	movs	r3, #0
 80126e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80126e8:	f7fe fba4 	bl	8010e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80126ec:	4b5c      	ldr	r3, [pc, #368]	@ (8012860 <pvPortMalloc+0x184>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80126f4:	f000 f924 	bl	8012940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80126f8:	4b5a      	ldr	r3, [pc, #360]	@ (8012864 <pvPortMalloc+0x188>)
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4013      	ands	r3, r2
 8012700:	2b00      	cmp	r3, #0
 8012702:	f040 8095 	bne.w	8012830 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d01e      	beq.n	801274a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801270c:	2208      	movs	r2, #8
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4413      	add	r3, r2
 8012712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f003 0307 	and.w	r3, r3, #7
 801271a:	2b00      	cmp	r3, #0
 801271c:	d015      	beq.n	801274a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f023 0307 	bic.w	r3, r3, #7
 8012724:	3308      	adds	r3, #8
 8012726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f003 0307 	and.w	r3, r3, #7
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00b      	beq.n	801274a <pvPortMalloc+0x6e>
	__asm volatile
 8012732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012736:	f383 8811 	msr	BASEPRI, r3
 801273a:	f3bf 8f6f 	isb	sy
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	617b      	str	r3, [r7, #20]
}
 8012744:	bf00      	nop
 8012746:	bf00      	nop
 8012748:	e7fd      	b.n	8012746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d06f      	beq.n	8012830 <pvPortMalloc+0x154>
 8012750:	4b45      	ldr	r3, [pc, #276]	@ (8012868 <pvPortMalloc+0x18c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	429a      	cmp	r2, r3
 8012758:	d86a      	bhi.n	8012830 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801275a:	4b44      	ldr	r3, [pc, #272]	@ (801286c <pvPortMalloc+0x190>)
 801275c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801275e:	4b43      	ldr	r3, [pc, #268]	@ (801286c <pvPortMalloc+0x190>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012764:	e004      	b.n	8012770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	429a      	cmp	r2, r3
 8012778:	d903      	bls.n	8012782 <pvPortMalloc+0xa6>
 801277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1f1      	bne.n	8012766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012782:	4b37      	ldr	r3, [pc, #220]	@ (8012860 <pvPortMalloc+0x184>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012788:	429a      	cmp	r2, r3
 801278a:	d051      	beq.n	8012830 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2208      	movs	r2, #8
 8012792:	4413      	add	r3, r2
 8012794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a0:	685a      	ldr	r2, [r3, #4]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	1ad2      	subs	r2, r2, r3
 80127a6:	2308      	movs	r3, #8
 80127a8:	005b      	lsls	r3, r3, #1
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d920      	bls.n	80127f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80127ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	4413      	add	r3, r2
 80127b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	f003 0307 	and.w	r3, r3, #7
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d00b      	beq.n	80127d8 <pvPortMalloc+0xfc>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	613b      	str	r3, [r7, #16]
}
 80127d2:	bf00      	nop
 80127d4:	bf00      	nop
 80127d6:	e7fd      	b.n	80127d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80127d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	1ad2      	subs	r2, r2, r3
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80127e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80127ea:	69b8      	ldr	r0, [r7, #24]
 80127ec:	f000 f90a 	bl	8012a04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80127f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012868 <pvPortMalloc+0x18c>)
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	4a1b      	ldr	r2, [pc, #108]	@ (8012868 <pvPortMalloc+0x18c>)
 80127fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80127fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012868 <pvPortMalloc+0x18c>)
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	4b1b      	ldr	r3, [pc, #108]	@ (8012870 <pvPortMalloc+0x194>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	429a      	cmp	r2, r3
 8012808:	d203      	bcs.n	8012812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801280a:	4b17      	ldr	r3, [pc, #92]	@ (8012868 <pvPortMalloc+0x18c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4a18      	ldr	r2, [pc, #96]	@ (8012870 <pvPortMalloc+0x194>)
 8012810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012814:	685a      	ldr	r2, [r3, #4]
 8012816:	4b13      	ldr	r3, [pc, #76]	@ (8012864 <pvPortMalloc+0x188>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	431a      	orrs	r2, r3
 801281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801281e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012822:	2200      	movs	r2, #0
 8012824:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012826:	4b13      	ldr	r3, [pc, #76]	@ (8012874 <pvPortMalloc+0x198>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	3301      	adds	r3, #1
 801282c:	4a11      	ldr	r2, [pc, #68]	@ (8012874 <pvPortMalloc+0x198>)
 801282e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012830:	f7fe fb0e 	bl	8010e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	f003 0307 	and.w	r3, r3, #7
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00b      	beq.n	8012856 <pvPortMalloc+0x17a>
	__asm volatile
 801283e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	60fb      	str	r3, [r7, #12]
}
 8012850:	bf00      	nop
 8012852:	bf00      	nop
 8012854:	e7fd      	b.n	8012852 <pvPortMalloc+0x176>
	return pvReturn;
 8012856:	69fb      	ldr	r3, [r7, #28]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3728      	adds	r7, #40	@ 0x28
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	20002514 	.word	0x20002514
 8012864:	20002528 	.word	0x20002528
 8012868:	20002518 	.word	0x20002518
 801286c:	2000250c 	.word	0x2000250c
 8012870:	2000251c 	.word	0x2000251c
 8012874:	20002520 	.word	0x20002520

08012878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d04f      	beq.n	801292a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801288a:	2308      	movs	r3, #8
 801288c:	425b      	negs	r3, r3
 801288e:	697a      	ldr	r2, [r7, #20]
 8012890:	4413      	add	r3, r2
 8012892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	685a      	ldr	r2, [r3, #4]
 801289c:	4b25      	ldr	r3, [pc, #148]	@ (8012934 <vPortFree+0xbc>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4013      	ands	r3, r2
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d10b      	bne.n	80128be <vPortFree+0x46>
	__asm volatile
 80128a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128aa:	f383 8811 	msr	BASEPRI, r3
 80128ae:	f3bf 8f6f 	isb	sy
 80128b2:	f3bf 8f4f 	dsb	sy
 80128b6:	60fb      	str	r3, [r7, #12]
}
 80128b8:	bf00      	nop
 80128ba:	bf00      	nop
 80128bc:	e7fd      	b.n	80128ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d00b      	beq.n	80128de <vPortFree+0x66>
	__asm volatile
 80128c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ca:	f383 8811 	msr	BASEPRI, r3
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f3bf 8f4f 	dsb	sy
 80128d6:	60bb      	str	r3, [r7, #8]
}
 80128d8:	bf00      	nop
 80128da:	bf00      	nop
 80128dc:	e7fd      	b.n	80128da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	4b14      	ldr	r3, [pc, #80]	@ (8012934 <vPortFree+0xbc>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4013      	ands	r3, r2
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d01e      	beq.n	801292a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d11a      	bne.n	801292a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012934 <vPortFree+0xbc>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	43db      	mvns	r3, r3
 80128fe:	401a      	ands	r2, r3
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012904:	f7fe fa96 	bl	8010e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	685a      	ldr	r2, [r3, #4]
 801290c:	4b0a      	ldr	r3, [pc, #40]	@ (8012938 <vPortFree+0xc0>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4413      	add	r3, r2
 8012912:	4a09      	ldr	r2, [pc, #36]	@ (8012938 <vPortFree+0xc0>)
 8012914:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012916:	6938      	ldr	r0, [r7, #16]
 8012918:	f000 f874 	bl	8012a04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801291c:	4b07      	ldr	r3, [pc, #28]	@ (801293c <vPortFree+0xc4>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	3301      	adds	r3, #1
 8012922:	4a06      	ldr	r2, [pc, #24]	@ (801293c <vPortFree+0xc4>)
 8012924:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012926:	f7fe fa93 	bl	8010e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801292a:	bf00      	nop
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	20002528 	.word	0x20002528
 8012938:	20002518 	.word	0x20002518
 801293c:	20002524 	.word	0x20002524

08012940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012946:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 801294a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801294c:	4b27      	ldr	r3, [pc, #156]	@ (80129ec <prvHeapInit+0xac>)
 801294e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f003 0307 	and.w	r3, r3, #7
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00c      	beq.n	8012974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3307      	adds	r3, #7
 801295e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f023 0307 	bic.w	r3, r3, #7
 8012966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	4a1f      	ldr	r2, [pc, #124]	@ (80129ec <prvHeapInit+0xac>)
 8012970:	4413      	add	r3, r2
 8012972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012978:	4a1d      	ldr	r2, [pc, #116]	@ (80129f0 <prvHeapInit+0xb0>)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801297e:	4b1c      	ldr	r3, [pc, #112]	@ (80129f0 <prvHeapInit+0xb0>)
 8012980:	2200      	movs	r2, #0
 8012982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	4413      	add	r3, r2
 801298a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801298c:	2208      	movs	r2, #8
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f023 0307 	bic.w	r3, r3, #7
 801299a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	4a15      	ldr	r2, [pc, #84]	@ (80129f4 <prvHeapInit+0xb4>)
 80129a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80129a2:	4b14      	ldr	r3, [pc, #80]	@ (80129f4 <prvHeapInit+0xb4>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2200      	movs	r2, #0
 80129a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80129aa:	4b12      	ldr	r3, [pc, #72]	@ (80129f4 <prvHeapInit+0xb4>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2200      	movs	r2, #0
 80129b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	68fa      	ldr	r2, [r7, #12]
 80129ba:	1ad2      	subs	r2, r2, r3
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80129c0:	4b0c      	ldr	r3, [pc, #48]	@ (80129f4 <prvHeapInit+0xb4>)
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	4a0a      	ldr	r2, [pc, #40]	@ (80129f8 <prvHeapInit+0xb8>)
 80129ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	4a09      	ldr	r2, [pc, #36]	@ (80129fc <prvHeapInit+0xbc>)
 80129d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80129d8:	4b09      	ldr	r3, [pc, #36]	@ (8012a00 <prvHeapInit+0xc0>)
 80129da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80129de:	601a      	str	r2, [r3, #0]
}
 80129e0:	bf00      	nop
 80129e2:	3714      	adds	r7, #20
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	2000190c 	.word	0x2000190c
 80129f0:	2000250c 	.word	0x2000250c
 80129f4:	20002514 	.word	0x20002514
 80129f8:	2000251c 	.word	0x2000251c
 80129fc:	20002518 	.word	0x20002518
 8012a00:	20002528 	.word	0x20002528

08012a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a0c:	4b28      	ldr	r3, [pc, #160]	@ (8012ab0 <prvInsertBlockIntoFreeList+0xac>)
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	e002      	b.n	8012a18 <prvInsertBlockIntoFreeList+0x14>
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	60fb      	str	r3, [r7, #12]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d8f7      	bhi.n	8012a12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	68ba      	ldr	r2, [r7, #8]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d108      	bne.n	8012a46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	685a      	ldr	r2, [r3, #4]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	441a      	add	r2, r3
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	441a      	add	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d118      	bne.n	8012a8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	4b15      	ldr	r3, [pc, #84]	@ (8012ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d00d      	beq.n	8012a82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	685a      	ldr	r2, [r3, #4]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	441a      	add	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	e008      	b.n	8012a94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012a82:	4b0c      	ldr	r3, [pc, #48]	@ (8012ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	601a      	str	r2, [r3, #0]
 8012a8a:	e003      	b.n	8012a94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d002      	beq.n	8012aa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012aa2:	bf00      	nop
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	2000250c 	.word	0x2000250c
 8012ab4:	20002514 	.word	0x20002514

08012ab8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012abc:	2200      	movs	r2, #0
 8012abe:	4912      	ldr	r1, [pc, #72]	@ (8012b08 <MX_USB_Device_Init+0x50>)
 8012ac0:	4812      	ldr	r0, [pc, #72]	@ (8012b0c <MX_USB_Device_Init+0x54>)
 8012ac2:	f7fb fa99 	bl	800dff8 <USBD_Init>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012acc:	f7ee ffea 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012ad0:	490f      	ldr	r1, [pc, #60]	@ (8012b10 <MX_USB_Device_Init+0x58>)
 8012ad2:	480e      	ldr	r0, [pc, #56]	@ (8012b0c <MX_USB_Device_Init+0x54>)
 8012ad4:	f7fb fac0 	bl	800e058 <USBD_RegisterClass>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d001      	beq.n	8012ae2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012ade:	f7ee ffe1 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012ae2:	490c      	ldr	r1, [pc, #48]	@ (8012b14 <MX_USB_Device_Init+0x5c>)
 8012ae4:	4809      	ldr	r0, [pc, #36]	@ (8012b0c <MX_USB_Device_Init+0x54>)
 8012ae6:	f7fb fa11 	bl	800df0c <USBD_CDC_RegisterInterface>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d001      	beq.n	8012af4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012af0:	f7ee ffd8 	bl	8001aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012af4:	4805      	ldr	r0, [pc, #20]	@ (8012b0c <MX_USB_Device_Init+0x54>)
 8012af6:	f7fb fad6 	bl	800e0a6 <USBD_Start>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012b00:	f7ee ffd0 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012b04:	bf00      	nop
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	20000134 	.word	0x20000134
 8012b0c:	2000252c 	.word	0x2000252c
 8012b10:	20000018 	.word	0x20000018
 8012b14:	20000120 	.word	0x20000120

08012b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4905      	ldr	r1, [pc, #20]	@ (8012b34 <CDC_Init_FS+0x1c>)
 8012b20:	4805      	ldr	r0, [pc, #20]	@ (8012b38 <CDC_Init_FS+0x20>)
 8012b22:	f7fb fa08 	bl	800df36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012b26:	4905      	ldr	r1, [pc, #20]	@ (8012b3c <CDC_Init_FS+0x24>)
 8012b28:	4803      	ldr	r0, [pc, #12]	@ (8012b38 <CDC_Init_FS+0x20>)
 8012b2a:	f7fb fa22 	bl	800df72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	20002bfc 	.word	0x20002bfc
 8012b38:	2000252c 	.word	0x2000252c
 8012b3c:	200027fc 	.word	0x200027fc

08012b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012b40:	b480      	push	{r7}
 8012b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b083      	sub	sp, #12
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	6039      	str	r1, [r7, #0]
 8012b5a:	71fb      	strb	r3, [r7, #7]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012b60:	79fb      	ldrb	r3, [r7, #7]
 8012b62:	2b23      	cmp	r3, #35	@ 0x23
 8012b64:	d84a      	bhi.n	8012bfc <CDC_Control_FS+0xac>
 8012b66:	a201      	add	r2, pc, #4	@ (adr r2, 8012b6c <CDC_Control_FS+0x1c>)
 8012b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b6c:	08012bfd 	.word	0x08012bfd
 8012b70:	08012bfd 	.word	0x08012bfd
 8012b74:	08012bfd 	.word	0x08012bfd
 8012b78:	08012bfd 	.word	0x08012bfd
 8012b7c:	08012bfd 	.word	0x08012bfd
 8012b80:	08012bfd 	.word	0x08012bfd
 8012b84:	08012bfd 	.word	0x08012bfd
 8012b88:	08012bfd 	.word	0x08012bfd
 8012b8c:	08012bfd 	.word	0x08012bfd
 8012b90:	08012bfd 	.word	0x08012bfd
 8012b94:	08012bfd 	.word	0x08012bfd
 8012b98:	08012bfd 	.word	0x08012bfd
 8012b9c:	08012bfd 	.word	0x08012bfd
 8012ba0:	08012bfd 	.word	0x08012bfd
 8012ba4:	08012bfd 	.word	0x08012bfd
 8012ba8:	08012bfd 	.word	0x08012bfd
 8012bac:	08012bfd 	.word	0x08012bfd
 8012bb0:	08012bfd 	.word	0x08012bfd
 8012bb4:	08012bfd 	.word	0x08012bfd
 8012bb8:	08012bfd 	.word	0x08012bfd
 8012bbc:	08012bfd 	.word	0x08012bfd
 8012bc0:	08012bfd 	.word	0x08012bfd
 8012bc4:	08012bfd 	.word	0x08012bfd
 8012bc8:	08012bfd 	.word	0x08012bfd
 8012bcc:	08012bfd 	.word	0x08012bfd
 8012bd0:	08012bfd 	.word	0x08012bfd
 8012bd4:	08012bfd 	.word	0x08012bfd
 8012bd8:	08012bfd 	.word	0x08012bfd
 8012bdc:	08012bfd 	.word	0x08012bfd
 8012be0:	08012bfd 	.word	0x08012bfd
 8012be4:	08012bfd 	.word	0x08012bfd
 8012be8:	08012bfd 	.word	0x08012bfd
 8012bec:	08012bfd 	.word	0x08012bfd
 8012bf0:	08012bfd 	.word	0x08012bfd
 8012bf4:	08012bfd 	.word	0x08012bfd
 8012bf8:	08012bfd 	.word	0x08012bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012bfc:	bf00      	nop
  }

  return (USBD_OK);
 8012bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	370c      	adds	r7, #12
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012c16:	6879      	ldr	r1, [r7, #4]
 8012c18:	4805      	ldr	r0, [pc, #20]	@ (8012c30 <CDC_Receive_FS+0x24>)
 8012c1a:	f7fb f9aa 	bl	800df72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012c1e:	4804      	ldr	r0, [pc, #16]	@ (8012c30 <CDC_Receive_FS+0x24>)
 8012c20:	f7fb f9c0 	bl	800dfa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012c24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3708      	adds	r7, #8
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	2000252c 	.word	0x2000252c

08012c34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b087      	sub	sp, #28
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012c42:	2300      	movs	r3, #0
 8012c44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	371c      	adds	r7, #28
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr
	...

08012c58 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	6039      	str	r1, [r7, #0]
 8012c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2212      	movs	r2, #18
 8012c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012c6a:	4b03      	ldr	r3, [pc, #12]	@ (8012c78 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr
 8012c78:	20000154 	.word	0x20000154

08012c7c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	4603      	mov	r3, r0
 8012c84:	6039      	str	r1, [r7, #0]
 8012c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	2204      	movs	r2, #4
 8012c8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c8e:	4b03      	ldr	r3, [pc, #12]	@ (8012c9c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr
 8012c9c:	20000168 	.word	0x20000168

08012ca0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6039      	str	r1, [r7, #0]
 8012caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d105      	bne.n	8012cbe <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	4907      	ldr	r1, [pc, #28]	@ (8012cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012cb6:	4808      	ldr	r0, [pc, #32]	@ (8012cd8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012cb8:	f7fc f9dd 	bl	800f076 <USBD_GetString>
 8012cbc:	e004      	b.n	8012cc8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012cbe:	683a      	ldr	r2, [r7, #0]
 8012cc0:	4904      	ldr	r1, [pc, #16]	@ (8012cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012cc2:	4805      	ldr	r0, [pc, #20]	@ (8012cd8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012cc4:	f7fc f9d7 	bl	800f076 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cc8:	4b02      	ldr	r3, [pc, #8]	@ (8012cd4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	20002ffc 	.word	0x20002ffc
 8012cd8:	08014334 	.word	0x08014334

08012cdc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	6039      	str	r1, [r7, #0]
 8012ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ce8:	683a      	ldr	r2, [r7, #0]
 8012cea:	4904      	ldr	r1, [pc, #16]	@ (8012cfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012cec:	4804      	ldr	r0, [pc, #16]	@ (8012d00 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012cee:	f7fc f9c2 	bl	800f076 <USBD_GetString>
  return USBD_StrDesc;
 8012cf2:	4b02      	ldr	r3, [pc, #8]	@ (8012cfc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	20002ffc 	.word	0x20002ffc
 8012d00:	0801434c 	.word	0x0801434c

08012d04 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	6039      	str	r1, [r7, #0]
 8012d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	221a      	movs	r2, #26
 8012d14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012d16:	f000 f843 	bl	8012da0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012d1a:	4b02      	ldr	r3, [pc, #8]	@ (8012d24 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	2000016c 	.word	0x2000016c

08012d28 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	4603      	mov	r3, r0
 8012d30:	6039      	str	r1, [r7, #0]
 8012d32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d34:	79fb      	ldrb	r3, [r7, #7]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d105      	bne.n	8012d46 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d3a:	683a      	ldr	r2, [r7, #0]
 8012d3c:	4907      	ldr	r1, [pc, #28]	@ (8012d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d3e:	4808      	ldr	r0, [pc, #32]	@ (8012d60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d40:	f7fc f999 	bl	800f076 <USBD_GetString>
 8012d44:	e004      	b.n	8012d50 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d46:	683a      	ldr	r2, [r7, #0]
 8012d48:	4904      	ldr	r1, [pc, #16]	@ (8012d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d4a:	4805      	ldr	r0, [pc, #20]	@ (8012d60 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d4c:	f7fc f993 	bl	800f076 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d50:	4b02      	ldr	r3, [pc, #8]	@ (8012d5c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	20002ffc 	.word	0x20002ffc
 8012d60:	08014360 	.word	0x08014360

08012d64 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	6039      	str	r1, [r7, #0]
 8012d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d70:	79fb      	ldrb	r3, [r7, #7]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d105      	bne.n	8012d82 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	4907      	ldr	r1, [pc, #28]	@ (8012d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d7a:	4808      	ldr	r0, [pc, #32]	@ (8012d9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d7c:	f7fc f97b 	bl	800f076 <USBD_GetString>
 8012d80:	e004      	b.n	8012d8c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d82:	683a      	ldr	r2, [r7, #0]
 8012d84:	4904      	ldr	r1, [pc, #16]	@ (8012d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d86:	4805      	ldr	r0, [pc, #20]	@ (8012d9c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d88:	f7fc f975 	bl	800f076 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d8c:	4b02      	ldr	r3, [pc, #8]	@ (8012d98 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3708      	adds	r7, #8
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	20002ffc 	.word	0x20002ffc
 8012d9c:	0801436c 	.word	0x0801436c

08012da0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012da6:	4b0f      	ldr	r3, [pc, #60]	@ (8012de4 <Get_SerialNum+0x44>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012dac:	4b0e      	ldr	r3, [pc, #56]	@ (8012de8 <Get_SerialNum+0x48>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012db2:	4b0e      	ldr	r3, [pc, #56]	@ (8012dec <Get_SerialNum+0x4c>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012db8:	68fa      	ldr	r2, [r7, #12]
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d009      	beq.n	8012dda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012dc6:	2208      	movs	r2, #8
 8012dc8:	4909      	ldr	r1, [pc, #36]	@ (8012df0 <Get_SerialNum+0x50>)
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	f000 f814 	bl	8012df8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dd0:	2204      	movs	r2, #4
 8012dd2:	4908      	ldr	r1, [pc, #32]	@ (8012df4 <Get_SerialNum+0x54>)
 8012dd4:	68b8      	ldr	r0, [r7, #8]
 8012dd6:	f000 f80f 	bl	8012df8 <IntToUnicode>
  }
}
 8012dda:	bf00      	nop
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	1fff7590 	.word	0x1fff7590
 8012de8:	1fff7594 	.word	0x1fff7594
 8012dec:	1fff7598 	.word	0x1fff7598
 8012df0:	2000016e 	.word	0x2000016e
 8012df4:	2000017e 	.word	0x2000017e

08012df8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b087      	sub	sp, #28
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	4613      	mov	r3, r2
 8012e04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	75fb      	strb	r3, [r7, #23]
 8012e0e:	e027      	b.n	8012e60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	0f1b      	lsrs	r3, r3, #28
 8012e14:	2b09      	cmp	r3, #9
 8012e16:	d80b      	bhi.n	8012e30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	0f1b      	lsrs	r3, r3, #28
 8012e1c:	b2da      	uxtb	r2, r3
 8012e1e:	7dfb      	ldrb	r3, [r7, #23]
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4619      	mov	r1, r3
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	440b      	add	r3, r1
 8012e28:	3230      	adds	r2, #48	@ 0x30
 8012e2a:	b2d2      	uxtb	r2, r2
 8012e2c:	701a      	strb	r2, [r3, #0]
 8012e2e:	e00a      	b.n	8012e46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	0f1b      	lsrs	r3, r3, #28
 8012e34:	b2da      	uxtb	r2, r3
 8012e36:	7dfb      	ldrb	r3, [r7, #23]
 8012e38:	005b      	lsls	r3, r3, #1
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	440b      	add	r3, r1
 8012e40:	3237      	adds	r2, #55	@ 0x37
 8012e42:	b2d2      	uxtb	r2, r2
 8012e44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	011b      	lsls	r3, r3, #4
 8012e4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e4c:	7dfb      	ldrb	r3, [r7, #23]
 8012e4e:	005b      	lsls	r3, r3, #1
 8012e50:	3301      	adds	r3, #1
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	4413      	add	r3, r2
 8012e56:	2200      	movs	r2, #0
 8012e58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e5a:	7dfb      	ldrb	r3, [r7, #23]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	75fb      	strb	r3, [r7, #23]
 8012e60:	7dfa      	ldrb	r2, [r7, #23]
 8012e62:	79fb      	ldrb	r3, [r7, #7]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d3d3      	bcc.n	8012e10 <IntToUnicode+0x18>
  }
}
 8012e68:	bf00      	nop
 8012e6a:	bf00      	nop
 8012e6c:	371c      	adds	r7, #28
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr
	...

08012e78 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b094      	sub	sp, #80	@ 0x50
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012e80:	f107 030c 	add.w	r3, r7, #12
 8012e84:	2244      	movs	r2, #68	@ 0x44
 8012e86:	2100      	movs	r1, #0
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f000 fda7 	bl	80139dc <memset>
  if(pcdHandle->Instance==USB)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	4a15      	ldr	r2, [pc, #84]	@ (8012ee8 <HAL_PCD_MspInit+0x70>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d123      	bne.n	8012ee0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012e98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012e9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8012e9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012ea2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012ea4:	f107 030c 	add.w	r3, r7, #12
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f3 fa8b 	bl	80063c4 <HAL_RCCEx_PeriphCLKConfig>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d001      	beq.n	8012eb8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8012eb4:	f7ee fdf6 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8012eec <HAL_PCD_MspInit+0x74>)
 8012eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8012eec <HAL_PCD_MspInit+0x74>)
 8012ebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8012ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ec4:	4b09      	ldr	r3, [pc, #36]	@ (8012eec <HAL_PCD_MspInit+0x74>)
 8012ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012ecc:	60bb      	str	r3, [r7, #8]
 8012ece:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	2105      	movs	r1, #5
 8012ed4:	2014      	movs	r0, #20
 8012ed6:	f7ef fdf7 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012eda:	2014      	movs	r0, #20
 8012edc:	f7ef fe1e 	bl	8002b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012ee0:	bf00      	nop
 8012ee2:	3750      	adds	r7, #80	@ 0x50
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	40005c00 	.word	0x40005c00
 8012eec:	40021000 	.word	0x40021000

08012ef0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012f04:	4619      	mov	r1, r3
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7fb f918 	bl	800e13c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012f0c:	bf00      	nop
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012f26:	78fa      	ldrb	r2, [r7, #3]
 8012f28:	6879      	ldr	r1, [r7, #4]
 8012f2a:	4613      	mov	r3, r2
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	4413      	add	r3, r2
 8012f30:	00db      	lsls	r3, r3, #3
 8012f32:	440b      	add	r3, r1
 8012f34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	78fb      	ldrb	r3, [r7, #3]
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	f7fb f952 	bl	800e1e6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012f42:	bf00      	nop
 8012f44:	3708      	adds	r7, #8
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
 8012f52:	460b      	mov	r3, r1
 8012f54:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012f5c:	78fa      	ldrb	r2, [r7, #3]
 8012f5e:	6879      	ldr	r1, [r7, #4]
 8012f60:	4613      	mov	r3, r2
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	4413      	add	r3, r2
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	440b      	add	r3, r1
 8012f6a:	3324      	adds	r3, #36	@ 0x24
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	78fb      	ldrb	r3, [r7, #3]
 8012f70:	4619      	mov	r1, r3
 8012f72:	f7fb f99b 	bl	800e2ac <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012f76:	bf00      	nop
 8012f78:	3708      	adds	r7, #8
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b082      	sub	sp, #8
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fb faaf 	bl	800e4f0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012f92:	bf00      	nop
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b084      	sub	sp, #16
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	795b      	ldrb	r3, [r3, #5]
 8012faa:	2b02      	cmp	r3, #2
 8012fac:	d001      	beq.n	8012fb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012fae:	f7ee fd79 	bl	8001aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012fb8:	7bfa      	ldrb	r2, [r7, #15]
 8012fba:	4611      	mov	r1, r2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fb fa59 	bl	800e474 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fb fa05 	bl	800e3d8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012fce:	bf00      	nop
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
	...

08012fd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fb fa54 	bl	800e494 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	7a5b      	ldrb	r3, [r3, #9]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d005      	beq.n	8013000 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012ff4:	4b04      	ldr	r3, [pc, #16]	@ (8013008 <HAL_PCD_SuspendCallback+0x30>)
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	4a03      	ldr	r2, [pc, #12]	@ (8013008 <HAL_PCD_SuspendCallback+0x30>)
 8012ffa:	f043 0306 	orr.w	r3, r3, #6
 8012ffe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	e000ed00 	.word	0xe000ed00

0801300c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	7a5b      	ldrb	r3, [r3, #9]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d007      	beq.n	801302c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801301c:	4b08      	ldr	r3, [pc, #32]	@ (8013040 <HAL_PCD_ResumeCallback+0x34>)
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	4a07      	ldr	r2, [pc, #28]	@ (8013040 <HAL_PCD_ResumeCallback+0x34>)
 8013022:	f023 0306 	bic.w	r3, r3, #6
 8013026:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013028:	f000 f9f8 	bl	801341c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013032:	4618      	mov	r0, r3
 8013034:	f7fb fa44 	bl	800e4c0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	e000ed00 	.word	0xe000ed00

08013044 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801304c:	4a2b      	ldr	r2, [pc, #172]	@ (80130fc <USBD_LL_Init+0xb8>)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	4a29      	ldr	r2, [pc, #164]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013058:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 801305c:	4b27      	ldr	r3, [pc, #156]	@ (80130fc <USBD_LL_Init+0xb8>)
 801305e:	4a28      	ldr	r2, [pc, #160]	@ (8013100 <USBD_LL_Init+0xbc>)
 8013060:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013062:	4b26      	ldr	r3, [pc, #152]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013064:	2208      	movs	r2, #8
 8013066:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013068:	4b24      	ldr	r3, [pc, #144]	@ (80130fc <USBD_LL_Init+0xb8>)
 801306a:	2202      	movs	r2, #2
 801306c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801306e:	4b23      	ldr	r3, [pc, #140]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013070:	2202      	movs	r2, #2
 8013072:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013074:	4b21      	ldr	r3, [pc, #132]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013076:	2200      	movs	r2, #0
 8013078:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801307a:	4b20      	ldr	r3, [pc, #128]	@ (80130fc <USBD_LL_Init+0xb8>)
 801307c:	2200      	movs	r2, #0
 801307e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013080:	4b1e      	ldr	r3, [pc, #120]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013082:	2200      	movs	r2, #0
 8013084:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013086:	4b1d      	ldr	r3, [pc, #116]	@ (80130fc <USBD_LL_Init+0xb8>)
 8013088:	2200      	movs	r2, #0
 801308a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801308c:	481b      	ldr	r0, [pc, #108]	@ (80130fc <USBD_LL_Init+0xb8>)
 801308e:	f7f0 fc67 	bl	8003960 <HAL_PCD_Init>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8013098:	f7ee fd04 	bl	8001aa4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80130a2:	2318      	movs	r3, #24
 80130a4:	2200      	movs	r2, #0
 80130a6:	2100      	movs	r1, #0
 80130a8:	f7f2 f92e 	bl	8005308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80130b2:	2358      	movs	r3, #88	@ 0x58
 80130b4:	2200      	movs	r2, #0
 80130b6:	2180      	movs	r1, #128	@ 0x80
 80130b8:	f7f2 f926 	bl	8005308 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80130c2:	23c0      	movs	r3, #192	@ 0xc0
 80130c4:	2200      	movs	r2, #0
 80130c6:	2181      	movs	r1, #129	@ 0x81
 80130c8:	f7f2 f91e 	bl	8005308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80130d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80130d6:	2200      	movs	r2, #0
 80130d8:	2101      	movs	r1, #1
 80130da:	f7f2 f915 	bl	8005308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80130e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130e8:	2200      	movs	r2, #0
 80130ea:	2182      	movs	r1, #130	@ 0x82
 80130ec:	f7f2 f90c 	bl	8005308 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3708      	adds	r7, #8
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	200031fc 	.word	0x200031fc
 8013100:	40005c00 	.word	0x40005c00

08013104 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013110:	2300      	movs	r3, #0
 8013112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801311a:	4618      	mov	r0, r3
 801311c:	f7f0 fcfc 	bl	8003b18 <HAL_PCD_Start>
 8013120:	4603      	mov	r3, r0
 8013122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013124:	7bfb      	ldrb	r3, [r7, #15]
 8013126:	4618      	mov	r0, r3
 8013128:	f000 f97e 	bl	8013428 <USBD_Get_USB_Status>
 801312c:	4603      	mov	r3, r0
 801312e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013130:	7bbb      	ldrb	r3, [r7, #14]
}
 8013132:	4618      	mov	r0, r3
 8013134:	3710      	adds	r7, #16
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801313a:	b580      	push	{r7, lr}
 801313c:	b084      	sub	sp, #16
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
 8013142:	4608      	mov	r0, r1
 8013144:	4611      	mov	r1, r2
 8013146:	461a      	mov	r2, r3
 8013148:	4603      	mov	r3, r0
 801314a:	70fb      	strb	r3, [r7, #3]
 801314c:	460b      	mov	r3, r1
 801314e:	70bb      	strb	r3, [r7, #2]
 8013150:	4613      	mov	r3, r2
 8013152:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013154:	2300      	movs	r3, #0
 8013156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013158:	2300      	movs	r3, #0
 801315a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013162:	78bb      	ldrb	r3, [r7, #2]
 8013164:	883a      	ldrh	r2, [r7, #0]
 8013166:	78f9      	ldrb	r1, [r7, #3]
 8013168:	f7f0 fe43 	bl	8003df2 <HAL_PCD_EP_Open>
 801316c:	4603      	mov	r3, r0
 801316e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013170:	7bfb      	ldrb	r3, [r7, #15]
 8013172:	4618      	mov	r0, r3
 8013174:	f000 f958 	bl	8013428 <USBD_Get_USB_Status>
 8013178:	4603      	mov	r3, r0
 801317a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801317c:	7bbb      	ldrb	r3, [r7, #14]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}

08013186 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013186:	b580      	push	{r7, lr}
 8013188:	b084      	sub	sp, #16
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
 801318e:	460b      	mov	r3, r1
 8013190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013192:	2300      	movs	r3, #0
 8013194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013196:	2300      	movs	r3, #0
 8013198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80131a0:	78fa      	ldrb	r2, [r7, #3]
 80131a2:	4611      	mov	r1, r2
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7f0 fe81 	bl	8003eac <HAL_PCD_EP_Close>
 80131aa:	4603      	mov	r3, r0
 80131ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f000 f939 	bl	8013428 <USBD_Get_USB_Status>
 80131b6:	4603      	mov	r3, r0
 80131b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	460b      	mov	r3, r1
 80131ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131d0:	2300      	movs	r3, #0
 80131d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131d4:	2300      	movs	r3, #0
 80131d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80131de:	78fa      	ldrb	r2, [r7, #3]
 80131e0:	4611      	mov	r1, r2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f0 ff2a 	bl	800403c <HAL_PCD_EP_SetStall>
 80131e8:	4603      	mov	r3, r0
 80131ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131ec:	7bfb      	ldrb	r3, [r7, #15]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f000 f91a 	bl	8013428 <USBD_Get_USB_Status>
 80131f4:	4603      	mov	r3, r0
 80131f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3710      	adds	r7, #16
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}

08013202 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013202:	b580      	push	{r7, lr}
 8013204:	b084      	sub	sp, #16
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
 801320a:	460b      	mov	r3, r1
 801320c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801320e:	2300      	movs	r3, #0
 8013210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013212:	2300      	movs	r3, #0
 8013214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801321c:	78fa      	ldrb	r2, [r7, #3]
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f7f0 ff5d 	bl	80040e0 <HAL_PCD_EP_ClrStall>
 8013226:	4603      	mov	r3, r0
 8013228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801322a:	7bfb      	ldrb	r3, [r7, #15]
 801322c:	4618      	mov	r0, r3
 801322e:	f000 f8fb 	bl	8013428 <USBD_Get_USB_Status>
 8013232:	4603      	mov	r3, r0
 8013234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013236:	7bbb      	ldrb	r3, [r7, #14]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013240:	b480      	push	{r7}
 8013242:	b085      	sub	sp, #20
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	460b      	mov	r3, r1
 801324a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8013252:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013258:	2b00      	cmp	r3, #0
 801325a:	da0b      	bge.n	8013274 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801325c:	78fb      	ldrb	r3, [r7, #3]
 801325e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013262:	68f9      	ldr	r1, [r7, #12]
 8013264:	4613      	mov	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	4413      	add	r3, r2
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	440b      	add	r3, r1
 801326e:	3312      	adds	r3, #18
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	e00b      	b.n	801328c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013274:	78fb      	ldrb	r3, [r7, #3]
 8013276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801327a:	68f9      	ldr	r1, [r7, #12]
 801327c:	4613      	mov	r3, r2
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	4413      	add	r3, r2
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	440b      	add	r3, r1
 8013286:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801328a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	460b      	mov	r3, r1
 80132a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132a4:	2300      	movs	r3, #0
 80132a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132a8:	2300      	movs	r3, #0
 80132aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80132b2:	78fa      	ldrb	r2, [r7, #3]
 80132b4:	4611      	mov	r1, r2
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7f0 fd77 	bl	8003daa <HAL_PCD_SetAddress>
 80132bc:	4603      	mov	r3, r0
 80132be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132c0:	7bfb      	ldrb	r3, [r7, #15]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f000 f8b0 	bl	8013428 <USBD_Get_USB_Status>
 80132c8:	4603      	mov	r3, r0
 80132ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b086      	sub	sp, #24
 80132da:	af00      	add	r7, sp, #0
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	607a      	str	r2, [r7, #4]
 80132e0:	603b      	str	r3, [r7, #0]
 80132e2:	460b      	mov	r3, r1
 80132e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132e6:	2300      	movs	r3, #0
 80132e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132ea:	2300      	movs	r3, #0
 80132ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80132f4:	7af9      	ldrb	r1, [r7, #11]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	f7f0 fe68 	bl	8003fce <HAL_PCD_EP_Transmit>
 80132fe:	4603      	mov	r3, r0
 8013300:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013302:	7dfb      	ldrb	r3, [r7, #23]
 8013304:	4618      	mov	r0, r3
 8013306:	f000 f88f 	bl	8013428 <USBD_Get_USB_Status>
 801330a:	4603      	mov	r3, r0
 801330c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801330e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b086      	sub	sp, #24
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	607a      	str	r2, [r7, #4]
 8013322:	603b      	str	r3, [r7, #0]
 8013324:	460b      	mov	r3, r1
 8013326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8013336:	7af9      	ldrb	r1, [r7, #11]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	f7f0 fdfe 	bl	8003f3c <HAL_PCD_EP_Receive>
 8013340:	4603      	mov	r3, r0
 8013342:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013344:	7dfb      	ldrb	r3, [r7, #23]
 8013346:	4618      	mov	r0, r3
 8013348:	f000 f86e 	bl	8013428 <USBD_Get_USB_Status>
 801334c:	4603      	mov	r3, r0
 801334e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013350:	7dbb      	ldrb	r3, [r7, #22]
}
 8013352:	4618      	mov	r0, r3
 8013354:	3718      	adds	r7, #24
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b082      	sub	sp, #8
 801335e:	af00      	add	r7, sp, #0
 8013360:	6078      	str	r0, [r7, #4]
 8013362:	460b      	mov	r3, r1
 8013364:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801336c:	78fa      	ldrb	r2, [r7, #3]
 801336e:	4611      	mov	r1, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f7f0 fe14 	bl	8003f9e <HAL_PCD_EP_GetRxCount>
 8013376:	4603      	mov	r3, r0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	460b      	mov	r3, r1
 801338a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801338c:	78fb      	ldrb	r3, [r7, #3]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <HAL_PCDEx_LPM_Callback+0x18>
 8013392:	2b01      	cmp	r3, #1
 8013394:	d013      	beq.n	80133be <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013396:	e023      	b.n	80133e0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	7a5b      	ldrb	r3, [r3, #9]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d007      	beq.n	80133b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80133a0:	f000 f83c 	bl	801341c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133a4:	4b10      	ldr	r3, [pc, #64]	@ (80133e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80133a6:	691b      	ldr	r3, [r3, #16]
 80133a8:	4a0f      	ldr	r2, [pc, #60]	@ (80133e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80133aa:	f023 0306 	bic.w	r3, r3, #6
 80133ae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fb f882 	bl	800e4c0 <USBD_LL_Resume>
    break;
 80133bc:	e010      	b.n	80133e0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fb f865 	bl	800e494 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	7a5b      	ldrb	r3, [r3, #9]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d005      	beq.n	80133de <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133d2:	4b05      	ldr	r3, [pc, #20]	@ (80133e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80133d4:	691b      	ldr	r3, [r3, #16]
 80133d6:	4a04      	ldr	r2, [pc, #16]	@ (80133e8 <HAL_PCDEx_LPM_Callback+0x68>)
 80133d8:	f043 0306 	orr.w	r3, r3, #6
 80133dc:	6113      	str	r3, [r2, #16]
    break;
 80133de:	bf00      	nop
}
 80133e0:	bf00      	nop
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	e000ed00 	.word	0xe000ed00

080133ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80133f4:	4b03      	ldr	r3, [pc, #12]	@ (8013404 <USBD_static_malloc+0x18>)
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	370c      	adds	r7, #12
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	200034d8 	.word	0x200034d8

08013408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]

}
 8013410:	bf00      	nop
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr

0801341c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013420:	f7ee fae4 	bl	80019ec <SystemClock_Config>
}
 8013424:	bf00      	nop
 8013426:	bd80      	pop	{r7, pc}

08013428 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013428:	b480      	push	{r7}
 801342a:	b085      	sub	sp, #20
 801342c:	af00      	add	r7, sp, #0
 801342e:	4603      	mov	r3, r0
 8013430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013432:	2300      	movs	r3, #0
 8013434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013436:	79fb      	ldrb	r3, [r7, #7]
 8013438:	2b03      	cmp	r3, #3
 801343a:	d817      	bhi.n	801346c <USBD_Get_USB_Status+0x44>
 801343c:	a201      	add	r2, pc, #4	@ (adr r2, 8013444 <USBD_Get_USB_Status+0x1c>)
 801343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013442:	bf00      	nop
 8013444:	08013455 	.word	0x08013455
 8013448:	0801345b 	.word	0x0801345b
 801344c:	08013461 	.word	0x08013461
 8013450:	08013467 	.word	0x08013467
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	73fb      	strb	r3, [r7, #15]
    break;
 8013458:	e00b      	b.n	8013472 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801345a:	2303      	movs	r3, #3
 801345c:	73fb      	strb	r3, [r7, #15]
    break;
 801345e:	e008      	b.n	8013472 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013460:	2301      	movs	r3, #1
 8013462:	73fb      	strb	r3, [r7, #15]
    break;
 8013464:	e005      	b.n	8013472 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013466:	2303      	movs	r3, #3
 8013468:	73fb      	strb	r3, [r7, #15]
    break;
 801346a:	e002      	b.n	8013472 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801346c:	2303      	movs	r3, #3
 801346e:	73fb      	strb	r3, [r7, #15]
    break;
 8013470:	bf00      	nop
  }
  return usb_status;
 8013472:	7bfb      	ldrb	r3, [r7, #15]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3714      	adds	r7, #20
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <malloc>:
 8013480:	4b02      	ldr	r3, [pc, #8]	@ (801348c <malloc+0xc>)
 8013482:	4601      	mov	r1, r0
 8013484:	6818      	ldr	r0, [r3, #0]
 8013486:	f000 b825 	b.w	80134d4 <_malloc_r>
 801348a:	bf00      	nop
 801348c:	20000194 	.word	0x20000194

08013490 <sbrk_aligned>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	4e0f      	ldr	r6, [pc, #60]	@ (80134d0 <sbrk_aligned+0x40>)
 8013494:	460c      	mov	r4, r1
 8013496:	6831      	ldr	r1, [r6, #0]
 8013498:	4605      	mov	r5, r0
 801349a:	b911      	cbnz	r1, 80134a2 <sbrk_aligned+0x12>
 801349c:	f000 fb30 	bl	8013b00 <_sbrk_r>
 80134a0:	6030      	str	r0, [r6, #0]
 80134a2:	4621      	mov	r1, r4
 80134a4:	4628      	mov	r0, r5
 80134a6:	f000 fb2b 	bl	8013b00 <_sbrk_r>
 80134aa:	1c43      	adds	r3, r0, #1
 80134ac:	d103      	bne.n	80134b6 <sbrk_aligned+0x26>
 80134ae:	f04f 34ff 	mov.w	r4, #4294967295
 80134b2:	4620      	mov	r0, r4
 80134b4:	bd70      	pop	{r4, r5, r6, pc}
 80134b6:	1cc4      	adds	r4, r0, #3
 80134b8:	f024 0403 	bic.w	r4, r4, #3
 80134bc:	42a0      	cmp	r0, r4
 80134be:	d0f8      	beq.n	80134b2 <sbrk_aligned+0x22>
 80134c0:	1a21      	subs	r1, r4, r0
 80134c2:	4628      	mov	r0, r5
 80134c4:	f000 fb1c 	bl	8013b00 <_sbrk_r>
 80134c8:	3001      	adds	r0, #1
 80134ca:	d1f2      	bne.n	80134b2 <sbrk_aligned+0x22>
 80134cc:	e7ef      	b.n	80134ae <sbrk_aligned+0x1e>
 80134ce:	bf00      	nop
 80134d0:	200036f8 	.word	0x200036f8

080134d4 <_malloc_r>:
 80134d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d8:	1ccd      	adds	r5, r1, #3
 80134da:	f025 0503 	bic.w	r5, r5, #3
 80134de:	3508      	adds	r5, #8
 80134e0:	2d0c      	cmp	r5, #12
 80134e2:	bf38      	it	cc
 80134e4:	250c      	movcc	r5, #12
 80134e6:	2d00      	cmp	r5, #0
 80134e8:	4606      	mov	r6, r0
 80134ea:	db01      	blt.n	80134f0 <_malloc_r+0x1c>
 80134ec:	42a9      	cmp	r1, r5
 80134ee:	d904      	bls.n	80134fa <_malloc_r+0x26>
 80134f0:	230c      	movs	r3, #12
 80134f2:	6033      	str	r3, [r6, #0]
 80134f4:	2000      	movs	r0, #0
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80135d0 <_malloc_r+0xfc>
 80134fe:	f000 f869 	bl	80135d4 <__malloc_lock>
 8013502:	f8d8 3000 	ldr.w	r3, [r8]
 8013506:	461c      	mov	r4, r3
 8013508:	bb44      	cbnz	r4, 801355c <_malloc_r+0x88>
 801350a:	4629      	mov	r1, r5
 801350c:	4630      	mov	r0, r6
 801350e:	f7ff ffbf 	bl	8013490 <sbrk_aligned>
 8013512:	1c43      	adds	r3, r0, #1
 8013514:	4604      	mov	r4, r0
 8013516:	d158      	bne.n	80135ca <_malloc_r+0xf6>
 8013518:	f8d8 4000 	ldr.w	r4, [r8]
 801351c:	4627      	mov	r7, r4
 801351e:	2f00      	cmp	r7, #0
 8013520:	d143      	bne.n	80135aa <_malloc_r+0xd6>
 8013522:	2c00      	cmp	r4, #0
 8013524:	d04b      	beq.n	80135be <_malloc_r+0xea>
 8013526:	6823      	ldr	r3, [r4, #0]
 8013528:	4639      	mov	r1, r7
 801352a:	4630      	mov	r0, r6
 801352c:	eb04 0903 	add.w	r9, r4, r3
 8013530:	f000 fae6 	bl	8013b00 <_sbrk_r>
 8013534:	4581      	cmp	r9, r0
 8013536:	d142      	bne.n	80135be <_malloc_r+0xea>
 8013538:	6821      	ldr	r1, [r4, #0]
 801353a:	1a6d      	subs	r5, r5, r1
 801353c:	4629      	mov	r1, r5
 801353e:	4630      	mov	r0, r6
 8013540:	f7ff ffa6 	bl	8013490 <sbrk_aligned>
 8013544:	3001      	adds	r0, #1
 8013546:	d03a      	beq.n	80135be <_malloc_r+0xea>
 8013548:	6823      	ldr	r3, [r4, #0]
 801354a:	442b      	add	r3, r5
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	f8d8 3000 	ldr.w	r3, [r8]
 8013552:	685a      	ldr	r2, [r3, #4]
 8013554:	bb62      	cbnz	r2, 80135b0 <_malloc_r+0xdc>
 8013556:	f8c8 7000 	str.w	r7, [r8]
 801355a:	e00f      	b.n	801357c <_malloc_r+0xa8>
 801355c:	6822      	ldr	r2, [r4, #0]
 801355e:	1b52      	subs	r2, r2, r5
 8013560:	d420      	bmi.n	80135a4 <_malloc_r+0xd0>
 8013562:	2a0b      	cmp	r2, #11
 8013564:	d917      	bls.n	8013596 <_malloc_r+0xc2>
 8013566:	1961      	adds	r1, r4, r5
 8013568:	42a3      	cmp	r3, r4
 801356a:	6025      	str	r5, [r4, #0]
 801356c:	bf18      	it	ne
 801356e:	6059      	strne	r1, [r3, #4]
 8013570:	6863      	ldr	r3, [r4, #4]
 8013572:	bf08      	it	eq
 8013574:	f8c8 1000 	streq.w	r1, [r8]
 8013578:	5162      	str	r2, [r4, r5]
 801357a:	604b      	str	r3, [r1, #4]
 801357c:	4630      	mov	r0, r6
 801357e:	f000 f82f 	bl	80135e0 <__malloc_unlock>
 8013582:	f104 000b 	add.w	r0, r4, #11
 8013586:	1d23      	adds	r3, r4, #4
 8013588:	f020 0007 	bic.w	r0, r0, #7
 801358c:	1ac2      	subs	r2, r0, r3
 801358e:	bf1c      	itt	ne
 8013590:	1a1b      	subne	r3, r3, r0
 8013592:	50a3      	strne	r3, [r4, r2]
 8013594:	e7af      	b.n	80134f6 <_malloc_r+0x22>
 8013596:	6862      	ldr	r2, [r4, #4]
 8013598:	42a3      	cmp	r3, r4
 801359a:	bf0c      	ite	eq
 801359c:	f8c8 2000 	streq.w	r2, [r8]
 80135a0:	605a      	strne	r2, [r3, #4]
 80135a2:	e7eb      	b.n	801357c <_malloc_r+0xa8>
 80135a4:	4623      	mov	r3, r4
 80135a6:	6864      	ldr	r4, [r4, #4]
 80135a8:	e7ae      	b.n	8013508 <_malloc_r+0x34>
 80135aa:	463c      	mov	r4, r7
 80135ac:	687f      	ldr	r7, [r7, #4]
 80135ae:	e7b6      	b.n	801351e <_malloc_r+0x4a>
 80135b0:	461a      	mov	r2, r3
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	42a3      	cmp	r3, r4
 80135b6:	d1fb      	bne.n	80135b0 <_malloc_r+0xdc>
 80135b8:	2300      	movs	r3, #0
 80135ba:	6053      	str	r3, [r2, #4]
 80135bc:	e7de      	b.n	801357c <_malloc_r+0xa8>
 80135be:	230c      	movs	r3, #12
 80135c0:	6033      	str	r3, [r6, #0]
 80135c2:	4630      	mov	r0, r6
 80135c4:	f000 f80c 	bl	80135e0 <__malloc_unlock>
 80135c8:	e794      	b.n	80134f4 <_malloc_r+0x20>
 80135ca:	6005      	str	r5, [r0, #0]
 80135cc:	e7d6      	b.n	801357c <_malloc_r+0xa8>
 80135ce:	bf00      	nop
 80135d0:	200036fc 	.word	0x200036fc

080135d4 <__malloc_lock>:
 80135d4:	4801      	ldr	r0, [pc, #4]	@ (80135dc <__malloc_lock+0x8>)
 80135d6:	f7ef b927 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80135da:	bf00      	nop
 80135dc:	20000b30 	.word	0x20000b30

080135e0 <__malloc_unlock>:
 80135e0:	4801      	ldr	r0, [pc, #4]	@ (80135e8 <__malloc_unlock+0x8>)
 80135e2:	f7ef b936 	b.w	8002852 <__retarget_lock_release_recursive>
 80135e6:	bf00      	nop
 80135e8:	20000b30 	.word	0x20000b30

080135ec <std>:
 80135ec:	2300      	movs	r3, #0
 80135ee:	b510      	push	{r4, lr}
 80135f0:	4604      	mov	r4, r0
 80135f2:	e9c0 3300 	strd	r3, r3, [r0]
 80135f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135fa:	6083      	str	r3, [r0, #8]
 80135fc:	8181      	strh	r1, [r0, #12]
 80135fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8013600:	81c2      	strh	r2, [r0, #14]
 8013602:	6183      	str	r3, [r0, #24]
 8013604:	4619      	mov	r1, r3
 8013606:	2208      	movs	r2, #8
 8013608:	305c      	adds	r0, #92	@ 0x5c
 801360a:	f000 f9e7 	bl	80139dc <memset>
 801360e:	4b0d      	ldr	r3, [pc, #52]	@ (8013644 <std+0x58>)
 8013610:	6263      	str	r3, [r4, #36]	@ 0x24
 8013612:	4b0d      	ldr	r3, [pc, #52]	@ (8013648 <std+0x5c>)
 8013614:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013616:	4b0d      	ldr	r3, [pc, #52]	@ (801364c <std+0x60>)
 8013618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801361a:	4b0d      	ldr	r3, [pc, #52]	@ (8013650 <std+0x64>)
 801361c:	6323      	str	r3, [r4, #48]	@ 0x30
 801361e:	4b0d      	ldr	r3, [pc, #52]	@ (8013654 <std+0x68>)
 8013620:	6224      	str	r4, [r4, #32]
 8013622:	429c      	cmp	r4, r3
 8013624:	d006      	beq.n	8013634 <std+0x48>
 8013626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801362a:	4294      	cmp	r4, r2
 801362c:	d002      	beq.n	8013634 <std+0x48>
 801362e:	33d0      	adds	r3, #208	@ 0xd0
 8013630:	429c      	cmp	r4, r3
 8013632:	d105      	bne.n	8013640 <std+0x54>
 8013634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801363c:	f7ef b8cd 	b.w	80027da <__retarget_lock_init_recursive>
 8013640:	bd10      	pop	{r4, pc}
 8013642:	bf00      	nop
 8013644:	0801382d 	.word	0x0801382d
 8013648:	0801384f 	.word	0x0801384f
 801364c:	08013887 	.word	0x08013887
 8013650:	080138ab 	.word	0x080138ab
 8013654:	20003700 	.word	0x20003700

08013658 <stdio_exit_handler>:
 8013658:	4a02      	ldr	r2, [pc, #8]	@ (8013664 <stdio_exit_handler+0xc>)
 801365a:	4903      	ldr	r1, [pc, #12]	@ (8013668 <stdio_exit_handler+0x10>)
 801365c:	4803      	ldr	r0, [pc, #12]	@ (801366c <stdio_exit_handler+0x14>)
 801365e:	f000 b869 	b.w	8013734 <_fwalk_sglue>
 8013662:	bf00      	nop
 8013664:	20000188 	.word	0x20000188
 8013668:	08013d51 	.word	0x08013d51
 801366c:	20000198 	.word	0x20000198

08013670 <cleanup_stdio>:
 8013670:	6841      	ldr	r1, [r0, #4]
 8013672:	4b0c      	ldr	r3, [pc, #48]	@ (80136a4 <cleanup_stdio+0x34>)
 8013674:	4299      	cmp	r1, r3
 8013676:	b510      	push	{r4, lr}
 8013678:	4604      	mov	r4, r0
 801367a:	d001      	beq.n	8013680 <cleanup_stdio+0x10>
 801367c:	f000 fb68 	bl	8013d50 <_fflush_r>
 8013680:	68a1      	ldr	r1, [r4, #8]
 8013682:	4b09      	ldr	r3, [pc, #36]	@ (80136a8 <cleanup_stdio+0x38>)
 8013684:	4299      	cmp	r1, r3
 8013686:	d002      	beq.n	801368e <cleanup_stdio+0x1e>
 8013688:	4620      	mov	r0, r4
 801368a:	f000 fb61 	bl	8013d50 <_fflush_r>
 801368e:	68e1      	ldr	r1, [r4, #12]
 8013690:	4b06      	ldr	r3, [pc, #24]	@ (80136ac <cleanup_stdio+0x3c>)
 8013692:	4299      	cmp	r1, r3
 8013694:	d004      	beq.n	80136a0 <cleanup_stdio+0x30>
 8013696:	4620      	mov	r0, r4
 8013698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801369c:	f000 bb58 	b.w	8013d50 <_fflush_r>
 80136a0:	bd10      	pop	{r4, pc}
 80136a2:	bf00      	nop
 80136a4:	20003700 	.word	0x20003700
 80136a8:	20003768 	.word	0x20003768
 80136ac:	200037d0 	.word	0x200037d0

080136b0 <global_stdio_init.part.0>:
 80136b0:	b510      	push	{r4, lr}
 80136b2:	4b0b      	ldr	r3, [pc, #44]	@ (80136e0 <global_stdio_init.part.0+0x30>)
 80136b4:	4c0b      	ldr	r4, [pc, #44]	@ (80136e4 <global_stdio_init.part.0+0x34>)
 80136b6:	4a0c      	ldr	r2, [pc, #48]	@ (80136e8 <global_stdio_init.part.0+0x38>)
 80136b8:	601a      	str	r2, [r3, #0]
 80136ba:	4620      	mov	r0, r4
 80136bc:	2200      	movs	r2, #0
 80136be:	2104      	movs	r1, #4
 80136c0:	f7ff ff94 	bl	80135ec <std>
 80136c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80136c8:	2201      	movs	r2, #1
 80136ca:	2109      	movs	r1, #9
 80136cc:	f7ff ff8e 	bl	80135ec <std>
 80136d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80136d4:	2202      	movs	r2, #2
 80136d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136da:	2112      	movs	r1, #18
 80136dc:	f7ff bf86 	b.w	80135ec <std>
 80136e0:	20003838 	.word	0x20003838
 80136e4:	20003700 	.word	0x20003700
 80136e8:	08013659 	.word	0x08013659

080136ec <__sfp_lock_acquire>:
 80136ec:	4801      	ldr	r0, [pc, #4]	@ (80136f4 <__sfp_lock_acquire+0x8>)
 80136ee:	f7ef b89b 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80136f2:	bf00      	nop
 80136f4:	20000b24 	.word	0x20000b24

080136f8 <__sfp_lock_release>:
 80136f8:	4801      	ldr	r0, [pc, #4]	@ (8013700 <__sfp_lock_release+0x8>)
 80136fa:	f7ef b8aa 	b.w	8002852 <__retarget_lock_release_recursive>
 80136fe:	bf00      	nop
 8013700:	20000b24 	.word	0x20000b24

08013704 <__sinit>:
 8013704:	b510      	push	{r4, lr}
 8013706:	4604      	mov	r4, r0
 8013708:	f7ff fff0 	bl	80136ec <__sfp_lock_acquire>
 801370c:	6a23      	ldr	r3, [r4, #32]
 801370e:	b11b      	cbz	r3, 8013718 <__sinit+0x14>
 8013710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013714:	f7ff bff0 	b.w	80136f8 <__sfp_lock_release>
 8013718:	4b04      	ldr	r3, [pc, #16]	@ (801372c <__sinit+0x28>)
 801371a:	6223      	str	r3, [r4, #32]
 801371c:	4b04      	ldr	r3, [pc, #16]	@ (8013730 <__sinit+0x2c>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1f5      	bne.n	8013710 <__sinit+0xc>
 8013724:	f7ff ffc4 	bl	80136b0 <global_stdio_init.part.0>
 8013728:	e7f2      	b.n	8013710 <__sinit+0xc>
 801372a:	bf00      	nop
 801372c:	08013671 	.word	0x08013671
 8013730:	20003838 	.word	0x20003838

08013734 <_fwalk_sglue>:
 8013734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013738:	4607      	mov	r7, r0
 801373a:	4688      	mov	r8, r1
 801373c:	4614      	mov	r4, r2
 801373e:	2600      	movs	r6, #0
 8013740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013744:	f1b9 0901 	subs.w	r9, r9, #1
 8013748:	d505      	bpl.n	8013756 <_fwalk_sglue+0x22>
 801374a:	6824      	ldr	r4, [r4, #0]
 801374c:	2c00      	cmp	r4, #0
 801374e:	d1f7      	bne.n	8013740 <_fwalk_sglue+0xc>
 8013750:	4630      	mov	r0, r6
 8013752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013756:	89ab      	ldrh	r3, [r5, #12]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d907      	bls.n	801376c <_fwalk_sglue+0x38>
 801375c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013760:	3301      	adds	r3, #1
 8013762:	d003      	beq.n	801376c <_fwalk_sglue+0x38>
 8013764:	4629      	mov	r1, r5
 8013766:	4638      	mov	r0, r7
 8013768:	47c0      	blx	r8
 801376a:	4306      	orrs	r6, r0
 801376c:	3568      	adds	r5, #104	@ 0x68
 801376e:	e7e9      	b.n	8013744 <_fwalk_sglue+0x10>

08013770 <_puts_r>:
 8013770:	6a03      	ldr	r3, [r0, #32]
 8013772:	b570      	push	{r4, r5, r6, lr}
 8013774:	6884      	ldr	r4, [r0, #8]
 8013776:	4605      	mov	r5, r0
 8013778:	460e      	mov	r6, r1
 801377a:	b90b      	cbnz	r3, 8013780 <_puts_r+0x10>
 801377c:	f7ff ffc2 	bl	8013704 <__sinit>
 8013780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013782:	07db      	lsls	r3, r3, #31
 8013784:	d405      	bmi.n	8013792 <_puts_r+0x22>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	0598      	lsls	r0, r3, #22
 801378a:	d402      	bmi.n	8013792 <_puts_r+0x22>
 801378c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801378e:	f7ef f84b 	bl	8002828 <__retarget_lock_acquire_recursive>
 8013792:	89a3      	ldrh	r3, [r4, #12]
 8013794:	0719      	lsls	r1, r3, #28
 8013796:	d502      	bpl.n	801379e <_puts_r+0x2e>
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d135      	bne.n	801380a <_puts_r+0x9a>
 801379e:	4621      	mov	r1, r4
 80137a0:	4628      	mov	r0, r5
 80137a2:	f000 f8c5 	bl	8013930 <__swsetup_r>
 80137a6:	b380      	cbz	r0, 801380a <_puts_r+0x9a>
 80137a8:	f04f 35ff 	mov.w	r5, #4294967295
 80137ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137ae:	07da      	lsls	r2, r3, #31
 80137b0:	d405      	bmi.n	80137be <_puts_r+0x4e>
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	059b      	lsls	r3, r3, #22
 80137b6:	d402      	bmi.n	80137be <_puts_r+0x4e>
 80137b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137ba:	f7ef f84a 	bl	8002852 <__retarget_lock_release_recursive>
 80137be:	4628      	mov	r0, r5
 80137c0:	bd70      	pop	{r4, r5, r6, pc}
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	da04      	bge.n	80137d0 <_puts_r+0x60>
 80137c6:	69a2      	ldr	r2, [r4, #24]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	dc17      	bgt.n	80137fc <_puts_r+0x8c>
 80137cc:	290a      	cmp	r1, #10
 80137ce:	d015      	beq.n	80137fc <_puts_r+0x8c>
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	1c5a      	adds	r2, r3, #1
 80137d4:	6022      	str	r2, [r4, #0]
 80137d6:	7019      	strb	r1, [r3, #0]
 80137d8:	68a3      	ldr	r3, [r4, #8]
 80137da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80137de:	3b01      	subs	r3, #1
 80137e0:	60a3      	str	r3, [r4, #8]
 80137e2:	2900      	cmp	r1, #0
 80137e4:	d1ed      	bne.n	80137c2 <_puts_r+0x52>
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	da11      	bge.n	801380e <_puts_r+0x9e>
 80137ea:	4622      	mov	r2, r4
 80137ec:	210a      	movs	r1, #10
 80137ee:	4628      	mov	r0, r5
 80137f0:	f000 f85f 	bl	80138b2 <__swbuf_r>
 80137f4:	3001      	adds	r0, #1
 80137f6:	d0d7      	beq.n	80137a8 <_puts_r+0x38>
 80137f8:	250a      	movs	r5, #10
 80137fa:	e7d7      	b.n	80137ac <_puts_r+0x3c>
 80137fc:	4622      	mov	r2, r4
 80137fe:	4628      	mov	r0, r5
 8013800:	f000 f857 	bl	80138b2 <__swbuf_r>
 8013804:	3001      	adds	r0, #1
 8013806:	d1e7      	bne.n	80137d8 <_puts_r+0x68>
 8013808:	e7ce      	b.n	80137a8 <_puts_r+0x38>
 801380a:	3e01      	subs	r6, #1
 801380c:	e7e4      	b.n	80137d8 <_puts_r+0x68>
 801380e:	6823      	ldr	r3, [r4, #0]
 8013810:	1c5a      	adds	r2, r3, #1
 8013812:	6022      	str	r2, [r4, #0]
 8013814:	220a      	movs	r2, #10
 8013816:	701a      	strb	r2, [r3, #0]
 8013818:	e7ee      	b.n	80137f8 <_puts_r+0x88>
	...

0801381c <puts>:
 801381c:	4b02      	ldr	r3, [pc, #8]	@ (8013828 <puts+0xc>)
 801381e:	4601      	mov	r1, r0
 8013820:	6818      	ldr	r0, [r3, #0]
 8013822:	f7ff bfa5 	b.w	8013770 <_puts_r>
 8013826:	bf00      	nop
 8013828:	20000194 	.word	0x20000194

0801382c <__sread>:
 801382c:	b510      	push	{r4, lr}
 801382e:	460c      	mov	r4, r1
 8013830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013834:	f000 f952 	bl	8013adc <_read_r>
 8013838:	2800      	cmp	r0, #0
 801383a:	bfab      	itete	ge
 801383c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801383e:	89a3      	ldrhlt	r3, [r4, #12]
 8013840:	181b      	addge	r3, r3, r0
 8013842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013846:	bfac      	ite	ge
 8013848:	6563      	strge	r3, [r4, #84]	@ 0x54
 801384a:	81a3      	strhlt	r3, [r4, #12]
 801384c:	bd10      	pop	{r4, pc}

0801384e <__swrite>:
 801384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013852:	461f      	mov	r7, r3
 8013854:	898b      	ldrh	r3, [r1, #12]
 8013856:	05db      	lsls	r3, r3, #23
 8013858:	4605      	mov	r5, r0
 801385a:	460c      	mov	r4, r1
 801385c:	4616      	mov	r6, r2
 801385e:	d505      	bpl.n	801386c <__swrite+0x1e>
 8013860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013864:	2302      	movs	r3, #2
 8013866:	2200      	movs	r2, #0
 8013868:	f000 f926 	bl	8013ab8 <_lseek_r>
 801386c:	89a3      	ldrh	r3, [r4, #12]
 801386e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013876:	81a3      	strh	r3, [r4, #12]
 8013878:	4632      	mov	r2, r6
 801387a:	463b      	mov	r3, r7
 801387c:	4628      	mov	r0, r5
 801387e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013882:	f000 b94d 	b.w	8013b20 <_write_r>

08013886 <__sseek>:
 8013886:	b510      	push	{r4, lr}
 8013888:	460c      	mov	r4, r1
 801388a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801388e:	f000 f913 	bl	8013ab8 <_lseek_r>
 8013892:	1c43      	adds	r3, r0, #1
 8013894:	89a3      	ldrh	r3, [r4, #12]
 8013896:	bf15      	itete	ne
 8013898:	6560      	strne	r0, [r4, #84]	@ 0x54
 801389a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801389e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80138a2:	81a3      	strheq	r3, [r4, #12]
 80138a4:	bf18      	it	ne
 80138a6:	81a3      	strhne	r3, [r4, #12]
 80138a8:	bd10      	pop	{r4, pc}

080138aa <__sclose>:
 80138aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ae:	f000 b89d 	b.w	80139ec <_close_r>

080138b2 <__swbuf_r>:
 80138b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b4:	460e      	mov	r6, r1
 80138b6:	4614      	mov	r4, r2
 80138b8:	4605      	mov	r5, r0
 80138ba:	b118      	cbz	r0, 80138c4 <__swbuf_r+0x12>
 80138bc:	6a03      	ldr	r3, [r0, #32]
 80138be:	b90b      	cbnz	r3, 80138c4 <__swbuf_r+0x12>
 80138c0:	f7ff ff20 	bl	8013704 <__sinit>
 80138c4:	69a3      	ldr	r3, [r4, #24]
 80138c6:	60a3      	str	r3, [r4, #8]
 80138c8:	89a3      	ldrh	r3, [r4, #12]
 80138ca:	071a      	lsls	r2, r3, #28
 80138cc:	d501      	bpl.n	80138d2 <__swbuf_r+0x20>
 80138ce:	6923      	ldr	r3, [r4, #16]
 80138d0:	b943      	cbnz	r3, 80138e4 <__swbuf_r+0x32>
 80138d2:	4621      	mov	r1, r4
 80138d4:	4628      	mov	r0, r5
 80138d6:	f000 f82b 	bl	8013930 <__swsetup_r>
 80138da:	b118      	cbz	r0, 80138e4 <__swbuf_r+0x32>
 80138dc:	f04f 37ff 	mov.w	r7, #4294967295
 80138e0:	4638      	mov	r0, r7
 80138e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	6922      	ldr	r2, [r4, #16]
 80138e8:	1a98      	subs	r0, r3, r2
 80138ea:	6963      	ldr	r3, [r4, #20]
 80138ec:	b2f6      	uxtb	r6, r6
 80138ee:	4283      	cmp	r3, r0
 80138f0:	4637      	mov	r7, r6
 80138f2:	dc05      	bgt.n	8013900 <__swbuf_r+0x4e>
 80138f4:	4621      	mov	r1, r4
 80138f6:	4628      	mov	r0, r5
 80138f8:	f000 fa2a 	bl	8013d50 <_fflush_r>
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d1ed      	bne.n	80138dc <__swbuf_r+0x2a>
 8013900:	68a3      	ldr	r3, [r4, #8]
 8013902:	3b01      	subs	r3, #1
 8013904:	60a3      	str	r3, [r4, #8]
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	1c5a      	adds	r2, r3, #1
 801390a:	6022      	str	r2, [r4, #0]
 801390c:	701e      	strb	r6, [r3, #0]
 801390e:	6962      	ldr	r2, [r4, #20]
 8013910:	1c43      	adds	r3, r0, #1
 8013912:	429a      	cmp	r2, r3
 8013914:	d004      	beq.n	8013920 <__swbuf_r+0x6e>
 8013916:	89a3      	ldrh	r3, [r4, #12]
 8013918:	07db      	lsls	r3, r3, #31
 801391a:	d5e1      	bpl.n	80138e0 <__swbuf_r+0x2e>
 801391c:	2e0a      	cmp	r6, #10
 801391e:	d1df      	bne.n	80138e0 <__swbuf_r+0x2e>
 8013920:	4621      	mov	r1, r4
 8013922:	4628      	mov	r0, r5
 8013924:	f000 fa14 	bl	8013d50 <_fflush_r>
 8013928:	2800      	cmp	r0, #0
 801392a:	d0d9      	beq.n	80138e0 <__swbuf_r+0x2e>
 801392c:	e7d6      	b.n	80138dc <__swbuf_r+0x2a>
	...

08013930 <__swsetup_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	4b29      	ldr	r3, [pc, #164]	@ (80139d8 <__swsetup_r+0xa8>)
 8013934:	4605      	mov	r5, r0
 8013936:	6818      	ldr	r0, [r3, #0]
 8013938:	460c      	mov	r4, r1
 801393a:	b118      	cbz	r0, 8013944 <__swsetup_r+0x14>
 801393c:	6a03      	ldr	r3, [r0, #32]
 801393e:	b90b      	cbnz	r3, 8013944 <__swsetup_r+0x14>
 8013940:	f7ff fee0 	bl	8013704 <__sinit>
 8013944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013948:	0719      	lsls	r1, r3, #28
 801394a:	d422      	bmi.n	8013992 <__swsetup_r+0x62>
 801394c:	06da      	lsls	r2, r3, #27
 801394e:	d407      	bmi.n	8013960 <__swsetup_r+0x30>
 8013950:	2209      	movs	r2, #9
 8013952:	602a      	str	r2, [r5, #0]
 8013954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013958:	81a3      	strh	r3, [r4, #12]
 801395a:	f04f 30ff 	mov.w	r0, #4294967295
 801395e:	e033      	b.n	80139c8 <__swsetup_r+0x98>
 8013960:	0758      	lsls	r0, r3, #29
 8013962:	d512      	bpl.n	801398a <__swsetup_r+0x5a>
 8013964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013966:	b141      	cbz	r1, 801397a <__swsetup_r+0x4a>
 8013968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801396c:	4299      	cmp	r1, r3
 801396e:	d002      	beq.n	8013976 <__swsetup_r+0x46>
 8013970:	4628      	mov	r0, r5
 8013972:	f000 f91f 	bl	8013bb4 <_free_r>
 8013976:	2300      	movs	r3, #0
 8013978:	6363      	str	r3, [r4, #52]	@ 0x34
 801397a:	89a3      	ldrh	r3, [r4, #12]
 801397c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013980:	81a3      	strh	r3, [r4, #12]
 8013982:	2300      	movs	r3, #0
 8013984:	6063      	str	r3, [r4, #4]
 8013986:	6923      	ldr	r3, [r4, #16]
 8013988:	6023      	str	r3, [r4, #0]
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	f043 0308 	orr.w	r3, r3, #8
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	6923      	ldr	r3, [r4, #16]
 8013994:	b94b      	cbnz	r3, 80139aa <__swsetup_r+0x7a>
 8013996:	89a3      	ldrh	r3, [r4, #12]
 8013998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801399c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139a0:	d003      	beq.n	80139aa <__swsetup_r+0x7a>
 80139a2:	4621      	mov	r1, r4
 80139a4:	4628      	mov	r0, r5
 80139a6:	f000 fa21 	bl	8013dec <__smakebuf_r>
 80139aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ae:	f013 0201 	ands.w	r2, r3, #1
 80139b2:	d00a      	beq.n	80139ca <__swsetup_r+0x9a>
 80139b4:	2200      	movs	r2, #0
 80139b6:	60a2      	str	r2, [r4, #8]
 80139b8:	6962      	ldr	r2, [r4, #20]
 80139ba:	4252      	negs	r2, r2
 80139bc:	61a2      	str	r2, [r4, #24]
 80139be:	6922      	ldr	r2, [r4, #16]
 80139c0:	b942      	cbnz	r2, 80139d4 <__swsetup_r+0xa4>
 80139c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80139c6:	d1c5      	bne.n	8013954 <__swsetup_r+0x24>
 80139c8:	bd38      	pop	{r3, r4, r5, pc}
 80139ca:	0799      	lsls	r1, r3, #30
 80139cc:	bf58      	it	pl
 80139ce:	6962      	ldrpl	r2, [r4, #20]
 80139d0:	60a2      	str	r2, [r4, #8]
 80139d2:	e7f4      	b.n	80139be <__swsetup_r+0x8e>
 80139d4:	2000      	movs	r0, #0
 80139d6:	e7f7      	b.n	80139c8 <__swsetup_r+0x98>
 80139d8:	20000194 	.word	0x20000194

080139dc <memset>:
 80139dc:	4402      	add	r2, r0
 80139de:	4603      	mov	r3, r0
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d100      	bne.n	80139e6 <memset+0xa>
 80139e4:	4770      	bx	lr
 80139e6:	f803 1b01 	strb.w	r1, [r3], #1
 80139ea:	e7f9      	b.n	80139e0 <memset+0x4>

080139ec <_close_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d06      	ldr	r5, [pc, #24]	@ (8013a08 <_close_r+0x1c>)
 80139f0:	2300      	movs	r3, #0
 80139f2:	4604      	mov	r4, r0
 80139f4:	4608      	mov	r0, r1
 80139f6:	602b      	str	r3, [r5, #0]
 80139f8:	f7ee faa3 	bl	8001f42 <_close>
 80139fc:	1c43      	adds	r3, r0, #1
 80139fe:	d102      	bne.n	8013a06 <_close_r+0x1a>
 8013a00:	682b      	ldr	r3, [r5, #0]
 8013a02:	b103      	cbz	r3, 8013a06 <_close_r+0x1a>
 8013a04:	6023      	str	r3, [r4, #0]
 8013a06:	bd38      	pop	{r3, r4, r5, pc}
 8013a08:	2000383c 	.word	0x2000383c

08013a0c <_reclaim_reent>:
 8013a0c:	4b29      	ldr	r3, [pc, #164]	@ (8013ab4 <_reclaim_reent+0xa8>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4283      	cmp	r3, r0
 8013a12:	b570      	push	{r4, r5, r6, lr}
 8013a14:	4604      	mov	r4, r0
 8013a16:	d04b      	beq.n	8013ab0 <_reclaim_reent+0xa4>
 8013a18:	69c3      	ldr	r3, [r0, #28]
 8013a1a:	b1ab      	cbz	r3, 8013a48 <_reclaim_reent+0x3c>
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	b16b      	cbz	r3, 8013a3c <_reclaim_reent+0x30>
 8013a20:	2500      	movs	r5, #0
 8013a22:	69e3      	ldr	r3, [r4, #28]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	5959      	ldr	r1, [r3, r5]
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	d13b      	bne.n	8013aa4 <_reclaim_reent+0x98>
 8013a2c:	3504      	adds	r5, #4
 8013a2e:	2d80      	cmp	r5, #128	@ 0x80
 8013a30:	d1f7      	bne.n	8013a22 <_reclaim_reent+0x16>
 8013a32:	69e3      	ldr	r3, [r4, #28]
 8013a34:	4620      	mov	r0, r4
 8013a36:	68d9      	ldr	r1, [r3, #12]
 8013a38:	f000 f8bc 	bl	8013bb4 <_free_r>
 8013a3c:	69e3      	ldr	r3, [r4, #28]
 8013a3e:	6819      	ldr	r1, [r3, #0]
 8013a40:	b111      	cbz	r1, 8013a48 <_reclaim_reent+0x3c>
 8013a42:	4620      	mov	r0, r4
 8013a44:	f000 f8b6 	bl	8013bb4 <_free_r>
 8013a48:	6961      	ldr	r1, [r4, #20]
 8013a4a:	b111      	cbz	r1, 8013a52 <_reclaim_reent+0x46>
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 f8b1 	bl	8013bb4 <_free_r>
 8013a52:	69e1      	ldr	r1, [r4, #28]
 8013a54:	b111      	cbz	r1, 8013a5c <_reclaim_reent+0x50>
 8013a56:	4620      	mov	r0, r4
 8013a58:	f000 f8ac 	bl	8013bb4 <_free_r>
 8013a5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013a5e:	b111      	cbz	r1, 8013a66 <_reclaim_reent+0x5a>
 8013a60:	4620      	mov	r0, r4
 8013a62:	f000 f8a7 	bl	8013bb4 <_free_r>
 8013a66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a68:	b111      	cbz	r1, 8013a70 <_reclaim_reent+0x64>
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 f8a2 	bl	8013bb4 <_free_r>
 8013a70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013a72:	b111      	cbz	r1, 8013a7a <_reclaim_reent+0x6e>
 8013a74:	4620      	mov	r0, r4
 8013a76:	f000 f89d 	bl	8013bb4 <_free_r>
 8013a7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013a7c:	b111      	cbz	r1, 8013a84 <_reclaim_reent+0x78>
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f000 f898 	bl	8013bb4 <_free_r>
 8013a84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013a86:	b111      	cbz	r1, 8013a8e <_reclaim_reent+0x82>
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f000 f893 	bl	8013bb4 <_free_r>
 8013a8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013a90:	b111      	cbz	r1, 8013a98 <_reclaim_reent+0x8c>
 8013a92:	4620      	mov	r0, r4
 8013a94:	f000 f88e 	bl	8013bb4 <_free_r>
 8013a98:	6a23      	ldr	r3, [r4, #32]
 8013a9a:	b14b      	cbz	r3, 8013ab0 <_reclaim_reent+0xa4>
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aa2:	4718      	bx	r3
 8013aa4:	680e      	ldr	r6, [r1, #0]
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f000 f884 	bl	8013bb4 <_free_r>
 8013aac:	4631      	mov	r1, r6
 8013aae:	e7bb      	b.n	8013a28 <_reclaim_reent+0x1c>
 8013ab0:	bd70      	pop	{r4, r5, r6, pc}
 8013ab2:	bf00      	nop
 8013ab4:	20000194 	.word	0x20000194

08013ab8 <_lseek_r>:
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4d07      	ldr	r5, [pc, #28]	@ (8013ad8 <_lseek_r+0x20>)
 8013abc:	4604      	mov	r4, r0
 8013abe:	4608      	mov	r0, r1
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	602a      	str	r2, [r5, #0]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	f7ee fa62 	bl	8001f90 <_lseek>
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	d102      	bne.n	8013ad6 <_lseek_r+0x1e>
 8013ad0:	682b      	ldr	r3, [r5, #0]
 8013ad2:	b103      	cbz	r3, 8013ad6 <_lseek_r+0x1e>
 8013ad4:	6023      	str	r3, [r4, #0]
 8013ad6:	bd38      	pop	{r3, r4, r5, pc}
 8013ad8:	2000383c 	.word	0x2000383c

08013adc <_read_r>:
 8013adc:	b538      	push	{r3, r4, r5, lr}
 8013ade:	4d07      	ldr	r5, [pc, #28]	@ (8013afc <_read_r+0x20>)
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	4608      	mov	r0, r1
 8013ae4:	4611      	mov	r1, r2
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	602a      	str	r2, [r5, #0]
 8013aea:	461a      	mov	r2, r3
 8013aec:	f7ee f9f0 	bl	8001ed0 <_read>
 8013af0:	1c43      	adds	r3, r0, #1
 8013af2:	d102      	bne.n	8013afa <_read_r+0x1e>
 8013af4:	682b      	ldr	r3, [r5, #0]
 8013af6:	b103      	cbz	r3, 8013afa <_read_r+0x1e>
 8013af8:	6023      	str	r3, [r4, #0]
 8013afa:	bd38      	pop	{r3, r4, r5, pc}
 8013afc:	2000383c 	.word	0x2000383c

08013b00 <_sbrk_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4d06      	ldr	r5, [pc, #24]	@ (8013b1c <_sbrk_r+0x1c>)
 8013b04:	2300      	movs	r3, #0
 8013b06:	4604      	mov	r4, r0
 8013b08:	4608      	mov	r0, r1
 8013b0a:	602b      	str	r3, [r5, #0]
 8013b0c:	f7ee fa4e 	bl	8001fac <_sbrk>
 8013b10:	1c43      	adds	r3, r0, #1
 8013b12:	d102      	bne.n	8013b1a <_sbrk_r+0x1a>
 8013b14:	682b      	ldr	r3, [r5, #0]
 8013b16:	b103      	cbz	r3, 8013b1a <_sbrk_r+0x1a>
 8013b18:	6023      	str	r3, [r4, #0]
 8013b1a:	bd38      	pop	{r3, r4, r5, pc}
 8013b1c:	2000383c 	.word	0x2000383c

08013b20 <_write_r>:
 8013b20:	b538      	push	{r3, r4, r5, lr}
 8013b22:	4d07      	ldr	r5, [pc, #28]	@ (8013b40 <_write_r+0x20>)
 8013b24:	4604      	mov	r4, r0
 8013b26:	4608      	mov	r0, r1
 8013b28:	4611      	mov	r1, r2
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	602a      	str	r2, [r5, #0]
 8013b2e:	461a      	mov	r2, r3
 8013b30:	f7ee f9eb 	bl	8001f0a <_write>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d102      	bne.n	8013b3e <_write_r+0x1e>
 8013b38:	682b      	ldr	r3, [r5, #0]
 8013b3a:	b103      	cbz	r3, 8013b3e <_write_r+0x1e>
 8013b3c:	6023      	str	r3, [r4, #0]
 8013b3e:	bd38      	pop	{r3, r4, r5, pc}
 8013b40:	2000383c 	.word	0x2000383c

08013b44 <__errno>:
 8013b44:	4b01      	ldr	r3, [pc, #4]	@ (8013b4c <__errno+0x8>)
 8013b46:	6818      	ldr	r0, [r3, #0]
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop
 8013b4c:	20000194 	.word	0x20000194

08013b50 <__libc_init_array>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	4d0d      	ldr	r5, [pc, #52]	@ (8013b88 <__libc_init_array+0x38>)
 8013b54:	4c0d      	ldr	r4, [pc, #52]	@ (8013b8c <__libc_init_array+0x3c>)
 8013b56:	1b64      	subs	r4, r4, r5
 8013b58:	10a4      	asrs	r4, r4, #2
 8013b5a:	2600      	movs	r6, #0
 8013b5c:	42a6      	cmp	r6, r4
 8013b5e:	d109      	bne.n	8013b74 <__libc_init_array+0x24>
 8013b60:	4d0b      	ldr	r5, [pc, #44]	@ (8013b90 <__libc_init_array+0x40>)
 8013b62:	4c0c      	ldr	r4, [pc, #48]	@ (8013b94 <__libc_init_array+0x44>)
 8013b64:	f000 f9a0 	bl	8013ea8 <_init>
 8013b68:	1b64      	subs	r4, r4, r5
 8013b6a:	10a4      	asrs	r4, r4, #2
 8013b6c:	2600      	movs	r6, #0
 8013b6e:	42a6      	cmp	r6, r4
 8013b70:	d105      	bne.n	8013b7e <__libc_init_array+0x2e>
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b78:	4798      	blx	r3
 8013b7a:	3601      	adds	r6, #1
 8013b7c:	e7ee      	b.n	8013b5c <__libc_init_array+0xc>
 8013b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b82:	4798      	blx	r3
 8013b84:	3601      	adds	r6, #1
 8013b86:	e7f2      	b.n	8013b6e <__libc_init_array+0x1e>
 8013b88:	080144c4 	.word	0x080144c4
 8013b8c:	080144c4 	.word	0x080144c4
 8013b90:	080144c4 	.word	0x080144c4
 8013b94:	080144cc 	.word	0x080144cc

08013b98 <memcpy>:
 8013b98:	440a      	add	r2, r1
 8013b9a:	4291      	cmp	r1, r2
 8013b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ba0:	d100      	bne.n	8013ba4 <memcpy+0xc>
 8013ba2:	4770      	bx	lr
 8013ba4:	b510      	push	{r4, lr}
 8013ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bae:	4291      	cmp	r1, r2
 8013bb0:	d1f9      	bne.n	8013ba6 <memcpy+0xe>
 8013bb2:	bd10      	pop	{r4, pc}

08013bb4 <_free_r>:
 8013bb4:	b538      	push	{r3, r4, r5, lr}
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	2900      	cmp	r1, #0
 8013bba:	d041      	beq.n	8013c40 <_free_r+0x8c>
 8013bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bc0:	1f0c      	subs	r4, r1, #4
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	bfb8      	it	lt
 8013bc6:	18e4      	addlt	r4, r4, r3
 8013bc8:	f7ff fd04 	bl	80135d4 <__malloc_lock>
 8013bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8013c44 <_free_r+0x90>)
 8013bce:	6813      	ldr	r3, [r2, #0]
 8013bd0:	b933      	cbnz	r3, 8013be0 <_free_r+0x2c>
 8013bd2:	6063      	str	r3, [r4, #4]
 8013bd4:	6014      	str	r4, [r2, #0]
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bdc:	f7ff bd00 	b.w	80135e0 <__malloc_unlock>
 8013be0:	42a3      	cmp	r3, r4
 8013be2:	d908      	bls.n	8013bf6 <_free_r+0x42>
 8013be4:	6820      	ldr	r0, [r4, #0]
 8013be6:	1821      	adds	r1, r4, r0
 8013be8:	428b      	cmp	r3, r1
 8013bea:	bf01      	itttt	eq
 8013bec:	6819      	ldreq	r1, [r3, #0]
 8013bee:	685b      	ldreq	r3, [r3, #4]
 8013bf0:	1809      	addeq	r1, r1, r0
 8013bf2:	6021      	streq	r1, [r4, #0]
 8013bf4:	e7ed      	b.n	8013bd2 <_free_r+0x1e>
 8013bf6:	461a      	mov	r2, r3
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	b10b      	cbz	r3, 8013c00 <_free_r+0x4c>
 8013bfc:	42a3      	cmp	r3, r4
 8013bfe:	d9fa      	bls.n	8013bf6 <_free_r+0x42>
 8013c00:	6811      	ldr	r1, [r2, #0]
 8013c02:	1850      	adds	r0, r2, r1
 8013c04:	42a0      	cmp	r0, r4
 8013c06:	d10b      	bne.n	8013c20 <_free_r+0x6c>
 8013c08:	6820      	ldr	r0, [r4, #0]
 8013c0a:	4401      	add	r1, r0
 8013c0c:	1850      	adds	r0, r2, r1
 8013c0e:	4283      	cmp	r3, r0
 8013c10:	6011      	str	r1, [r2, #0]
 8013c12:	d1e0      	bne.n	8013bd6 <_free_r+0x22>
 8013c14:	6818      	ldr	r0, [r3, #0]
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	6053      	str	r3, [r2, #4]
 8013c1a:	4408      	add	r0, r1
 8013c1c:	6010      	str	r0, [r2, #0]
 8013c1e:	e7da      	b.n	8013bd6 <_free_r+0x22>
 8013c20:	d902      	bls.n	8013c28 <_free_r+0x74>
 8013c22:	230c      	movs	r3, #12
 8013c24:	602b      	str	r3, [r5, #0]
 8013c26:	e7d6      	b.n	8013bd6 <_free_r+0x22>
 8013c28:	6820      	ldr	r0, [r4, #0]
 8013c2a:	1821      	adds	r1, r4, r0
 8013c2c:	428b      	cmp	r3, r1
 8013c2e:	bf04      	itt	eq
 8013c30:	6819      	ldreq	r1, [r3, #0]
 8013c32:	685b      	ldreq	r3, [r3, #4]
 8013c34:	6063      	str	r3, [r4, #4]
 8013c36:	bf04      	itt	eq
 8013c38:	1809      	addeq	r1, r1, r0
 8013c3a:	6021      	streq	r1, [r4, #0]
 8013c3c:	6054      	str	r4, [r2, #4]
 8013c3e:	e7ca      	b.n	8013bd6 <_free_r+0x22>
 8013c40:	bd38      	pop	{r3, r4, r5, pc}
 8013c42:	bf00      	nop
 8013c44:	200036fc 	.word	0x200036fc

08013c48 <__sflush_r>:
 8013c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c50:	0716      	lsls	r6, r2, #28
 8013c52:	4605      	mov	r5, r0
 8013c54:	460c      	mov	r4, r1
 8013c56:	d454      	bmi.n	8013d02 <__sflush_r+0xba>
 8013c58:	684b      	ldr	r3, [r1, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	dc02      	bgt.n	8013c64 <__sflush_r+0x1c>
 8013c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	dd48      	ble.n	8013cf6 <__sflush_r+0xae>
 8013c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	d045      	beq.n	8013cf6 <__sflush_r+0xae>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c70:	682f      	ldr	r7, [r5, #0]
 8013c72:	6a21      	ldr	r1, [r4, #32]
 8013c74:	602b      	str	r3, [r5, #0]
 8013c76:	d030      	beq.n	8013cda <__sflush_r+0x92>
 8013c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c7a:	89a3      	ldrh	r3, [r4, #12]
 8013c7c:	0759      	lsls	r1, r3, #29
 8013c7e:	d505      	bpl.n	8013c8c <__sflush_r+0x44>
 8013c80:	6863      	ldr	r3, [r4, #4]
 8013c82:	1ad2      	subs	r2, r2, r3
 8013c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013c86:	b10b      	cbz	r3, 8013c8c <__sflush_r+0x44>
 8013c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013c8a:	1ad2      	subs	r2, r2, r3
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c90:	6a21      	ldr	r1, [r4, #32]
 8013c92:	4628      	mov	r0, r5
 8013c94:	47b0      	blx	r6
 8013c96:	1c43      	adds	r3, r0, #1
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	d106      	bne.n	8013caa <__sflush_r+0x62>
 8013c9c:	6829      	ldr	r1, [r5, #0]
 8013c9e:	291d      	cmp	r1, #29
 8013ca0:	d82b      	bhi.n	8013cfa <__sflush_r+0xb2>
 8013ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8013d4c <__sflush_r+0x104>)
 8013ca4:	410a      	asrs	r2, r1
 8013ca6:	07d6      	lsls	r6, r2, #31
 8013ca8:	d427      	bmi.n	8013cfa <__sflush_r+0xb2>
 8013caa:	2200      	movs	r2, #0
 8013cac:	6062      	str	r2, [r4, #4]
 8013cae:	04d9      	lsls	r1, r3, #19
 8013cb0:	6922      	ldr	r2, [r4, #16]
 8013cb2:	6022      	str	r2, [r4, #0]
 8013cb4:	d504      	bpl.n	8013cc0 <__sflush_r+0x78>
 8013cb6:	1c42      	adds	r2, r0, #1
 8013cb8:	d101      	bne.n	8013cbe <__sflush_r+0x76>
 8013cba:	682b      	ldr	r3, [r5, #0]
 8013cbc:	b903      	cbnz	r3, 8013cc0 <__sflush_r+0x78>
 8013cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8013cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cc2:	602f      	str	r7, [r5, #0]
 8013cc4:	b1b9      	cbz	r1, 8013cf6 <__sflush_r+0xae>
 8013cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cca:	4299      	cmp	r1, r3
 8013ccc:	d002      	beq.n	8013cd4 <__sflush_r+0x8c>
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f7ff ff70 	bl	8013bb4 <_free_r>
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8013cd8:	e00d      	b.n	8013cf6 <__sflush_r+0xae>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	4628      	mov	r0, r5
 8013cde:	47b0      	blx	r6
 8013ce0:	4602      	mov	r2, r0
 8013ce2:	1c50      	adds	r0, r2, #1
 8013ce4:	d1c9      	bne.n	8013c7a <__sflush_r+0x32>
 8013ce6:	682b      	ldr	r3, [r5, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d0c6      	beq.n	8013c7a <__sflush_r+0x32>
 8013cec:	2b1d      	cmp	r3, #29
 8013cee:	d001      	beq.n	8013cf4 <__sflush_r+0xac>
 8013cf0:	2b16      	cmp	r3, #22
 8013cf2:	d11e      	bne.n	8013d32 <__sflush_r+0xea>
 8013cf4:	602f      	str	r7, [r5, #0]
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	e022      	b.n	8013d40 <__sflush_r+0xf8>
 8013cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cfe:	b21b      	sxth	r3, r3
 8013d00:	e01b      	b.n	8013d3a <__sflush_r+0xf2>
 8013d02:	690f      	ldr	r7, [r1, #16]
 8013d04:	2f00      	cmp	r7, #0
 8013d06:	d0f6      	beq.n	8013cf6 <__sflush_r+0xae>
 8013d08:	0793      	lsls	r3, r2, #30
 8013d0a:	680e      	ldr	r6, [r1, #0]
 8013d0c:	bf08      	it	eq
 8013d0e:	694b      	ldreq	r3, [r1, #20]
 8013d10:	600f      	str	r7, [r1, #0]
 8013d12:	bf18      	it	ne
 8013d14:	2300      	movne	r3, #0
 8013d16:	eba6 0807 	sub.w	r8, r6, r7
 8013d1a:	608b      	str	r3, [r1, #8]
 8013d1c:	f1b8 0f00 	cmp.w	r8, #0
 8013d20:	dde9      	ble.n	8013cf6 <__sflush_r+0xae>
 8013d22:	6a21      	ldr	r1, [r4, #32]
 8013d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d26:	4643      	mov	r3, r8
 8013d28:	463a      	mov	r2, r7
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	47b0      	blx	r6
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	dc08      	bgt.n	8013d44 <__sflush_r+0xfc>
 8013d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d3a:	81a3      	strh	r3, [r4, #12]
 8013d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d44:	4407      	add	r7, r0
 8013d46:	eba8 0800 	sub.w	r8, r8, r0
 8013d4a:	e7e7      	b.n	8013d1c <__sflush_r+0xd4>
 8013d4c:	dfbffffe 	.word	0xdfbffffe

08013d50 <_fflush_r>:
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	690b      	ldr	r3, [r1, #16]
 8013d54:	4605      	mov	r5, r0
 8013d56:	460c      	mov	r4, r1
 8013d58:	b913      	cbnz	r3, 8013d60 <_fflush_r+0x10>
 8013d5a:	2500      	movs	r5, #0
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	bd38      	pop	{r3, r4, r5, pc}
 8013d60:	b118      	cbz	r0, 8013d6a <_fflush_r+0x1a>
 8013d62:	6a03      	ldr	r3, [r0, #32]
 8013d64:	b90b      	cbnz	r3, 8013d6a <_fflush_r+0x1a>
 8013d66:	f7ff fccd 	bl	8013704 <__sinit>
 8013d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0f3      	beq.n	8013d5a <_fflush_r+0xa>
 8013d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d74:	07d0      	lsls	r0, r2, #31
 8013d76:	d404      	bmi.n	8013d82 <_fflush_r+0x32>
 8013d78:	0599      	lsls	r1, r3, #22
 8013d7a:	d402      	bmi.n	8013d82 <_fflush_r+0x32>
 8013d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d7e:	f7ee fd53 	bl	8002828 <__retarget_lock_acquire_recursive>
 8013d82:	4628      	mov	r0, r5
 8013d84:	4621      	mov	r1, r4
 8013d86:	f7ff ff5f 	bl	8013c48 <__sflush_r>
 8013d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d8c:	07da      	lsls	r2, r3, #31
 8013d8e:	4605      	mov	r5, r0
 8013d90:	d4e4      	bmi.n	8013d5c <_fflush_r+0xc>
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	059b      	lsls	r3, r3, #22
 8013d96:	d4e1      	bmi.n	8013d5c <_fflush_r+0xc>
 8013d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d9a:	f7ee fd5a 	bl	8002852 <__retarget_lock_release_recursive>
 8013d9e:	e7dd      	b.n	8013d5c <_fflush_r+0xc>

08013da0 <__swhatbuf_r>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	460c      	mov	r4, r1
 8013da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013da8:	2900      	cmp	r1, #0
 8013daa:	b096      	sub	sp, #88	@ 0x58
 8013dac:	4615      	mov	r5, r2
 8013dae:	461e      	mov	r6, r3
 8013db0:	da0d      	bge.n	8013dce <__swhatbuf_r+0x2e>
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013db8:	f04f 0100 	mov.w	r1, #0
 8013dbc:	bf14      	ite	ne
 8013dbe:	2340      	movne	r3, #64	@ 0x40
 8013dc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013dc4:	2000      	movs	r0, #0
 8013dc6:	6031      	str	r1, [r6, #0]
 8013dc8:	602b      	str	r3, [r5, #0]
 8013dca:	b016      	add	sp, #88	@ 0x58
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	466a      	mov	r2, sp
 8013dd0:	f000 f848 	bl	8013e64 <_fstat_r>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	dbec      	blt.n	8013db2 <__swhatbuf_r+0x12>
 8013dd8:	9901      	ldr	r1, [sp, #4]
 8013dda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013dde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013de2:	4259      	negs	r1, r3
 8013de4:	4159      	adcs	r1, r3
 8013de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013dea:	e7eb      	b.n	8013dc4 <__swhatbuf_r+0x24>

08013dec <__smakebuf_r>:
 8013dec:	898b      	ldrh	r3, [r1, #12]
 8013dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013df0:	079d      	lsls	r5, r3, #30
 8013df2:	4606      	mov	r6, r0
 8013df4:	460c      	mov	r4, r1
 8013df6:	d507      	bpl.n	8013e08 <__smakebuf_r+0x1c>
 8013df8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013dfc:	6023      	str	r3, [r4, #0]
 8013dfe:	6123      	str	r3, [r4, #16]
 8013e00:	2301      	movs	r3, #1
 8013e02:	6163      	str	r3, [r4, #20]
 8013e04:	b003      	add	sp, #12
 8013e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e08:	ab01      	add	r3, sp, #4
 8013e0a:	466a      	mov	r2, sp
 8013e0c:	f7ff ffc8 	bl	8013da0 <__swhatbuf_r>
 8013e10:	9f00      	ldr	r7, [sp, #0]
 8013e12:	4605      	mov	r5, r0
 8013e14:	4639      	mov	r1, r7
 8013e16:	4630      	mov	r0, r6
 8013e18:	f7ff fb5c 	bl	80134d4 <_malloc_r>
 8013e1c:	b948      	cbnz	r0, 8013e32 <__smakebuf_r+0x46>
 8013e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e22:	059a      	lsls	r2, r3, #22
 8013e24:	d4ee      	bmi.n	8013e04 <__smakebuf_r+0x18>
 8013e26:	f023 0303 	bic.w	r3, r3, #3
 8013e2a:	f043 0302 	orr.w	r3, r3, #2
 8013e2e:	81a3      	strh	r3, [r4, #12]
 8013e30:	e7e2      	b.n	8013df8 <__smakebuf_r+0xc>
 8013e32:	89a3      	ldrh	r3, [r4, #12]
 8013e34:	6020      	str	r0, [r4, #0]
 8013e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e3a:	81a3      	strh	r3, [r4, #12]
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e42:	b15b      	cbz	r3, 8013e5c <__smakebuf_r+0x70>
 8013e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f000 f81d 	bl	8013e88 <_isatty_r>
 8013e4e:	b128      	cbz	r0, 8013e5c <__smakebuf_r+0x70>
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	f023 0303 	bic.w	r3, r3, #3
 8013e56:	f043 0301 	orr.w	r3, r3, #1
 8013e5a:	81a3      	strh	r3, [r4, #12]
 8013e5c:	89a3      	ldrh	r3, [r4, #12]
 8013e5e:	431d      	orrs	r5, r3
 8013e60:	81a5      	strh	r5, [r4, #12]
 8013e62:	e7cf      	b.n	8013e04 <__smakebuf_r+0x18>

08013e64 <_fstat_r>:
 8013e64:	b538      	push	{r3, r4, r5, lr}
 8013e66:	4d07      	ldr	r5, [pc, #28]	@ (8013e84 <_fstat_r+0x20>)
 8013e68:	2300      	movs	r3, #0
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	4608      	mov	r0, r1
 8013e6e:	4611      	mov	r1, r2
 8013e70:	602b      	str	r3, [r5, #0]
 8013e72:	f7ee f872 	bl	8001f5a <_fstat>
 8013e76:	1c43      	adds	r3, r0, #1
 8013e78:	d102      	bne.n	8013e80 <_fstat_r+0x1c>
 8013e7a:	682b      	ldr	r3, [r5, #0]
 8013e7c:	b103      	cbz	r3, 8013e80 <_fstat_r+0x1c>
 8013e7e:	6023      	str	r3, [r4, #0]
 8013e80:	bd38      	pop	{r3, r4, r5, pc}
 8013e82:	bf00      	nop
 8013e84:	2000383c 	.word	0x2000383c

08013e88 <_isatty_r>:
 8013e88:	b538      	push	{r3, r4, r5, lr}
 8013e8a:	4d06      	ldr	r5, [pc, #24]	@ (8013ea4 <_isatty_r+0x1c>)
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	4604      	mov	r4, r0
 8013e90:	4608      	mov	r0, r1
 8013e92:	602b      	str	r3, [r5, #0]
 8013e94:	f7ee f871 	bl	8001f7a <_isatty>
 8013e98:	1c43      	adds	r3, r0, #1
 8013e9a:	d102      	bne.n	8013ea2 <_isatty_r+0x1a>
 8013e9c:	682b      	ldr	r3, [r5, #0]
 8013e9e:	b103      	cbz	r3, 8013ea2 <_isatty_r+0x1a>
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	bd38      	pop	{r3, r4, r5, pc}
 8013ea4:	2000383c 	.word	0x2000383c

08013ea8 <_init>:
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eaa:	bf00      	nop
 8013eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eae:	bc08      	pop	{r3}
 8013eb0:	469e      	mov	lr, r3
 8013eb2:	4770      	bx	lr

08013eb4 <_fini>:
 8013eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eb6:	bf00      	nop
 8013eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eba:	bc08      	pop	{r3}
 8013ebc:	469e      	mov	lr, r3
 8013ebe:	4770      	bx	lr
